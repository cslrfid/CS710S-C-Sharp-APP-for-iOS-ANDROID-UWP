<?xml version="1.0"?>
<doc>
    <assembly>
        <name>wclBluetoothFramework</name>
    </assembly>
    <members>
        <member name="T:wclBluetooth.wclAudioSwitcher">
            <summary> The class provides functional to select system default audio
              device. </summary>
        </member>
        <member name="M:wclBluetooth.wclAudioSwitcher.DoClosed">
            <summary> Calls the <c>OnClosed</c> event. </summary>
        </member>
        <member name="M:wclBluetooth.wclAudioSwitcher.DoDefaultDeviceChanged(System.String,wclBluetooth.wclAudioDeviceDataFlow,wclBluetooth.wclAudioDeviceRole)">
            <summary> Calls the <c>OnDefaultDeviceChanged</c> event. </summary>
            <param name="Id"> The device ID. </param>
            <param name="Flow"> The device data flow. </param>
            <param name="Role"> The device role. </param>
            <seealso cref="T:wclBluetooth.wclAudioDeviceDataFlow" />
            <seealso cref="T:wclBluetooth.wclAudioDeviceRole" />
        </member>
        <member name="M:wclBluetooth.wclAudioSwitcher.DoDeviceAdded(System.String)">
            <summary> Calls the <c>OnDeviceAdded</c> event. </summary>
            <param name="Id"> The device ID. </param>
        </member>
        <member name="M:wclBluetooth.wclAudioSwitcher.DoOpened">
            <summary> Calls the <c>OnOpend</c> event. </summary>
        </member>
        <member name="M:wclBluetooth.wclAudioSwitcher.DoDeviceRemoved(System.String)">
            <summary> Calls the <c>OnDeviceRemoved</c> event. </summary>
            <param name="Id"> The device ID. </param>
        </member>
        <member name="M:wclBluetooth.wclAudioSwitcher.DoStateChanged(System.String,wclBluetooth.wclAudioDeviceState)">
            <summary> Calls the <c>OnStateChanged</c> event. </summary>
            <param name="Id"> The device ID. </param>
            <param name="State"> The new device state. </param>
            <seealso cref="T:wclBluetooth.wclAudioDeviceState" />
        </member>
        <member name="M:wclBluetooth.wclAudioSwitcher.#ctor">
            <summary> Creates new Audio Switcher component. </summary>
        </member>
        <member name="M:wclBluetooth.wclAudioSwitcher.Finalize">
            <summary> Frees the object. </summary>
        </member>
        <member name="M:wclBluetooth.wclAudioSwitcher.Close">
            <summary> Closes the Audio Switcher. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclAudioSwitcher.Open">
            <summary> Opens the Audio Switcher. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclAudioSwitcher.Enum(wclBluetooth.wclAudioDeviceState,wclBluetooth.wclAudioDevice[]@)">
            <summary> Enumerates available audio devices. </summary>
            <param name="States"> The audio device states. </param>
            <param name="Devices"> If the method completed with success on output
              contains the list of found audio devices. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclBluetooth.wclAudioDeviceState" />
            <seealso cref="T:wclBluetooth.wclAudioDevice" />
        </member>
        <member name="M:wclBluetooth.wclAudioSwitcher.GetDeviceDetails(System.String,wclBluetooth.wclAudioDevice@)">
            <summary> Gets the specified Audio Device information. </summary>
            <param name="Id"> The Audio Device ID. </param>
            <param name="Device"> If the method completed with success on output
              contains information about specified Audio Device. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclBluetooth.wclAudioDevice" />
        </member>
        <member name="M:wclBluetooth.wclAudioSwitcher.SetDefault(wclBluetooth.wclAudioDeviceRole,System.String)">
            <summary> Sets the specified Audio Device as default for the specified
              Role. </summary>
            <param name="Role"> The device role. </param>
            <param name="Id"> The device ID. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclBluetooth.wclAudioDeviceRole" />
        </member>
        <member name="M:wclBluetooth.wclAudioSwitcher.Connect(System.String)">
            <summary> Connects to the specified Audio Device. </summary>
            <param name="Id"> The device ID. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclAudioSwitcher.Disconnect(System.String)">
            <summary> Disconnects from the specified Audio Device. </summary>
            <param name="Id"> The device ID. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="P:wclBluetooth.wclAudioSwitcher.Active">
            <summary> Gets the Audio Switcher state. </summary>
            <value> <c>True</c> if the Audio Switcher is active. <c>False</c>
              otherwise. </value>
        </member>
        <member name="E:wclBluetooth.wclAudioSwitcher.OnClosed">
            <summary> The event fires when the Audio Switcher was closed. </summary>
        </member>
        <member name="E:wclBluetooth.wclAudioSwitcher.OnDefaultDeviceChanged">
            <summary> The event fires when default audio device changed. </summary>
            <seealso cref="T:wclBluetooth.wclAudioDefaultDeviceChangedEvent" />
        </member>
        <member name="E:wclBluetooth.wclAudioSwitcher.OnDeviceAdded">
            <summary> The event fires when new audio device added. </summary>
            <seealso cref="T:wclBluetooth.wclAudioDeviceEvent" />
        </member>
        <member name="E:wclBluetooth.wclAudioSwitcher.OnOpened">
            <summary> The event fires when the Audio Switcher was opened. </summary>
        </member>
        <member name="E:wclBluetooth.wclAudioSwitcher.OnDeviceRemoved">
            <summary> The event fires when audio device removed. </summary>
            <seealso cref="T:wclBluetooth.wclAudioDeviceEvent" />
        </member>
        <member name="E:wclBluetooth.wclAudioSwitcher.OnStateChanged">
            <summary> The event fires when audio device state changed. </summary>
            <seealso cref="T:wclBluetooth.wclAudioDeviceStateChangedEvent" />
        </member>
        <member name="T:wclBluetooth.wclBluetoothComponent">
            <summary> The base class for all Bluetooth Components. </summary>
            <remarks> The class implements the basic methods to prevent the
              Bluetooth Connections from self-destruction. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothComponent.Enter">
            <summary> Enters the Bluetooth component protection critical
              section. </summary>
        </member>
        <member name="M:wclBluetooth.wclBluetoothComponent.Leave">
            <summary> Leaves the Bluetooth component protection critical
              section. </summary>
        </member>
        <member name="M:wclBluetooth.wclBluetoothComponent.#ctor">
            <summary> Creates a new component. </summary>
        </member>
        <member name="T:wclBluetooth.wclBluetoothLeBeaconWatcher">
            <summary> The Bluetooth LE Beacon watcher. </summary>
            <remarks> The component allows to monitor Bluetooth LE Beacon advertisement
              packets. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothComponent" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeBeaconWatcher.DoAdvertisementFrameInformation(System.Int64,System.Int64,System.SByte,System.String,wclBluetooth.wclBluetoothLeAdvertisementType,wclBluetooth.wclBluetoothLeAdvertisementFlag)">
            <summary> Fires the <c>OnAdvertisementFrameInformation</c>
              event. </summary>
            <param name="Address"> The Bluetooth LE advertiser's MAC
              address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="Name"> The Bluetooth LE advertiser's name. </param>
            <param name="PacketType"> The Bluetooth LE advertisement data packet
              type. </param>
            <param name="Flags"> The Bluetooth LE advertisement packet payload
              flags. </param>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisementType" />
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisementFlag" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeBeaconWatcher.DoAdvertisementExtFrameInformation(System.Int64,System.Int64,System.SByte,wclBluetooth.wclBluetoothAddressType,System.SByte,wclBluetooth.wclBluetoothLeExtendedFrameFlag)">
            <summary> Fires the <c>OnAdvertisementExtFrameInformation</c>
              event. </summary>
            <param name="Address"> The Bluetooth LE advertiser's MAC
              address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="AddressType"> The Bluetooth LE address type. </param>
            <param name="TxPower"> The received transmit power of the
              advertisement. Ranges from -127 dBm to 20 dBm. -128 indicates
              "no value". </param>
            <param name="Flags"> The Bluetooth LE advertisement extended frame
              flags. </param>
            <seealso cref="T:wclBluetooth.wclBluetoothAddressType" />
            <seealso cref="T:wclBluetooth.wclBluetoothLeExtendedFrameFlag" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeBeaconWatcher.DoAdvertisementRawFrame(System.Int64,System.Int64,System.SByte,System.Byte,System.Byte[])">
            <summary> Fires the <c>OnAdvertisementRawFrame</c> event. </summary>
            <param name="Address"> The Bluetooth LE advertiser's MAC
              address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="DataType"> The frame's data type. </param>
            <param name="Data"> The frame's raw bytes data. If there is no data the
              value is <c>null</c>. </param>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeBeaconWatcher.DoAdvertisementReceived(System.Int64,System.Int64,System.SByte,System.Byte[])">
            <summary> Fires the <c>OnAdvertisementReceived</c> event. </summary>
            <param name="Address"> The Bluetooth LE advertiser's MAC
              address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="Data"> The frame's raw bytes data. If there is no data the
              value is <c>nil</c>. </param>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeBeaconWatcher.DoAdvertisementService16DataFrame(System.Int64,System.Int64,System.SByte,System.UInt16,System.Byte[])">
            <summary> Fires the <c>OnService16DataFrame</c> event. </summary>
            <param name="Address"> The Bluetooth LE advertiser's MAC address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="Uuid"> The 16 bit service UUID. </param>
            <param name="Data"> The service data. </param>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeBeaconWatcher.DoAdvertisementService32DataFrame(System.Int64,System.Int64,System.SByte,System.UInt32,System.Byte[])">
            <summary> Fires the <c>OnService32DataFrame</c> event. </summary>
            <param name="Address"> The Bluetooth LE advertiser's MAC
              address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="Uuid"> The 32 bit service UUID. </param>
            <param name="Data"> The service data. </param>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeBeaconWatcher.DoAdvertisementService128DataFrame(System.Int64,System.Int64,System.SByte,System.Guid,System.Byte[])">
            <summary> Fires the <c>OnService128DataFrame</c> event. </summary>
            <param name="Address"> The Bluetooth LE advertiser's MAC
              address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="Uuid"> The 128 bit service UUID. </param>
            <param name="Data"> The service data. </param>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeBeaconWatcher.DoAdvertisementServiceSol16Frame(System.Int64,System.Int64,System.SByte,System.UInt16)">
            <summary> Fires the <c>OnServiceSol16Frame</c> event. </summary>
            <param name="Address"> The Bluetooth LE advertiser's MAC
              address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="Uuid"> The 16 bit service UUID. </param>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeBeaconWatcher.DoAdvertisementServiceSol32Frame(System.Int64,System.Int64,System.SByte,System.UInt32)">
            <summary> Fires the <c>OnServiceSol32Frame</c> event. </summary>
            <param name="Address"> The Bluetooth LE advertiser's MAC
              address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="Uuid"> The 32 bit service UUID. </param>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeBeaconWatcher.DoAdvertisementServiceSol128Frame(System.Int64,System.Int64,System.SByte,System.Guid)">
            <summary> Fires the <c>OnServiceSol128Frame</c> event. </summary>
            <param name="Address"> The Bluetooth LE advertiser's MAC
              address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="Uuid"> The 128 bit service UUID. </param>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeBeaconWatcher.DoAdvertisementUuidFrame(System.Int64,System.Int64,System.SByte,System.Guid)">
            <summary> Fires the <c>OnAdvertisementUuidFrame</c> event. </summary>
            <param name="Address"> The Bluetooth LE advertiser's MAC
              address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="Uuid"> The advertised UUID value. </param>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeBeaconWatcher.DoAltBeaconFrame(System.Int64,System.Int64,System.SByte,System.UInt16,System.UInt16,System.UInt16,System.Guid,System.SByte,System.Byte,System.Byte[])">
            <summary> Fires the <c>OnAltBeaconFrame</c> event. </summary>
            <param name="Address"> The Bluetooth LE advertiser's MAC
              address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="CompanyId"> The beacon's manufacturer ID as defined in the
              Bluetooth SIG Assigned Numbers. </param>
            <param name="Major"> The beacon's Major value. </param>
            <param name="Minor"> The beacon's Minor value. </param>
            <param name="Uuid"> The beacon's UUID. </param>
            <param name="TxRssi"> The beacon's RSSI value in dBm at range between
              -100 dBm and +20 dBm at 1 dBm resolution measured at 1 meter
              distance. </param>
            <param name="Reserved"> A 1-byte value from 0x00 to 0xFF. Interpretation
              of this value is to be defined by the manufacturer and is to be
              evaluated based on the CompanyId value. </param>
            <param name="Data"> The additional frame data. </param>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeBeaconWatcher.DoEddystoneTlmFrame(System.Int64,System.Int64,System.SByte,System.UInt32,System.UInt16,System.UInt32,System.Double,System.Byte[])">
            <summary> Fires the <c>OnEddystoneTlmFrame</c> event. </summary>
            <param name="Address"> The Bluetooth LE advertiser's MAC
              address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="AdvCnt"> The running count of advertisement frames of all
              types emitted by the beacon since power-up or reboot, useful for
              monitoring performance metrics that scale per broadcast frame.
              If this value is reset (e.g. on reboot), the current time field is
              also reset. </param>
            <param name="Batt"> The current battery charge in millivolts, expressed
              as 1 mV per bit. If not supported (for example in a USB-powered
              beacon) the value should be zeroed. </param>
            <param name="SecCnt"> The 0.1 second resolution counter that represents
              time since beacon power-up or reboot. If this value is reset (e.g. on
              a reboot), the AdvCnt count field is also reset. </param>
            <param name="Temp"> The beacon temperature in degrees Celsius sensed by
              the beacon. If not supported the value is -128 °C. </param>
            <param name="Data"> The additional frame data. </param>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeBeaconWatcher.DoEddystoneUidFrame(System.Int64,System.Int64,System.SByte,System.SByte,System.Guid,System.Byte[])">
            <summary> Fires the <c>OnEddystoneUidFrame</c> event. </summary>
            <param name="Address"> The Bluetooth LE advertiser's MAC
              address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="TxRssi"> The beacon's RSSI value in dBm at range between
              -100 dBm and +20 dBm at 1 dBm resolution measured at 0 meter
              distance. </param>
            <param name="Uuid"> The Eddystone ID: 10 bytes - Namespace ID and 6
              bytes - Instance ID. </param>
            <param name="Data"> The additional frame data. </param>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeBeaconWatcher.DoEddystoneUrlFrame(System.Int64,System.Int64,System.SByte,System.SByte,System.String)">
            <summary> Fires the <c>OnEddystoneUrlFrame</c> event. </summary>
            <param name="Address"> The Bluetooth LE advertiser's MAC
              address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="TxRssi"> The beacon's RSSI value in dBm at range between
              -100 dBm and +20 dBm at 1 dBm resolution measured at 0 meter
              distance. </param>
            <param name="Url"> The Eddystone URL. </param>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeBeaconWatcher.DoManufacturerRawFrame(System.Int64,System.Int64,System.SByte,System.UInt16,System.Byte[])">
            <summary> Fires the <c>OnManufacturerRawFrame</c> event. </summary>
            <param name="Address"> The Bluetooth LE advertiser's MAC
              address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="CompanyId"> The beacon's manufacturer ID as defined in the
              Bluetooth SIG Assigned Numbers. </param>
            <param name="Data"> The frame raw data. The value can be <c>null</c> if
              there is no any data available in the frame. </param>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeBeaconWatcher.DoProximityBeaconFrame(System.Int64,System.Int64,System.SByte,System.UInt16,System.UInt16,System.UInt16,System.Guid,System.SByte,System.Byte[])">
            <summary> Fires the <c>OnProximityBeaconFrame</c> event. </summary>
            <param name="Address"> The Bluetooth LE advertiser's MAC
              address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="CompanyId"> The beacon's manufacturer ID as defined in the
              Bluetooth SIG Assigned Numbers. </param>
            <param name="Major"> The beacon's Major value. </param>
            <param name="Minor"> The beacon's Minor value. </param>
            <param name="Uuid"> The beacon's UUID. </param>
            <param name="TxRssi"> The beacon's RSSI value in dBm at range between
              -100 dBm and +20 dBm at 1 dBm resolution measured at 1 meter
              distance. </param>
            <param name="Data"> The additional frame data. </param>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeBeaconWatcher.DoStarted">
            <summary> Fires the <c>OnStarted</c> event. </summary>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeBeaconWatcher.DoStopped">
            <summary> Fires the <c>OnStopped</c> event. </summary>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeBeaconWatcher.#ctor">
            <summary> Creates new component. </summary>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeBeaconWatcher.Start(wclBluetooth.wclBluetoothRadio,wclBluetooth.wclBluetoothLeScanningMode,System.UInt16,System.UInt16)">
            <summary> Starts monitoring for Bluetooth LE Beacons. </summary>
            <param name="Radio"> The <see cref="T:wclBluetooth.wclBluetoothRadio" /> object used
              to communicate with a remote Bluetooth device. </param>
            <param name="ScanningMode"> Specifies the Bluetooth LE scanning
              mode. </param>
            <param name="ScanInterval"> Specifies the Bluetooth LE scan in 0.625 ms
              units. The value must be in range between
              <see cref="F:wclBluetooth.wclBluetoothConstants.WCL_BLE_MIN_SCAN_INTERVAL" /> and
              <see cref="F:wclBluetooth.wclBluetoothConstants.WCL_BLE_MAX_SCAN_INTERVAL" />. The default value is
              <see cref="F:wclBluetooth.wclBluetoothConstants.WCL_BLE_DEFAULT_SCAN_INTERVAL" />. </param>
            <param name="ScanWindow"> Specifies the Bluetooth LE scan window in
              0.625 ms units. The value must be in range between
              <see cref="F:wclBluetooth.wclBluetoothConstants.WCL_BLE_MIN_SCAN_WINDOW" /> and
              <see cref="F:wclBluetooth.wclBluetoothConstants.WCL_BLE_MAX_SCAN_WINDOW" />. The default value is
              <see cref="F:wclBluetooth.wclBluetoothConstants.WCL_BLE_DEFAULT_SCAN_WINDOW" />. The scan window must be
              less or equal to <c>ScanInterval</c>. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> <para> This feature is supported on Windows 10 with the
              Microsoft Bluetooth drivers only. </para>
              <para> If the method returns one of the following errors:
              <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_CREATE_SCAN_PARAMS_SET_EVENT_FAILED" />,
              <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_RADIO_INSTANCE_NOT_FOUND" />,
              <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_OPEN_RADIO_FAILED" /> or
              <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_SET_SCAN_PARAMS_FAILED" /> then simple
              call this method with default scan parameters. </para> </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
            <seealso cref="T:wclBluetooth.wclBluetoothLeScanningMode" />
            <seealso cref="F:wclBluetooth.wclBluetoothConstants.WCL_BLE_MIN_SCAN_WINDOW" />
            <seealso cref="F:wclBluetooth.wclBluetoothConstants.WCL_BLE_MAX_SCAN_WINDOW" />
            <seealso cref="F:wclBluetooth.wclBluetoothConstants.WCL_BLE_DEFAULT_SCAN_WINDOW" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeBeaconWatcher.Stop">
            <summary> Stops monitoring for Bluetooth LE Beacons. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> This feature is supported on Windows 10 with the Microsoft
              Bluetooth drivers only. </remarks>
        </member>
        <member name="P:wclBluetooth.wclBluetoothLeBeaconWatcher.Monitoring">
            <summary> Gets Beacon Monitoring state. </summary>
            <value> <c>True</c> if the Beacon monitoring is running. </value>
        </member>
        <member name="P:wclBluetooth.wclBluetoothLeBeaconWatcher.Radio">
            <summary> Gets the watcher owner. </summary>
            <value> The <see cref="T:wclBluetooth.wclBluetoothRadio" /> object owns the
              connection. </value>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
        </member>
        <member name="P:wclBluetooth.wclBluetoothLeBeaconWatcher.ScanInterval">
            <summary> Gets the current scan interval value. </summary>
            <value> The current scan interval. If the watcher is stopped the
              returning value is always
              <see cref="F:wclBluetooth.wclBluetoothConstants.WCL_BLE_DEFAULT_SCAN_INTERVAL" /> </value>
        </member>
        <member name="P:wclBluetooth.wclBluetoothLeBeaconWatcher.ScanningMode">
            <summary> Gets the current scanning mode. </summary>
            <value> The Bluetooth LE scanning mode. </value>
            <seealso cref="T:wclBluetooth.wclBluetoothLeScanningMode" />
        </member>
        <member name="P:wclBluetooth.wclBluetoothLeBeaconWatcher.ScanWindow">
            <summary> Gets the current scan window value. </summary>
            <value> The current scan window. If the watcher is stopped the
              returning value is always
              <see cref="F:wclBluetooth.wclBluetoothConstants.WCL_BLE_DEFAULT_SCAN_WINDOW" /> </value>
        </member>
        <member name="E:wclBluetooth.wclBluetoothLeBeaconWatcher.OnAdvertisementFrameInformation">
            <summary> The event fires when new Bluetooth LE advertisement frame
              has been received and provides the common basic information about
              the frame. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisementFrameInformationEvent" />
        </member>
        <member name="E:wclBluetooth.wclBluetoothLeBeaconWatcher.OnAdvertisementExtFrameInformation">
            <summary> The event fires when new Bluetooth LE advertisement
              extended frame has been received and provides the common basic
              information about the frame. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisementExtFrameInformationEvent" />
        </member>
        <member name="E:wclBluetooth.wclBluetoothLeBeaconWatcher.OnAdvertisementRawFrame">
            <summary> The event fires when an unsupported or unknown Bluetooth LE
              advertisement frame received. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisementRawFrameEvent" />
        </member>
        <member name="E:wclBluetooth.wclBluetoothLeBeaconWatcher.OnAdvertisementReceived">
            <summary> The event fires when any Bluetooth LE advertisement frame
              received. </summary>
            <remarks> Unlike the <c>OnAdvertisementRawFrame</c> and the
              <c>OnManufacturerRawFrame</c> this even fires for any Bluetooth LE
              advertisement and contains unparsed raw frame data. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisementReceivedEvent" />
        </member>
        <member name="E:wclBluetooth.wclBluetoothLeBeaconWatcher.OnAdvertisementService16DataFrame">
            <summary> The event fires when a Bluetooth LE 16 bit Service Data
              advertisement frame received. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisementService16DataFrameEvent" />
        </member>
        <member name="E:wclBluetooth.wclBluetoothLeBeaconWatcher.OnAdvertisementService32DataFrame">
            <summary> The event fires when a Bluetooth LE 32 bit Service Data
              advertisement frame received. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisementService32DataFrameEvent" />
        </member>
        <member name="E:wclBluetooth.wclBluetoothLeBeaconWatcher.OnAdvertisementService128DataFrame">
            <summary> The event fires when a Bluetooth LE 128 bit Service Data
              advertisement frame received. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisementService128DataFrameEvent" />
        </member>
        <member name="E:wclBluetooth.wclBluetoothLeBeaconWatcher.OnAdvertisementServiceSol16Frame">
            <summary> The event fires when a Bluetooth LE 16 bit Service
              Solicitation advertisement frame received. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisementServiceSol16FrameEvent" />
        </member>
        <member name="E:wclBluetooth.wclBluetoothLeBeaconWatcher.OnAdvertisementServiceSol32Frame">
            <summary> The event fires when a Bluetooth LE 32 bit Service
              Solicitation advertisement frame received. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisementServiceSol32FrameEvent" />
        </member>
        <member name="E:wclBluetooth.wclBluetoothLeBeaconWatcher.OnAdvertisementServiceSol128Frame">
            <summary> The event fires when a Bluetooth LE 128 bit Service
              Solicitation advertisement frame received. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisementServiceSol128FrameEvent" />
        </member>
        <member name="E:wclBluetooth.wclBluetoothLeBeaconWatcher.OnAdvertisementUuidFrame">
            <summary> The event fires when an UUID advertisement frame has been
              received. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisementUuidFrameEvent" />
        </member>
        <member name="E:wclBluetooth.wclBluetoothLeBeaconWatcher.OnAltBeaconFrame">
            <summary> The event fires when a Bluetooth LE Alt beacon
              advertisement frame received. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAltBeaconFrameEvent" />
        </member>
        <member name="E:wclBluetooth.wclBluetoothLeBeaconWatcher.OnEddystoneTlmFrame">
            <summary> The event fires when an Eddystone TLM advertisement frame
              received. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLeEddystoneTlmFrameEvent" />
        </member>
        <member name="E:wclBluetooth.wclBluetoothLeBeaconWatcher.OnEddystoneUidFrame">
            <summary> The event fires when an Eddystone UID advertisement frame
              received. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLeEddystoneUidFrameEvent" />
        </member>
        <member name="E:wclBluetooth.wclBluetoothLeBeaconWatcher.OnEddystoneUrlFrame">
            <summary> The event fires when an Eddystone URL advertisement frame
              received. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLeEddystoneUrlFrameEvent" />
        </member>
        <member name="E:wclBluetooth.wclBluetoothLeBeaconWatcher.OnManufacturerRawFrame">
            <summary> The event fires when an unknown or unsupported manufacturer
              specific Bluetooth LE advertisement frame received. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLeManufacturerRawFrameEvent" />
        </member>
        <member name="E:wclBluetooth.wclBluetoothLeBeaconWatcher.OnProximityBeaconFrame">
            <summary> The event fires when a Bluetooth LE proximity beacon
              advertisement frame received. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLeProximityBeaconFrameEvent" />
        </member>
        <member name="E:wclBluetooth.wclBluetoothLeBeaconWatcher.OnStarted">
            <summary> The event fires when the Bluetooth LE beacon monitoring
              started. </summary>
        </member>
        <member name="E:wclBluetooth.wclBluetoothLeBeaconWatcher.OnStopped">
            <summary> The event fires when the Bluetooth LE beacon monitoring
              stopped. </summary>
        </member>
        <member name="T:wclBluetooth.wclBluetoothLeBeaconWatcherConnection">
            <summary> The "virtual" connection for the Bluetooth LE Beacon Watcher. </summary>
            <remarks> An application must not create or use this class directly.
              Instead of that an application must use high-level Bluetooth
              components. </remarks>
            <seealso cref="T:wclCommunication.wclCustomConnection" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeBeaconWatcherConnection.MessageReceived(wclCommon.wclMessage)">
            <summary> The method called when a new notification message
              received. </summary>
            <param name="Message"> A <see cref="T:wclCommon.wclMessage" /> object
              represents a notification message. </param>
            <remarks> <para> This method is for internal use only. </para>
              <para> If a derived class overrides this method it must always call
              the inherited implementation first. </para> </remarks>
            <seealso cref="T:wclCommon.wclMessage" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeBeaconWatcherConnection.DoAdvertisementFrameInformation(System.Int64,System.Int64,System.SByte,System.String,wclBluetooth.wclBluetoothLeAdvertisementType,wclBluetooth.wclBluetoothLeAdvertisementFlag)">
            <summary> Fires the <c>OnAdvertisementFrameInformation</c>
              event. </summary>
            <param name="Address"> The Bluetooth LE advertiser's MAC
              address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="Name"> The Bluetooth LE advertiser's name. </param>
            <param name="PacketType"> The Bluetooth LE advertisement data packet
              type. </param>
            <param name="Flags"> The Bluetooth LE advertisement packet payload
              flags. </param>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisementType" />
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisementFlag" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeBeaconWatcherConnection.DoAdvertisementExtFrameInformation(System.Int64,System.Int64,System.SByte,wclBluetooth.wclBluetoothAddressType,System.SByte,wclBluetooth.wclBluetoothLeExtendedFrameFlag)">
            <summary> Fires the <c>OnAdvertisementExtFrameInformation</c>
              event. </summary>
            <param name="Address"> The Bluetooth LE advertiser's MAC
              address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="AddressType"> The Bluetooth LE address type. </param>
            <param name="TxPower"> The received transmit power of the
              advertisement. Ranges from -127 dBm to 20 dBm. -128 indicates
              "no value". </param>
            <param name="Flags"> The Bluetooth LE advertisement extended frame
              flags. </param>
            <seealso cref="T:wclBluetooth.wclBluetoothAddressType" />
            <seealso cref="T:wclBluetooth.wclBluetoothLeExtendedFrameFlag" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeBeaconWatcherConnection.DoAdvertisementRawFrame(System.Int64,System.Int64,System.SByte,System.Byte,System.Byte[])">
            <summary> Fires the <c>OnAdvertisementRawFrame</c> event. </summary>
            <param name="Address"> The Bluetooth LE advertiser's MAC
              address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="DataType"> The frame's data type. </param>
            <param name="Data"> The frame's raw bytes data. If there is no data the
              value is <c>null</c>. </param>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeBeaconWatcherConnection.DoAdvertisementReceived(System.Int64,System.Int64,System.SByte,System.Byte[])">
            <summary> Fires the <c>OnAdvertisementReceived</c> event. </summary>
            <param name="Address"> The Bluetooth LE advertiser's MAC
              address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="Data"> The frame's raw bytes data. If there is no data the
              value is <c>nil</c>. </param>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeBeaconWatcherConnection.DoAdvertisementService16DataFrame(System.Int64,System.Int64,System.SByte,System.UInt16,System.Byte[])">
            <summary> Fires the <c>OnService16DataFrame</c> event. </summary>
            <param name="Address"> The Bluetooth LE advertiser's MAC address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="Uuid"> The 16 bit service UUID. </param>
            <param name="Data"> The service data. </param>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeBeaconWatcherConnection.DoAdvertisementService32DataFrame(System.Int64,System.Int64,System.SByte,System.UInt32,System.Byte[])">
            <summary> Fires the <c>OnService32DataFrame</c> event. </summary>
            <param name="Address"> The Bluetooth LE advertiser's MAC address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="Uuid"> The 32 bit service UUID. </param>
            <param name="Data"> The service data. </param>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeBeaconWatcherConnection.DoAdvertisementService128DataFrame(System.Int64,System.Int64,System.SByte,System.Guid,System.Byte[])">
            <summary> Fires the <c>OnService128DataFrame</c> event. </summary>
            <param name="Address"> The Bluetooth LE advertiser's MAC address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="Uuid"> The 128 bit service UUID. </param>
            <param name="Data"> The service data. </param>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeBeaconWatcherConnection.DoAdvertisementServiceSol16Frame(System.Int64,System.Int64,System.SByte,System.UInt16)">
            <summary> Fires the <c>OnServiceSol16Frame</c> event. </summary>
            <param name="Address"> The Bluetooth LE advertiser's MAC
              address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="Uuid"> The 16 bit service UUID. </param>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeBeaconWatcherConnection.DoAdvertisementServiceSol32Frame(System.Int64,System.Int64,System.SByte,System.UInt32)">
            <summary> Fires the <c>OnServiceSol32Frame</c> event. </summary>
            <param name="Address"> The Bluetooth LE advertiser's MAC
              address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="Uuid"> The 32 bit service UUID. </param>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeBeaconWatcherConnection.DoAdvertisementServiceSol128Frame(System.Int64,System.Int64,System.SByte,System.Guid)">
            <summary> Fires the <c>OnServiceSol128Frame</c> event. </summary>
            <param name="Address"> The Bluetooth LE advertiser's MAC
              address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="Uuid"> The 128 bit service UUID. </param>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeBeaconWatcherConnection.DoAdvertisementUuidFrame(System.Int64,System.Int64,System.SByte,System.Guid)">
            <summary> Fires the <c>OnAdvertisementUuidFrame</c> event. </summary>
            <param name="Address"> The Bluetooth LE advertiser's MAC
              address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="Uuid"> The advertised UUID value. </param>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeBeaconWatcherConnection.DoAltBeaconFrame(System.Int64,System.Int64,System.SByte,System.UInt16,System.UInt16,System.UInt16,System.Guid,System.SByte,System.Byte,System.Byte[])">
            <summary> Fires the <c>OnAltBeaconFrame</c> event. </summary>
            <param name="Address"> The Bluetooth LE advertiser's MAC
              address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="CompanyId"> The beacon's manufacturer ID as defined in the
              Bluetooth SIG Assigned Numbers. </param>
            <param name="Major"> The beacon's Major value. </param>
            <param name="Minor"> The beacon's Minor value. </param>
            <param name="Uuid"> The beacon's UUID. </param>
            <param name="TxRssi"> The beacon's RSSI value in dBm at range between
              -100 dBm and +20 dBm at 1 dBm resolution measured at 1 meter
              distance. </param>
            <param name="Reserved"> A 1-byte value from 0x00 to 0xFF. Interpretation
              of this value is to be defined by the manufacturer and is to be
              evaluated based on the CompanyId value. </param>
            <param name="Data"> The additional frame data. </param>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeBeaconWatcherConnection.DoEddystoneTlmFrame(System.Int64,System.Int64,System.SByte,System.UInt32,System.UInt16,System.UInt32,System.Double,System.Byte[])">
            <summary> Fires the <c>OnEddystoneTlmFrame</c> event. </summary>
            <param name="Address"> The Bluetooth LE advertiser's MAC
              address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="AdvCnt"> The running count of advertisement frames of all
              types emitted by the beacon since power-up or reboot, useful for
              monitoring performance metrics that scale per broadcast frame.
              If this value is reset (e.g. on reboot), the current time field is
              also reset. </param>
            <param name="Batt"> The current battery charge in millivolts, expressed
              as 1 mV per bit. If not supported (for example in a USB-powered
              beacon) the value should be zeroed. </param>
            <param name="SecCnt"> The 0.1 second resolution counter that represents
              time since beacon power-up or reboot. If this value is reset (e.g. on
              a reboot), the AdvCnt count field is also reset. </param>
            <param name="Temp"> The beacon temperature in degrees Celsius sensed by
              the beacon. If not supported the value is -128 °C. </param>
            <param name="Data"> The additional frame data. </param>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeBeaconWatcherConnection.DoEddystoneUidFrame(System.Int64,System.Int64,System.SByte,System.SByte,System.Guid,System.Byte[])">
            <summary> Fires the <c>OnEddystoneUidFrame</c> event. </summary>
            <param name="Address"> The Bluetooth LE advertiser's MAC
              address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="TxRssi"> The beacon's RSSI value in dBm at range between
              -100 dBm and +20 dBm at 1 dBm resolution measured at 0 meter
              distance. </param>
            <param name="Uuid"> The Eddystone ID: 10 bytes - Namespace ID and 6
              bytes - Instance ID. </param>
            <param name="Data"> The additional frame data. </param>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeBeaconWatcherConnection.DoEddystoneUrlFrame(System.Int64,System.Int64,System.SByte,System.SByte,System.String)">
            <summary> Fires the <c>OnEddystoneUrlFrame</c> event. </summary>
            <param name="Address"> The Bluetooth LE advertiser's MAC
              address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="TxRssi"> The beacon's RSSI value in dBm at range between
              -100 dBm and +20 dBm at 1 dBm resolution measured at 0 meter
              distance. </param>
            <param name="Url"> The Eddystone URL. </param>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeBeaconWatcherConnection.DoManufacturerRawFrame(System.Int64,System.Int64,System.SByte,System.UInt16,System.Byte[])">
            <summary> Fires the <c>OnManufacturerRawFrame</c> event. </summary>
            <param name="Address"> The Bluetooth LE advertiser's MAC
              address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="CompanyId"> The beacon's manufacturer ID as defined in the
              Bluetooth SIG Assigned Numbers. </param>
            <param name="Data"> The frame raw data. The value can be <c>null</c> if
              there is no any data available in the frame. </param>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeBeaconWatcherConnection.DoProximityBeaconFrame(System.Int64,System.Int64,System.SByte,System.UInt16,System.UInt16,System.UInt16,System.Guid,System.SByte,System.Byte[])">
            <summary> Fires the <c>OnProximityBeaconFrame</c> event. </summary>
            <param name="Address"> The Bluetooth LE advertiser's MAC
              address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="CompanyId"> The beacon's manufacturer ID as defined in the
              Bluetooth SIG Assigned Numbers. </param>
            <param name="Major"> The beacon's Major value. </param>
            <param name="Minor"> The beacon's Minor value. </param>
            <param name="Uuid"> The beacon's UUID. </param>
            <param name="TxRssi"> The beacon's RSSI value in dBm at range between
              -100 dBm and +20 dBm at 1 dBm resolution measured at 1 meter
              distance. </param>
            <param name="Data"> The additional frame data. </param>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeBeaconWatcherConnection.DoStarted">
            <summary> Fires the <c>OnStarted</c> event. </summary>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeBeaconWatcherConnection.DoStopped">
            <summary> Fires the <c>OnStopped</c> event. </summary>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeBeaconWatcherConnection.HalStart">
            <summary> Implements a hardware-dependent code to start Bluetooth LE
              Beacon monitoring. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              driver-dependent code. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeBeaconWatcherConnection.HalStop">
            <summary> Implements a hardware-dependent code to stop Bluetooth LE
              Beacon monitoring. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              driver-dependent code. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeBeaconWatcherConnection.#ctor(wclBluetooth.wclBluetoothRadio)">
            <summary> Creates a new "virtual" Beacon Watcher connection
              object. </summary>
            <param name="Radio"> The Radio object that owns the connection. </param>
            <remarks> <para> An application must never create this class directly.
              Instead of that an application must use upper-level methods and
              classes. </para>
              <para> If the <c>Radio</c> parameter is <c>null</c> the
              <see cref="T:wclCommon.wclECritical" /> exception raises. </para> </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
            <exception cref="T:wclCommon.wclECritical" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeBeaconWatcherConnection.Start(wclBluetooth.wclBluetoothLeScanningMode,System.UInt16,System.UInt16)">
            <summary> Starts monitoring for Bluetooth LE Beacons. </summary>
            <param name="ScanningMode"> Specifies the Bluetooth LE scanning
              mode. </param>
            <param name="ScanInterval"> Specifies the Bluetooth LE scan in 0.625 ms
              units. The value must be in range between
              <see cref="F:wclBluetooth.wclBluetoothConstants.WCL_BLE_MIN_SCAN_INTERVAL" /> and
              <see cref="F:wclBluetooth.wclBluetoothConstants.WCL_BLE_MAX_SCAN_INTERVAL" />. The default value is
              <see cref="F:wclBluetooth.wclBluetoothConstants.WCL_BLE_DEFAULT_SCAN_INTERVAL" />. </param>
            <param name="ScanWindow"> Specifies the Bluetooth LE scan window in
              0.625 ms units. The value must be in range between
              <see cref="F:wclBluetooth.wclBluetoothConstants.WCL_BLE_MIN_SCAN_WINDOW" /> and
              <see cref="F:wclBluetooth.wclBluetoothConstants.WCL_BLE_MAX_SCAN_WINDOW" />. The default value is
              <see cref="F:wclBluetooth.wclBluetoothConstants.WCL_BLE_DEFAULT_SCAN_WINDOW" />. The scan window must be
              less or equal to <c>ScanInterval</c>. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> <para> This feature is supported on Windows 10 with the
              Microsoft Bluetooth drivers only. </para>
              <para> If the method returns one of the following errors:
              <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_CREATE_SCAN_PARAMS_SET_EVENT_FAILED" />,
              <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_RADIO_INSTANCE_NOT_FOUND" />,
              <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_OPEN_RADIO_FAILED" /> or
              <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_SET_SCAN_PARAMS_FAILED" /> then simple
              call this method with default scan parameters. </para> </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeScanningMode" />
            <seealso cref="F:wclBluetooth.wclBluetoothConstants.WCL_BLE_MIN_SCAN_WINDOW" />
            <seealso cref="F:wclBluetooth.wclBluetoothConstants.WCL_BLE_MAX_SCAN_WINDOW" />
            <seealso cref="F:wclBluetooth.wclBluetoothConstants.WCL_BLE_DEFAULT_SCAN_WINDOW" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeBeaconWatcherConnection.Stop">
            <summary> Stops monitoring for Bluetooth LE Beacons. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> This feature is supported on Windows 10 with the Microsoft
              Bluetooth drivers only. </remarks>
        </member>
        <member name="P:wclBluetooth.wclBluetoothLeBeaconWatcherConnection.Monitoring">
            <summary> Gets Beacon Monitoring state. </summary>
            <value> <c>True</c> if the Beacon monitoring is running. </value>
        </member>
        <member name="P:wclBluetooth.wclBluetoothLeBeaconWatcherConnection.Radio">
            <summary> Gets the connection owner. </summary>
            <value> The <see cref="T:wclBluetooth.wclBluetoothRadio" /> object owns the
              connection. </value>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
        </member>
        <member name="P:wclBluetooth.wclBluetoothLeBeaconWatcherConnection.ScanInterval">
            <summary> Gets the current scan interval value. </summary>
            <value> The current scan interval. If the watcher is stopped the
              returning value is always
              <see cref="F:wclBluetooth.wclBluetoothConstants.WCL_BLE_DEFAULT_SCAN_INTERVAL" /> </value>
        </member>
        <member name="P:wclBluetooth.wclBluetoothLeBeaconWatcherConnection.ScanningMode">
            <summary> Gets the current scanning mode. </summary>
            <value> The Bluetooth LE scanning mode. </value>
            <seealso cref="T:wclBluetooth.wclBluetoothLeScanningMode" />
        </member>
        <member name="P:wclBluetooth.wclBluetoothLeBeaconWatcherConnection.ScanWindow">
            <summary> Gets the current scan window value. </summary>
            <value> The current scan window. If the watcher is stopped the
              returning value is always
              <see cref="F:wclBluetooth.wclBluetoothConstants.WCL_BLE_DEFAULT_SCAN_WINDOW" /> </value>
        </member>
        <member name="E:wclBluetooth.wclBluetoothLeBeaconWatcherConnection.OnAdvertisementFrameInformation">
            <summary> The event fires when new Bluetooth LE advertisement frame
              has been received and provides the common basic information about
              the frame. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisementFrameInformationEvent" />
        </member>
        <member name="E:wclBluetooth.wclBluetoothLeBeaconWatcherConnection.OnAdvertisementExtFrameInformation">
            <summary> The event fires when new Bluetooth LE advertisement
              extended frame has been received and provides the common basic
              information about the frame. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisementExtFrameInformationEvent" />
        </member>
        <member name="E:wclBluetooth.wclBluetoothLeBeaconWatcherConnection.OnAdvertisementRawFrame">
            <summary> The event fires when an unsupported or unknown Bluetooth LE
              advertisement frame received. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisementRawFrameEvent" />
        </member>
        <member name="E:wclBluetooth.wclBluetoothLeBeaconWatcherConnection.OnAdvertisementReceived">
            <summary> The event fires when any Bluetooth LE advertisement frame
              received. </summary>
            <remarks> Unlike the <c>OnAdvertisementRawFrame</c> and the
              <c>OnManufacturerRawFrame</c> this even fires for any Bluetooth LE
              advertisement and contains unparsed raw frame data. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisementReceivedEvent" />
        </member>
        <member name="E:wclBluetooth.wclBluetoothLeBeaconWatcherConnection.OnAdvertisementService16DataFrame">
            <summary> The event fires when a Bluetooth LE 16 bit Service Data
              advertisement frame received. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisementService16DataFrameEvent" />
        </member>
        <member name="E:wclBluetooth.wclBluetoothLeBeaconWatcherConnection.OnAdvertisementService32DataFrame">
            <summary> The event fires when a Bluetooth LE 32 bit Service Data
              advertisement frame received. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisementService32DataFrameEvent" />
        </member>
        <member name="E:wclBluetooth.wclBluetoothLeBeaconWatcherConnection.OnAdvertisementService128DataFrame">
            <summary> The event fires when a Bluetooth LE 128 bit Service Data
              advertisement frame received. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisementService128DataFrameEvent" />
        </member>
        <member name="E:wclBluetooth.wclBluetoothLeBeaconWatcherConnection.OnAdvertisementServiceSol16Frame">
            <summary> The event fires when a Bluetooth LE 16 bit Service
              Solicitation advertisement frame received. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisementServiceSol16FrameEvent" />
        </member>
        <member name="E:wclBluetooth.wclBluetoothLeBeaconWatcherConnection.OnAdvertisementServiceSol32Frame">
            <summary> The event fires when a Bluetooth LE 32 bit Service
              Solicitation advertisement frame received. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisementServiceSol32FrameEvent" />
        </member>
        <member name="E:wclBluetooth.wclBluetoothLeBeaconWatcherConnection.OnAdvertisementServiceSol128Frame">
            <summary> The event fires when a Bluetooth LE 128 bit Service
              Solicitation advertisement frame received. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisementServiceSol128FrameEvent" />
        </member>
        <member name="E:wclBluetooth.wclBluetoothLeBeaconWatcherConnection.OnAdvertisementUuidFrame">
            <summary> The event fires when an UUID advertisement frame has been
              received. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisementUuidFrameEvent" />
        </member>
        <member name="E:wclBluetooth.wclBluetoothLeBeaconWatcherConnection.OnAltBeaconFrame">
            <summary> The event fires when a Bluetooth LE Alt beacon
              advertisement frame received. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAltBeaconFrameEvent" />
        </member>
        <member name="E:wclBluetooth.wclBluetoothLeBeaconWatcherConnection.OnEddystoneTlmFrame">
            <summary> The event fires when an Eddystone TLM advertisement frame
              received. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLeEddystoneTlmFrameEvent" />
        </member>
        <member name="E:wclBluetooth.wclBluetoothLeBeaconWatcherConnection.OnEddystoneUidFrame">
            <summary> The event fires when an Eddystone UID advertisement frame
              received. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLeEddystoneUidFrameEvent" />
        </member>
        <member name="E:wclBluetooth.wclBluetoothLeBeaconWatcherConnection.OnEddystoneUrlFrame">
            <summary> The event fires when an Eddystone URL advertisement frame
              received. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLeEddystoneUrlFrameEvent" />
        </member>
        <member name="E:wclBluetooth.wclBluetoothLeBeaconWatcherConnection.OnManufacturerRawFrame">
            <summary> The event fires when an unknown or unsupported manufacturer
              specific Bluetooth LE advertisement frame received. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLeManufacturerRawFrameEvent" />
        </member>
        <member name="E:wclBluetooth.wclBluetoothLeBeaconWatcherConnection.OnProximityBeaconFrame">
            <summary> The event fires when a Bluetooth LE proximity beacon
              advertisement frame received. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLeProximityBeaconFrameEvent" />
        </member>
        <member name="E:wclBluetooth.wclBluetoothLeBeaconWatcherConnection.OnStarted">
            <summary> The event fires when the Bluetooth LE beacon monitoring
              started. </summary>
        </member>
        <member name="E:wclBluetooth.wclBluetoothLeBeaconWatcherConnection.OnStopped">
            <summary> The event fires when the Bluetooth LE beacon monitoring
              stopped. </summary>
        </member>
        <member name="T:wclBluetooth.wclBluetoothLeAdvertiserConnection">
            <summary> The virtual connection class enables Bluetooth LE
              advertising feature. </summary>
            <remarks> <para> The class provides methods to enable Bluetooth LE
              advertising. </para>
              <para> The feature is supported only on Windows 10 platform with
              <c>Microsoft</c> Bluetooth drivers or on any Windows platform with
              <c>BLED112</c> Bluetooth dongle. </para> </remarks>
            <seealso cref="T:wclCommunication.wclCustomConnection" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeAdvertiserConnection.MessageReceived(wclCommon.wclMessage)">
            <summary> The method called when a new notification message
              received. </summary>
            <param name="Message"> A <see cref="T:wclCommon.wclMessage" /> object
              represents a notification message. </param>
            <remarks> <para> This method is for internal use only. </para>
              <para> If a derived class overrides this method it must always call
              the inherited implementation first. </para> </remarks>
            <seealso cref="T:wclCommon.wclMessage" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeAdvertiserConnection.DoStarted">
            <summary> Fires the <c>OnStarted</c> event. </summary>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeAdvertiserConnection.DoStopped">
            <summary> Fires the <c>OnStopped</c> event. </summary>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeAdvertiserConnection.HalStart">
            <summary> Implements a hardware-dependent code to start Bluetooth LE
              advertising. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              driver-dependent code. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeAdvertiserConnection.HalStop">
            <summary> Implements a hardware-dependent code to stop Bluetooth LE
              advertising. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              driver-dependent code. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeAdvertiserConnection.#ctor(wclBluetooth.wclBluetoothRadio)">
            <summary> Creates a new "virtual" Bluetooth LE Advertising connection
              object. </summary>
            <param name="Radio"> The Radio object that owns the connection. </param>
            <remarks> <para> An application must never create this class directly.
              Instead of that an application must use upper-level methods and
              classes. </para>
              <para> If the <c>Radio</c> parameter is <c>null</c> the
              <see cref="T:wclCommon.wclECritical" /> exception raises. </para> </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
            <exception cref="T:wclCommon.wclECritical" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeAdvertiserConnection.Finalize">
            <summary> Frees the object. </summary>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeAdvertiserConnection.Start(System.Collections.Generic.List{wclBluetooth.wclBluetoothLeAdvertisement},System.UInt16)">
            <summary> Starts Bluetooth LE Advertising. </summary>
            <param name="Advertisements"> The Bluetooth LE Advertisements
              list. </param>
            <param name="Interval"> An advertising interval in 0.625 ms
              units. The value must be in range between
              <see cref="F:wclBluetooth.wclBluetoothConstants.WCL_BLE_MIN_ADVERTISING_INTERVAL" /> and
              <see cref="F:wclBluetooth.wclBluetoothConstants.WCL_BLE_MAX_ADVERTISING_INTERVAL" />. The default value is
              <see cref="F:wclBluetooth.wclBluetoothConstants.WCL_BLE_DEFAULT_ADVERTISING_INTERVAL" />. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> This feature is supported on Windows 10 with the Microsoft
              Bluetooth drivers only. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisement" />
            <seealso cref="F:wclBluetooth.wclBluetoothConstants.WCL_BLE_MIN_ADVERTISING_INTERVAL" />
            <seealso cref="F:wclBluetooth.wclBluetoothConstants.WCL_BLE_MAX_ADVERTISING_INTERVAL" />
            <seealso cref="F:wclBluetooth.wclBluetoothConstants.WCL_BLE_DEFAULT_ADVERTISING_INTERVAL" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeAdvertiserConnection.Stop">
            <summary> Stops Bluetooth LE Advertising. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> This feature is supported on Windows 10 with the Microsoft
              Bluetooth drivers only. </remarks>
        </member>
        <member name="P:wclBluetooth.wclBluetoothLeAdvertiserConnection.Advertisements">
            <summary> Gets the Bluetooth LE advertisements list. </summary>
            <value> The Bluetooth LE advertisements list. </value>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisement" />
        </member>
        <member name="P:wclBluetooth.wclBluetoothLeAdvertiserConnection.Advertising">
            <summary> Gets advertising state. </summary>
            <value> <c>True</c> if advertising is running. </value>
        </member>
        <member name="P:wclBluetooth.wclBluetoothLeAdvertiserConnection.Interval">
            <summary> Gets the advertising interval. </summary>
            <value> The advertising interval in 0.625ms units. </value>
        </member>
        <member name="P:wclBluetooth.wclBluetoothLeAdvertiserConnection.Radio">
            <summary> Gets the connection owner. </summary>
            <value> The <see cref="T:wclBluetooth.wclBluetoothRadio" /> object owns the
              connection. </value>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
        </member>
        <member name="P:wclBluetooth.wclBluetoothLeAdvertiserConnection.Anonymous">
            <summary> Specifies whether or not the device address is included in the
              advertisement header. By default, the address is included. </summary>
            <value> Indicates whether the device address is hidden. The default
              value is <c>False</c>, indicating that the address is
              included. </value>
            <remarks> <para> The Extended Advertising format must be enabled by
              setting the <c>UseExtendedAdvertisement</c> to <c>True</c> to use this
              property. If the <c>UseExtendedAdvertisement</c> is <c>False</c> the
              value of this property is ignored. </para>
              <para> If the advertiser is running and an application changes the
              property the <see cref="T:wclBluetooth.wclEBluetoothLeBeacon" /> exception
              raises. </para> </remarks>
            <exception cref="T:wclBluetooth.wclEBluetoothLeBeacon" />
        </member>
        <member name="P:wclBluetooth.wclBluetoothLeAdvertiserConnection.IncludeTxRssi">
            <summary> Specifies whether the transmit power level is included in
              the advertisement header. </summary>
            <value> Indicates whether the transmit power level is included. The
              default value is <c>False</c>. </value>
            <remarks> <para> The Extended Advertising format must be enabled by
              setting the <c>UseExtendedAdvertisement</c> to <c>True</c> to use this
              property. If the <c>UseExtendedAdvertisement</c> is <c>False</c> the
              value of this property is ignored. </para>
              <para> If the advertiser is running and an application changes the
              property the <see cref="T:wclBluetooth.wclEBluetoothLeBeacon" /> exception
              raises. </para> </remarks>
            <exception cref="T:wclBluetooth.wclEBluetoothLeBeacon" />
        </member>
        <member name="P:wclBluetooth.wclBluetoothLeAdvertiserConnection.PreferredTxRssi">
            <summary> If specified, requests that the radio use the indicated
              transmit power level for the advertisement. </summary>
            <value> The requested power level in dDm at range between -100
              dBm and +20 for the radio transmission. The default is -127 indicating
              that this feature is disabled. If the parameter is out of range the
              <see cref="T:wclCommon.wclEInvalidArgument" /> exception raises.</value>
            <remarks> <para> Enabling the Extended Advertising format is necessary
              to enable several other related properties. </para>
             <para> If the advertiser is running and an application changes the
              property the <see cref="T:wclBluetooth.wclEBluetoothLeBeacon" /> exception
              raises. </para> </remarks>
            <exception cref="T:wclCommon.wclEInvalidArgument" />
            <exception cref="T:wclBluetooth.wclEBluetoothLeBeacon" />
        </member>
        <member name="P:wclBluetooth.wclBluetoothLeAdvertiserConnection.UseExtendedAdvertisement">
            <summary> Specifies that the advertisement publisher should use the
              Extended Advertising format. </summary>
            <value> Indicates whether or not the Extended Advertising format should
              be used. The default value is <c>False</c>. </value>
            <remarks> <para> Enabling the Extended Advertising format is necessary
              to enable several other related properties. </para>
             <para> If the advertiser is running and an application changes the
              property the <see cref="T:wclBluetooth.wclEBluetoothLeBeacon" /> exception
              raises. </para> </remarks>
            <exception cref="T:wclBluetooth.wclEBluetoothLeBeacon" />
        </member>
        <member name="E:wclBluetooth.wclBluetoothLeAdvertiserConnection.OnStarted">
            <summary> The event fires when the Bluetooth LE advertising
              started. </summary>
        </member>
        <member name="E:wclBluetooth.wclBluetoothLeAdvertiserConnection.OnStopped">
            <summary> The event fires when the Bluetooth LE advertising
              stopped. </summary>
        </member>
        <member name="T:wclBluetooth.wclGattClientConnection">
            <summary> The class represents a Bluetooth LE GATT client
              connection. </summary>
            <remarks> An application must never create instances of this class
              directly. Instead of that an application must use related methods
              from the <see cref="T:wclBluetooth.wclBluetoothRadio" /> object. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
            <seealso cref="T:wclCommunication.wclClientConnection" />
        </member>
        <member name="M:wclBluetooth.wclGattClientConnection.PrepareForConnection">
            <summary> The method called internally before connection. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class may override this method to process some
              connection pre-requirements that should be executed in the main
              thread UI. Used by BLED112 to be able to get protection
              parameters. </remarks>
        </member>
        <member name="M:wclBluetooth.wclGattClientConnection.MessageReceived(wclCommon.wclMessage)">
            <summary> The method called when a new notification message
              received. </summary>
            <param name="Message"> A <see cref="T:wclCommon.wclMessage" /> object
              represents a notification message. </param>
            <remarks> <para> This method is for internal use only. </para>
              <para> If a derived class overrides this method it must always call
              the inherited implementation first. </para> </remarks>
            <seealso cref="T:wclCommon.wclMessage" />
        </member>
        <member name="M:wclBluetooth.wclGattClientConnection.HalConnect(System.IntPtr)">
            <summary> Implements a hardware-dependent code that connects to a
              remote device. </summary>
            <param name="Event"> The system even object handle. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> <para> Derived classes must override this method to implement
              a hardware-dependent code that connects to a remote device. </para>
              <para> The method executes in a separate thread. </para>
              <para> The method implementation must monitor the <c>Event</c>
              parameter. The <c>Event</c> parameter is set if the
              <c>Disconnect</c> method was called. If the termination event was set
              the method must terminate connection operation. </para>
              <para> If connection to a remote device was terminated the method
              must release all allocated resources because the <c>HalDisconnect</c>
              will not be called. </para>
              <para> A derived class must always call inherited
              method. </para> </remarks>
        </member>
        <member name="M:wclBluetooth.wclGattClientConnection.HalDisconnect">
            <summary> Implements a hardware-dependent code that disconnects from the
              connected remote device. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> <para> The method is called only if a connection to a remote
              device was established with success (the <c>Connect</c> method was
              success). </para>
              <para> The method will not be called if the connection to the  remote
              device was terminated in the middle of the <c>HalConnect</c>
              method. </para>
              <para> A derived class must always call inherited
              method. </para> </remarks>
        </member>
        <member name="M:wclBluetooth.wclGattClientConnection.DoCharacteristicChanged(System.UInt16,System.Byte[])">
            <summary> Fires the <c>OnCharacteristicChanged</c> event. </summary>
            <param name="Handle"> A changed characteristic handle. </param>
            <param name="Value"> A characteristic value. </param>
            <remarks> The <c>Value</c> parameter is valid only inside the event
              handler. If an application needs to use it outside the event handler
              it must be copied. </remarks>
        </member>
        <member name="M:wclBluetooth.wclGattClientConnection.DoConnectionParamsChanged">
            <summary> Fires the <c>OnConnectionParamsChanged</c> event. </summary>
        </member>
        <member name="M:wclBluetooth.wclGattClientConnection.DoConnectionPhyChanged">
            <summary> Fires the <c>OnConnectionPhyChanged</c> event. </summary>
        </member>
        <member name="M:wclBluetooth.wclGattClientConnection.DoMaxPduSizeChanged">
            <summary> Fires the <c>OnPduMaxSizeChanged</c> event. </summary>
        </member>
        <member name="M:wclBluetooth.wclGattClientConnection.HalReadCharacteristics(wclBluetooth.wclGattService,wclBluetooth.wclGattOperationFlag,wclBluetooth.wclGattCharacteristic[]@)">
            <summary> Implements a hardware-dependent code for reading the
              characteristics available for the specified service. </summary>
            <param name="Flag"> Operation behavior flag. </param>
            <param name="Service"> Parent service returned by the call to
              the <c>ReadServices</c> method. </param>
            <param name="Characteristics"> On output a list of the service's
              characteristics. An application is responsible to clean up a memory
              allocated for the dynamic array. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method. </remarks>
            <seealso cref="T:wclBluetooth.wclGattService" />
            <seealso cref="T:wclBluetooth.wclGattOperationFlag" />
            <seealso cref="T:wclBluetooth.wclGattCharacteristic" />
        </member>
        <member name="M:wclBluetooth.wclGattClientConnection.HalReadCharacteristicValue(wclBluetooth.wclGattCharacteristic,wclBluetooth.wclGattOperationFlag,wclBluetooth.wclGattProtectionLevel,System.Byte[]@)">
            <summary> Implements a hardware-dependent code for reading the value of
              the specified characteristic. </summary>
            <param name="Characteristic"> A <see cref="T:wclBluetooth.wclGattCharacteristic" />
              structure obtained by previous call to the <c>ReadCaracteristics</c>
              method. </param>
            <param name="Flag"> Operation behavior flag. </param>
            <param name="Protection"> Describes the required protection
              level. </param>
            <param name="Value"> On output contains a characteristic's value
              as bytes array. An application is responsible to clean up a memory
              allocated for the dynamic array. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method. </remarks>
            <seealso cref="T:wclBluetooth.wclGattCharacteristic" />
            <seealso cref="T:wclBluetooth.wclGattOperationFlag" />
            <seealso cref="T:wclBluetooth.wclGattProtectionLevel" />
        </member>
        <member name="M:wclBluetooth.wclGattClientConnection.HalReadDescriptors(wclBluetooth.wclGattCharacteristic,wclBluetooth.wclGattOperationFlag,wclBluetooth.wclGattDescriptor[]@)">
            <summary> The method reads all the descriptors available for the
              specified characteristic. </summary>
            <param name="Characteristic"> A <see cref="T:wclBluetooth.wclGattCharacteristic" />
              structure obtained by previous call to the <c>ReadCaracteristics</c>
              method. </param>
            <param name="Flag"> Operation behavior flag. </param>
            <param name="Descriptors"> On output contains the list of the
              characteristic's descriptors. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method. </remarks>
            <seealso cref="T:wclBluetooth.wclGattCharacteristic" />
            <seealso cref="T:wclBluetooth.wclGattOperationFlag" />
            <seealso cref="T:wclBluetooth.wclGattDescriptor" />
        </member>
        <member name="M:wclBluetooth.wclGattClientConnection.HalReadDescriptorValue(wclBluetooth.wclGattDescriptor,wclBluetooth.wclGattOperationFlag,wclBluetooth.wclGattProtectionLevel,wclBluetooth.wclGattDescriptorValue@)">
            <summary> Implements a hardware-dependent code for reading the value of
              the specified descriptor. </summary>
            <param name="Descriptor"> A <see cref="T:wclBluetooth.wclGattDescriptor" /> obtained
              by previous call to the <c>ReadDescriptors</c> method. </param>
            <param name="Flag"> Operation behavior flag. </param>
            <param name="Protection"> Describes the required protection
              level. </param>
            <param name="Value"> A descriptor's value. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method. </remarks>
            <seealso cref="T:wclBluetooth.wclGattDescriptor" />
            <seealso cref="T:wclBluetooth.wclGattOperationFlag" />
            <seealso cref="T:wclBluetooth.wclGattProtectionLevel" />
            <seealso cref="T:wclBluetooth.wclGattDescriptorValue" />
        </member>
        <member name="M:wclBluetooth.wclGattClientConnection.HalReadIncludedServices(wclBluetooth.wclGattService,wclBluetooth.wclGattOperationFlag,wclBluetooth.wclGattService[]@)">
            <summary> Implements a hardware-dependent code for reading the included
              services available for a given service. </summary>
            <param name="Service"> Parent service returned by the call to
              the <c>ReadServices</c> method. </param>
            <param name="Flag"> Operation behavior flag. </param>
            <param name="Services"> On output a list of available GATT services.
              An application is responsible to clean up a memory allocated for the
              dynamic array. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method. </remarks>
            <seealso cref="T:wclBluetooth.wclGattService" />
            <seealso cref="T:wclBluetooth.wclGattOperationFlag" />
            <seealso cref="T:wclBluetooth.wclGattService" />
        </member>
        <member name="M:wclBluetooth.wclGattClientConnection.HalReadServices(wclBluetooth.wclGattOperationFlag,wclBluetooth.wclGattService[]@)">
            <summary> Implements a hardware-dependent code for reading available
              services from a remote Bluetooth LE device. </summary>
            <param name="Flag"> Operation behavior flag. </param>
            <param name="Services"> On output a list of available GATT services.
              An application is responsible to clean up a memory allocated for the
              dynamic array. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method. </remarks>
            <seealso cref="T:wclBluetooth.wclGattOperationFlag" />
            <seealso cref="T:wclBluetooth.wclGattService" />
        </member>
        <member name="M:wclBluetooth.wclGattClientConnection.HalWriteCharacteristicValue(wclBluetooth.wclGattCharacteristic,wclBluetooth.wclGattProtectionLevel,System.Byte[])">
            <summary> Implements a hardware-dependent code to write the specified
              characteristic value to the Bluetooth device. </summary>
            <param name="Characteristic"> A <see cref="T:wclBluetooth.wclGattCharacteristic" />
              structure obtained by previous call to the <c>ReadCaracteristics</c>
              method. </param>
            <param name="Protection"> Describes the required protection
              level. </param>
            <param name="Value"> Contains a characteristic's value as bytes
              array. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method. </remarks>
            <seealso cref="T:wclBluetooth.wclGattCharacteristic" />
            <seealso cref="T:wclBluetooth.wclGattProtectionLevel" />
        </member>
        <member name="M:wclBluetooth.wclGattClientConnection.HalWriteDescriptorValue(wclBluetooth.wclGattDescriptor,wclBluetooth.wclGattProtectionLevel,wclBluetooth.wclGattDescriptorValue)">
            <summary> Implements a hardware-dependent code to write the specified
              descriptor value to the Bluetooth device. </summary>
            <param name="Descriptor"> A <see cref="T:wclBluetooth.wclGattDescriptor" /> obtained
              by previous call to the <c>ReadDescriptors</c> method. </param>
            <param name="Protection"> Describes the required protection
              level. </param>
            <param name="Value"> A descriptor's value. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method. </remarks>
            <seealso cref="T:wclBluetooth.wclGattDescriptor" />
            <seealso cref="T:wclBluetooth.wclGattProtectionLevel" />
            <seealso cref="T:wclBluetooth.wclGattDescriptorValue" />
        </member>
        <member name="M:wclBluetooth.wclGattClientConnection.HalSubscribe(wclBluetooth.wclGattCharacteristic,System.IntPtr@)">
            <summary> Implements a hardware-dependent code to subscribes for the
              characteristic changes notifications. </summary>
            <param name="Characteristic"> A characteristic object in that changes
              an application is interested. </param>
            <param name="Hdl"> On output the subscription handle. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method. </remarks>
            <seealso cref="T:wclBluetooth.wclGattCharacteristic" />
            <seealso cref="T:wclBluetooth.wclGattOperationFlag" />
        </member>
        <member name="M:wclBluetooth.wclGattClientConnection.HalUnsubscribe(System.IntPtr)">
            <summary> Implements a hardware-dependent code to unsubscribes from the
              characteristic changes notifications. </summary>
            <param name="Hdl"> The subscription handle. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method. </remarks>
            <seealso cref="T:wclBluetooth.wclGattCharacteristic" />
        </member>
        <member name="M:wclBluetooth.wclGattClientConnection.HalGetConnectionParams(wclBluetooth.wclBluetoothLeConnectionParameters@)">
            <summary> Implements a hardware-dependent code to get the current
              connection parameters. </summary>
            <param name="Params"> If the function completed with success on output
              contains the current connection parameters. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeConnectionParameters" />
        </member>
        <member name="M:wclBluetooth.wclGattClientConnection.HalSetConnectionParams(wclBluetooth.wclBluetoothLeConnectionParametersType)">
            <summary> Implements a hardware-dependent code to request the connection
              parameters change to the specified preferred connection
              parameters. </summary>
            <param name="Params"> The preferred Bluetooth LE connection parameters
              type. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeConnectionParametersType" />
        </member>
        <member name="M:wclBluetooth.wclGattClientConnection.HalSetConnectionParams(wclBluetooth.wclBluetoothLeConnectionParametersValue)">
            <summary> Implements a hardware-dependent code to request the connection
              parameters change to the specified preferred connection
              parameters. </summary>
            <param name="Params"> The preferred Bluetooth LE connection parameters
              value. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeConnectionParametersValue" />
        </member>
        <member name="M:wclBluetooth.wclGattClientConnection.HalGetMaxPduSize(System.UInt16@)">
            <summary> Implements a hardware-dependent code to reads the maximum PDU
              size for the current connection. </summary>
            <param name="Size"> If the method completed with success on output
              contains the maximum PDU size. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method. </remarks>
        </member>
        <member name="M:wclBluetooth.wclGattClientConnection.HalGetConnectionPhyInfo(wclBluetooth.wclBluetoothLeConnectionPhy@)">
            <summary> Implements a hardware-dependent code to reads the Bluetooth LE
              physical layer (PHY) information. </summary>
            <param name="Info"> If the method completed with success on output
              contains the connection PHY information. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeConnectionPhy" />
        </member>
        <member name="M:wclBluetooth.wclGattClientConnection.#ctor(wclBluetooth.wclBluetoothRadio)">
            <summary> Creates a new GATT client connection object. </summary>
            <param name="Radio"> The Radio object that owns the connection. </param>
            <remarks> <para> An application must never create this class directly.
              Instead of that an application must use upper-level methods and
              classes. </para>
              <para> If the <c>Radio</c> parameter is <c>null</c> the
              <see cref="T:wclCommon.wclECritical" /> exception raises. </para> </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
            <exception cref="T:wclCommon.wclECritical" />
        </member>
        <member name="M:wclBluetooth.wclGattClientConnection.ReadCharacteristics(wclBluetooth.wclGattService,wclBluetooth.wclGattOperationFlag,wclBluetooth.wclGattCharacteristic[]@)">
            <summary> The method reads all the characteristics available for the
              specified service. </summary>
            <param name="Service"> Parent service returned by the call to
              the <c>ReadServices</c> method. </param>
            <param name="Flag"> Operation behavior flag. </param>
            <param name="Characteristics"> On output a list of the service's
              characteristics. An application is responsible to clean up a memory
              allocated for the dynamic array. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclBluetooth.wclGattService" />
            <seealso cref="T:wclBluetooth.wclGattOperationFlag" />
            <seealso cref="T:wclBluetooth.wclGattCharacteristic" />
        </member>
        <member name="M:wclBluetooth.wclGattClientConnection.ReadCharacteristicValue(wclBluetooth.wclGattCharacteristic,wclBluetooth.wclGattOperationFlag,wclBluetooth.wclGattProtectionLevel,System.Byte[]@)">
            <summary> The method reads the value of the specified
              characteristic. </summary>
            <param name="Characteristic"> A <see cref="T:wclBluetooth.wclGattCharacteristic" />
              structure obtained by previous call to the <c>ReadCaracteristics</c>
              method. </param>
            <param name="Flag"> Operation behavior flag. </param>
            <param name="Protection"> Describes the required protection
              level. </param>
            <param name="Value"> On output contains a characteristic's value
              as bytes array. An application is responsible to clean up a memory
              allocated for the dynamic array. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclBluetooth.wclGattCharacteristic" />
            <seealso cref="T:wclBluetooth.wclGattOperationFlag" />
            <seealso cref="T:wclBluetooth.wclGattProtectionLevel" />
        </member>
        <member name="M:wclBluetooth.wclGattClientConnection.ReadDescriptors(wclBluetooth.wclGattCharacteristic,wclBluetooth.wclGattOperationFlag,wclBluetooth.wclGattDescriptor[]@)">
            <summary> The method reads all the descriptors available for the
              specified characteristic. </summary>
            <param name="Characteristic"> A <see cref="T:wclBluetooth.wclGattCharacteristic" />
              structure obtained by previous call to the <c>ReadCaracteristics</c>
              method. </param>
            <param name="Flag"> Operation behavior flag. </param>
            <param name="Descriptors"> On output contains the list of the
              characteristic's descriptors. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclBluetooth.wclGattCharacteristic" />
            <seealso cref="T:wclBluetooth.wclGattOperationFlag" />
            <seealso cref="T:wclBluetooth.wclGattDescriptor" />
        </member>
        <member name="M:wclBluetooth.wclGattClientConnection.ReadDescriptorValue(wclBluetooth.wclGattDescriptor,wclBluetooth.wclGattOperationFlag,wclBluetooth.wclGattProtectionLevel,wclBluetooth.wclGattDescriptorValue@)">
            <summary> The method reads the value of the specified
              descriptor. </summary>
            <param name="Descriptor"> A <see cref="T:wclBluetooth.wclGattDescriptor" /> obtained
              by previous call to the <c>ReadDescriptors</c> method. </param>
            <param name="Flag"> Operation behavior flag. </param>
            <param name="Protection"> Describes the required protection
              level. </param>
            <param name="Value"> A descriptor's value. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclBluetooth.wclGattDescriptor" />
            <seealso cref="T:wclBluetooth.wclGattOperationFlag" />
            <seealso cref="T:wclBluetooth.wclGattProtectionLevel" />
            <seealso cref="T:wclBluetooth.wclGattDescriptorValue" />
        </member>
        <member name="M:wclBluetooth.wclGattClientConnection.ReadIncludedServices(wclBluetooth.wclGattService,wclBluetooth.wclGattOperationFlag,wclBluetooth.wclGattService[]@)">
            <summary> The method reads all the included services available for a
              given service. </summary>
            <param name="Service"> Parent service returned by the call to
              the <c>ReadServices</c> method. </param>
            <param name="Flag"> Operation behavior flag. </param>
            <param name="Services"> On output a list of available GATT services.
              An application is responsible to clean up a memory allocated for the
              dynamic array. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclBluetooth.wclGattService" />
            <seealso cref="T:wclBluetooth.wclGattOperationFlag" />
            <seealso cref="T:wclBluetooth.wclGattService" />
        </member>
        <member name="M:wclBluetooth.wclGattClientConnection.ReadServices(wclBluetooth.wclGattOperationFlag,wclBluetooth.wclGattService[]@)">
            <summary> Reads available services from a remote Bluetooth LE
              device. </summary>
            <param name="Flag"> Operation behavior flag. </param>
            <param name="Services"> On output a list of available GATT services.
              An application is responsible to clean up a memory allocated for the
              dynamic array. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclBluetooth.wclGattOperationFlag" />
            <seealso cref="T:wclBluetooth.wclGattService" />
        </member>
        <member name="M:wclBluetooth.wclGattClientConnection.WriteCharacteristicValue(wclBluetooth.wclGattCharacteristic,wclBluetooth.wclGattProtectionLevel,System.Byte[],wclBluetooth.wclGattWriteKind)">
            <summary> The method writes the specified characteristic value to the
              Bluetooth device. </summary>
            <param name="Characteristic"> A <see cref="T:wclBluetooth.wclGattCharacteristic" />
              structure obtained by previous call to the <c>ReadCaracteristics</c>
              method. </param>
            <param name="Protection"> Describes the required protection
              level. </param>
            <param name="Value"> Contains a characteristic's value as bytes
              array. </param>
            <param name="WriteKind"> The write operation mode. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclBluetooth.wclGattCharacteristic" />
            <seealso cref="T:wclBluetooth.wclGattProtectionLevel" />
            <seealso cref="T:wclBluetooth.wclGattWriteKind" />
        </member>
        <member name="M:wclBluetooth.wclGattClientConnection.WriteDescriptorValue(wclBluetooth.wclGattDescriptor,wclBluetooth.wclGattProtectionLevel,wclBluetooth.wclGattDescriptorValue)">
            <summary> The method writes the specified descriptor value to the
              Bluetooth device. </summary>
            <param name="Descriptor"> A <see cref="T:wclBluetooth.wclGattDescriptor" /> obtained
              by previous call to the <c>ReadDescriptors</c> method. </param>
            <param name="Protection"> Describes the required protection
              level. </param>
            <param name="Value"> A descriptor's value. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclBluetooth.wclGattDescriptor" />
            <seealso cref="T:wclBluetooth.wclGattProtectionLevel" />
            <seealso cref="T:wclBluetooth.wclGattDescriptorValue" />
        </member>
        <member name="M:wclBluetooth.wclGattClientConnection.WriteClientConfiguration(wclBluetooth.wclGattCharacteristic,System.Boolean,wclBluetooth.wclGattOperationFlag,wclBluetooth.wclGattProtectionLevel)">
            <summary> Writes the client configuration descriptor to the
              device. </summary>
            <param name="Characteristic"> A characteristic object in that changes
              an application is interested. </param>
            <param name="Subscribe"> The value indicates should we subscribe
              or unsubscribe from the characteristic value changes. </param>
            <param name="Flag"> Operation behavior flag. </param>
            <param name="Protection"> Describes the required protection
              level. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> In order to receive notifications about characteristic
              value changes the client must set the Client Configuration Descriptor.
              An application can use this method to do it in easy way. </remarks>
            <seealso cref="T:wclBluetooth.wclGattCharacteristic" />
            <seealso cref="T:wclBluetooth.wclGattOperationFlag" />
            <seealso cref="T:wclBluetooth.wclGattProtectionLevel" />
        </member>
        <member name="M:wclBluetooth.wclGattClientConnection.Subscribe(wclBluetooth.wclGattCharacteristic)">
            <summary> Subscribes for the characteristic changes
              notifications. </summary>
            <param name="Characteristic"> A characteristic object in that changes
              an application is interested. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> The method does not change Client Configuration Descriptor
              value. Application must do it by itself or by calling
              the <c>WriteClientConfiguration</c> method. </remarks>
            <seealso cref="T:wclBluetooth.wclGattCharacteristic" />
        </member>
        <member name="M:wclBluetooth.wclGattClientConnection.Unsubscribe(wclBluetooth.wclGattCharacteristic)">
            <summary> Unsubscribes from the characteristic changes
              notifications. </summary>
            <param name="Characteristic"> A characteristic object in that changes
              an application is not interested any more. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> The method does not change Client Configuration Descriptor
              value. Application must do it by itself or by calling
              the <c>WriteClientConfiguration</c> method. </remarks>
            <seealso cref="T:wclBluetooth.wclGattCharacteristic" />
        </member>
        <member name="M:wclBluetooth.wclGattClientConnection.Connect(System.Int64,System.Boolean,System.Boolean)">
            <summary> Connects to a remote device. </summary>
            <param name="Address"> A remote device MAC address. </param>
            <param name="ConnectOnRead"> A Boolean indicates whether a connection
              should made during <c>Connect</c> call or on first services
              read. <c>True</c> indicates that the connection should be executed
              on first services read on when OS decided to do that. </param>
            <param name="ForceNotifications"> A Boolean indicates that the
              notifications (and/or indications) should be forced. This should be
              set to <c>True</c> for some boards (such as <c>Bluno</c>, <c>Bluno
              Mega</c> and some others) that do not have <c>Characteristic
              Client Configuration Descriptor</c>. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> The method starts a connection operation to a remote device.
              If the method success that does not mean that the connection was
              established. That just means that the connection operation was
              started. The real connection result will be passed to the
              <c>OnConnect</c> event handler. </remarks>
        </member>
        <member name="M:wclBluetooth.wclGattClientConnection.GetConnectionParams(wclBluetooth.wclBluetoothLeConnectionParameters@)">
            <summary> Gets the current connection parameters. </summary>
            <param name="Params"> If the function completed with success on output
              contains the current connection parameters. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> This feature is supported with <c>BLED112</c> dongle and with
              <c>Microsoft</c> Bluetooth drivers on <c>Windows 11</c> and
              above. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeConnectionParameters" />
        </member>
        <member name="M:wclBluetooth.wclGattClientConnection.SetConnectionParams(wclBluetooth.wclBluetoothLeConnectionParametersType)">
            <summary> Request the connection parameters change to the specified
              preferred connection parameters. </summary>
            <param name="Params"> The preferred Bluetooth LE connection parameters
              type. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> <para> When performing firmware updates, higher throughput is
              necessary to complete the operation swiftly for the user. In those
              scenarios, you should request <c>ppThroughputOptimized</c> connection
              parameters for the duration of the firmware update. That will reduce
              the number of concurrent connections to other Bluetooth peripherals,
              and should be used sparingly. </para>
              <para> Conversely, when connecting to multiple LE devices
              concurrently, you should use <c>ppPowerOptimized</c>. That will
              increase the acceptable peripheral latency for the connection,
              reducing the interval at which the LE device must respond to the
              host OS. That allows the local Bluetooth radio to schedule more
              connections concurrently, and reduces power usage on both the host OS
              and on the peripheral device. </para>
              <para> If the connection parameters were changed successfully the
              <c>OnConnectionParamsChanged</c> even fires. </para>
              <para> This feature is supported with <c>BLED112</c> dongle and with
              <c>Microsoft</c> Bluetooth drivers on <c>Windows 11</c> and
              above. </para> </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeConnectionParametersType" />
        </member>
        <member name="M:wclBluetooth.wclGattClientConnection.SetConnectionParams(wclBluetooth.wclBluetoothLeConnectionParametersValue)">
            <summary> Request the connection parameters change to the specified
              preferred connection parameters. </summary>
            <param name="Params"> The preferred Bluetooth LE connection parameters
              value. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks><para> If the connection parameters were changed successfully
              the <c>OnConnectionParamsChanged</c> even fires. </para>
              <para> This feature is supported with <c>BLED112</c> dongle and with
              <c>Microsoft</c> Bluetooth drivers on <c>Windows 11</c> and
              above. </para> </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeConnectionParametersValue" />
        </member>
        <member name="M:wclBluetooth.wclGattClientConnection.GetMaxPduSize(System.UInt16@)">
            <summary> Reads the maximum PDU size for the current
              connection. </summary>
            <param name="Size"> If the method completed with success on output
              contains the maximum PDU size. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> The PDU size includes header and payload. For example if
              PDU size is 23 bytes the allowed payload is 20 bytes. </remarks>
        </member>
        <member name="M:wclBluetooth.wclGattClientConnection.GetConnectionPhyInfo(wclBluetooth.wclBluetoothLeConnectionPhy@)">
            <summary> Reads the Bluetooth LE physical layer (PHY)
              information. </summary>
            <param name="Info"> If the method completed with success on output
              contains the connection PHY information. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> This feature is supported on Windows 11 and above. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeConnectionPhy" />
        </member>
        <member name="P:wclBluetooth.wclGattClientConnection.Address">
            <summary> Gets a remote device MAC address. </summary>
            <value> The remote device MAC address. </value>
        </member>
        <member name="P:wclBluetooth.wclGattClientConnection.ConnectOnRead">
            <summary> Gets connection mode. </summary>
            <value> The Boolean indicates the connection mode. </value>
            <remarks> If this property set to <c>True</c> the connection to a target
              device will be executed on first services read or when the OS decided
              to do that. If the property is <c>False</c> the connection will be
              executed (if possible) on <c>Connect</c> call. </remarks>
        </member>
        <member name="P:wclBluetooth.wclGattClientConnection.ForceNotifications">
            <summary> Gets the notifications mode. </summary>
            <value> The Boolean indicates the notifications mode. </value>
            <remarks> If this property set to <c>True</c> the characteristic value
              changes notification (and/or indication) will work correctly with
              some boards (such as <c>Bluno</c>, <c>Bluno Meag</c> and some others)
              that do not have <c>Characteristic Client Configucation
              Descriptor</c>. </remarks>
        </member>
        <member name="P:wclBluetooth.wclGattClientConnection.Radio">
            <summary> Gets the connection owner. </summary>
            <value> The <see cref="T:wclBluetooth.wclBluetoothRadio" /> object owns the
              connection. </value>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
        </member>
        <member name="E:wclBluetooth.wclGattClientConnection.OnCharacteristicChanged">
            <summary> The event fires when a subscribed characteristic value has
              been changed. </summary>
            <remarks> To receive characteristic value change events an application
              must first subscribe for characteristic changes notification
              by calling <c>Subscribe</c> method. </remarks>
            <seealso cref="T:wclBluetooth.wclGattCharacteristicChangedEvent" />
        </member>
        <member name="E:wclBluetooth.wclGattClientConnection.OnConnectionParamsChanged">
            <summary> The event fires when the connection parameters
              changed. </summary>
            <remarks> <para> Once this event received an application can use the
              <c>GetConnectionParams</c> method to get the current connection
              parameters. </para>
              <para> This feature is supported with <c>BLED112</c> dongle and with
              <c>Microsoft</c> Bluetooth drivers on <c>Windows 11</c> and
              above. </para> </remarks>
        </member>
        <member name="E:wclBluetooth.wclGattClientConnection.OnConnectionPhyChanged">
            <summary> The event fires when the connection PHY changed. </summary>
            <remarks> <para> Once this event received an application can use the
              <c>GetConnectionParams</c> method to get the current connection
              parameters. </para>
              <para> This feature is supported with <c>Microsoft</c> Bluetooth
              drivers on <c>Windows 11</c> and above. </para> </remarks>
        </member>
        <member name="E:wclBluetooth.wclGattClientConnection.OnMaxPduSizeChanged">
            <summary> The event fires when the maximum PDU size changed. </summary>
            <remarks> Once the event fires an application can use the
              <c>GetMaxPduSize</c> method to read the current maximum PDU
              size. </remarks>
        </member>
        <member name="T:wclBluetooth.wclBluetoothGattServerClientParams">
            <summary> The base class for a driver specific GATT server client
              implementation parameters. </summary>
        </member>
        <member name="M:wclBluetooth.wclBluetoothGattServerClientParams.Free">
            <summary> Frees the object. </summary>
            <remarks> A derived class may override this method to release internal resources. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothGattServerClientParams.#ctor">
            <summary> Creates new parameters object. </summary>
        </member>
        <member name="M:wclBluetooth.wclBluetoothGattServerClientParams.Finalize">
            <exclude />
        </member>
        <member name="M:wclBluetooth.wclBluetoothGattServerClientParams.Dispose">
            <summary> Frees the object. </summary>
        </member>
        <member name="T:wclBluetooth.wclGattServerConnection">
            <summary> The "virtual" connection for the Bluetooth GATT
              Server </summary>
            <remarks> An application must not create or use this class directly.
              Instead of that an application must use high-level Bluetooth
              components. </remarks>
            <seealso cref="T:wclCommunication.wclCustomConnection" />
        </member>
        <member name="M:wclBluetooth.wclGattServerConnection.MessageReceived(wclCommon.wclMessage)">
            <summary> The method called when a new notification message
              received. </summary>
            <param name="Message"> A <see cref="T:wclCommon.wclMessage" /> object
              represents a notification message. </param>
            <remarks> <para> This method is for internal use only. </para>
              <para> If a derived class overrides this method it must always call
              the inherited implementation first. </para> </remarks>
            <seealso cref="T:wclCommon.wclMessage" />
        </member>
        <member name="M:wclBluetooth.wclGattServerConnection.DoClientConnected(wclBluetooth.wclGattServerClient)">
            <summary> Fires the <c>OnClientConnected</c> event. </summary>
            <param name="Client"> The <see cref="T:wclBluetooth.wclGattServerClient" /> object
              that represents a connected client. </param>
            <seealso cref="T:wclBluetooth.wclGattServerClient" />
        </member>
        <member name="M:wclBluetooth.wclGattServerConnection.DoClientDisconnected(wclBluetooth.wclGattServerClient)">
            <summary> Fires the <c>OnClientDisconnected</c> event. </summary>
            <param name="Client"> The <see cref="T:wclBluetooth.wclGattServerClient" /> object
              that represents a disconnected client. </param>
            <seealso cref="T:wclBluetooth.wclGattServerClient" />
        </member>
        <member name="M:wclBluetooth.wclGattServerConnection.DoConnectionParamsChanged(wclBluetooth.wclGattServerClient)">
            <summary> Fires the <c>OnConnectionParamsChanged</c> event. </summary>
            <param name="Client"> The <see cref="T:wclBluetooth.wclGattServerClient" /> object
              that represents a disconnected client. </param>
            <seealso cref="T:wclBluetooth.wclGattServerClient" />
        </member>
        <member name="M:wclBluetooth.wclGattServerConnection.DoConnectionPhyChanged(wclBluetooth.wclGattServerClient)">
            <summary> Fires the <c>OnConnectionPhyChanged</c> event. </summary>
            <param name="Client"> The <see cref="T:wclBluetooth.wclGattServerClient" /> object
              that represents a disconnected client. </param>
            <seealso cref="T:wclBluetooth.wclGattServerClient" />
        </member>
        <member name="M:wclBluetooth.wclGattServerConnection.DoMaxPduSizeChanged(wclBluetooth.wclGattServerClient)">
            <summary> Fires the <c>OnMaxPduSizeChanged</c> event. </summary>
            <seealso cref="T:wclBluetooth.wclGattServerClient" />
        </member>
        <member name="M:wclBluetooth.wclGattServerConnection.DoNotificationSizeChanged(wclBluetooth.wclGattServerClient)">
            <summary> Fires the <c>OnNotificationSizeChanged</c> event. </summary>
            <param name="Client"> The <see cref="T:wclBluetooth.wclGattServerClient" /> object
              that represents a client which changed the maximum notification
              size. </param>
            <seealso cref="T:wclBluetooth.wclGattServerClient" />
        </member>
        <member name="M:wclBluetooth.wclGattServerConnection.DoRead(wclBluetooth.wclGattServerClient,wclBluetooth.wclGattLocalCharacteristic,wclBluetooth.wclGattLocalCharacteristicReadRequest)">
            <summary> Fires the <c>OnRead</c> event. </summary>
            <param name="Client"> The <see cref="T:wclBluetooth.wclGattServerClient" /> object
              that requested read. </param>
            <param name="Characteristic"> The local GATT characteristic object
              that requested the read operation. </param>
            <param name="Request"> The GATT read request object. </param>
            <remarks> This method is called when a remote GATT client requests
              read from the characteristic. </remarks>
            <seealso cref="T:wclBluetooth.wclGattServerClient" />
            <seealso cref="T:wclBluetooth.wclGattLocalCharacteristic" />
            <seealso cref="T:wclBluetooth.wclGattLocalCharacteristicReadRequest" />
        </member>
        <member name="M:wclBluetooth.wclGattServerConnection.DoStarted">
            <summary> Fires the <c>OnStarted</c> event. </summary>
        </member>
        <member name="M:wclBluetooth.wclGattServerConnection.DoStopped">
            <summary> Fires the <c>OnStopped</c> event. </summary>
        </member>
        <member name="M:wclBluetooth.wclGattServerConnection.DoSubscribed(wclBluetooth.wclGattServerClient,wclBluetooth.wclGattLocalCharacteristic)">
            <summary> Fires the <c>OnSubscribed</c> event. </summary>
            <param name="Client"> The <see cref="T:wclBluetooth.wclGattServerClient" /> object
              that subscribed. </param>
            <param name="Characteristic"> The characteristic object for which writes
              is executing. </param>
            <seealso cref="T:wclBluetooth.wclGattServerClient" />
            <seealso cref="T:wclBluetooth.wclGattLocalCharacteristic" />
        </member>
        <member name="M:wclBluetooth.wclGattServerConnection.DoUnsubscribed(wclBluetooth.wclGattServerClient,wclBluetooth.wclGattLocalCharacteristic)">
            <summary> Fires the <c>OnUnsubscribed</c> event. </summary>
            <param name="Client"> The <see cref="T:wclBluetooth.wclGattServerClient" /> object
              that unsubscribed. </param>
            <param name="Characteristic"> The characteristic object for which writes
              is executing. </param>
            <seealso cref="T:wclBluetooth.wclGattServerClient" />
            <seealso cref="T:wclBluetooth.wclGattLocalCharacteristic" />
        </member>
        <member name="M:wclBluetooth.wclGattServerConnection.DoWrite(wclBluetooth.wclGattServerClient,wclBluetooth.wclGattLocalCharacteristic,wclBluetooth.wclGattLocalCharacteristicWriteRequest)">
            <summary> Fires the <c>OnWrite</c> event. </summary>
            <param name="Client"> The <see cref="T:wclBluetooth.wclGattServerClient" /> object
              that requested write. </param>
            <param name="Characteristic"> The local GATT characteristic object
              that requested the write operation. </param>
            <param name="Request"> The GATT characteristic write request
              object. </param>
            <seealso cref="T:wclBluetooth.wclGattServerClient" />
            <seealso cref="T:wclBluetooth.wclGattLocalCharacteristic" />
            <seealso cref="T:wclBluetooth.wclGattLocalCharacteristicWriteRequest" />
        </member>
        <member name="M:wclBluetooth.wclGattServerConnection.HalInitialize">
            <summary> Implements a driver specific code to initialize Bluetooth LE
              GATT Server. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              driver specific code. </remarks>
        </member>
        <member name="M:wclBluetooth.wclGattServerConnection.HalUninitialize">
            <summary> Implements a driver specific code to uninitialize Bluetooth LE
              GATT Server. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              driver specific code. </remarks>
        </member>
        <member name="M:wclBluetooth.wclGattServerConnection.HalCreateService(wclBluetooth.wclGattUuid,wclBluetooth.wclGattLocalService@)">
            <summary> Creates a driver specific local GATT service
              object. </summary>
            <param name="Uuid"> The service's UUID. </param>
            <param name="Service"> If the function completed with success this
              parameter includes just create local GATT service object. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              driver specific code. </remarks>
            <seealso cref="T:wclBluetooth.wclGattUuid" />
            <seealso cref="T:wclBluetooth.wclGattLocalService" />
        </member>
        <member name="M:wclBluetooth.wclGattServerConnection.HalCreateClient(System.Int64)">
            <summary> Creates a driver specific GATT server client
              object. </summary>
            <param name="Address"> The client's address. </param>
            <returns> If the method completed with success the returning value is
              just created <see cref="T:wclBluetooth.wclGattServerClient" /> object. If the method
              failed the returning value is <c>nil</c>. </returns>
            <remarks> A derived class must override this method to provide
              driver specific code. </remarks>
            <seealso cref="T:wclBluetooth.wclGattServerClient" />
        </member>
        <member name="M:wclBluetooth.wclGattServerConnection.#ctor(wclBluetooth.wclBluetoothRadio)">
            <summary> Creates a new "virtual" GATT Server connection
              object. </summary>
            <param name="Radio"> The Radio object that owns the connection. </param>
            <remarks> <para> An application must never create this class directly.
              Instead of that an application must use upper-level methods and
              classes. </para>
              <para> If the <c>Radio</c> parameter is <c>nil</c> the
              <see cref="T:wclCommon.wclECritical" /> exception raises. </para> </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
            <exception cref="T:wclCommon.wclECritical" />
        </member>
        <member name="M:wclBluetooth.wclGattServerConnection.Start">
            <summary> Starts the Bluetooth LE GATT Server. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> This feature is supported on Windows 10 with the Microsoft
              Bluetooth drivers or on any other Windows platform with BlueSoleil
              Bluetooth drivers. </remarks>
        </member>
        <member name="M:wclBluetooth.wclGattServerConnection.Stop">
            <summary> Stops the Bluetooth LE GATT Server. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> This feature is supported on Windows 10 with the Microsoft
              Bluetooth drivers or on any other Windows platform with BlueSoleil
              Bluetooth drivers. </remarks>
        </member>
        <member name="M:wclBluetooth.wclGattServerConnection.AddService(wclBluetooth.wclGattUuid,wclBluetooth.wclGattLocalService@)">
            <summary> Creates new local GATT service and adds it to the services
              list. </summary>
            <param name="Uuid"> The service's UUID. </param>
            <param name="Service"> If the function completed with success this
              parameter receives a just created GATT local service object. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclBluetooth.wclGattUuid" />
            <seealso cref="T:wclBluetooth.wclGattLocalService" />
        </member>
        <member name="M:wclBluetooth.wclGattServerConnection.ClearServices">
            <summary> Clears the local services list. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclGattServerConnection.DeleteService(System.Int32)">
            <summary> Deletes the service with given index. </summary>
            <param name="Index"> The service's index. The parameter must be in range
              between 0 and ServicesCount - 1. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="P:wclBluetooth.wclGattServerConnection.Active">
            <summary> Gets the GATT server state. </summary>
            <value> <c>True</c> if the GATT server is running. </value>
        </member>
        <member name="M:wclBluetooth.wclGattServerConnection.Clients(System.Int32)">
            <summary> Gets the GATT server client by its index. </summary>
            <param name="Index"> The client's index. The parameter must be in range
              between 0 and ClientsCount - 1. If the parameter is out of range the
              <see cref="T:wclCommon.wclEInvalidArgument" /> exception raises. </param>
            <returns> The GATT server client object. </returns>
            <seealso cref="T:wclBluetooth.wclGattServerClient" />
            <exception cref="T:wclCommon.wclEInvalidArgument" />
        </member>
        <member name="P:wclBluetooth.wclGattServerConnection.ClientsCount">
            <summary> Gets the clients count. </summary>
            <value> The clients count. </value>
        </member>
        <member name="P:wclBluetooth.wclGattServerConnection.Radio">
            <summary> Gets the connection owner. </summary>
            <value> The <see cref="T:wclBluetooth.wclBluetoothRadio" /> object owns the
              connection. </value>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
        </member>
        <member name="M:wclBluetooth.wclGattServerConnection.Services(System.Int32)">
            <summary> Gets the local GATT service by its index. </summary>
            <param name="Index"> The service's index. The parameter must be in range
              between 0 and ServicesCount - 1. If the parameter is out of range the
              <see cref="T:wclCommon.wclEInvalidArgument" /> exception raises. </param>
            <returns> The local GATT service object. </returns>
            <remarks> If server has not been initialized the
              <see cref="T:wclBluetooth.wclEGattServer" /> exception raises. </remarks>
            <seealso cref="T:wclBluetooth.wclGattLocalService" />
            <exception cref="T:wclCommon.wclEInvalidArgument" />
            <exception cref="T:wclBluetooth.wclEGattServer" />
        </member>
        <member name="P:wclBluetooth.wclGattServerConnection.ServicesCount">
            <summary> Gets the services count. </summary>
            <value> The services count. </value>
        </member>
        <member name="E:wclBluetooth.wclGattServerConnection.OnClientConnected">
            <summary> The event fires when a client connected to the server. </summary>
            <seealso cref="T:wclBluetooth.wclGattServerClientEvent" />
        </member>
        <member name="E:wclBluetooth.wclGattServerConnection.OnClientDisconnected">
            <summary> The event fires when a client disconnected from the server. </summary>
            <seealso cref="T:wclBluetooth.wclGattServerClientEvent" />
        </member>
        <member name="E:wclBluetooth.wclGattServerConnection.OnConnectionParamsChanged">
            <summary> The event fires when the connection parameters
              changed. </summary>
            <remarks> <para> Once this event received an application can use the
              <c>GetConnectionParams</c> method to get the current connection
              parameters. </para>
              <para> This feature is supported with <c>Microsoft</c> Bluetooth drivers on
              <c>Windows 11</c> and above. </para> </remarks>
            <seealso cref="T:wclBluetooth.wclGattServerClientEvent" />
        </member>
        <member name="E:wclBluetooth.wclGattServerConnection.OnConnectionPhyChanged">
            <summary> The event fires when the connection PHY changed. </summary>
            <remarks> <para> Once this event received an application can use the
              <c>GetConnectionPhyInfo</c> method to get the current connection
              parameters. </para>
              <para> This feature is supported with <c>Microsoft</c> Bluetooth
              drivers on <c>Windows 11</c> and above. </para> </remarks>
            <seealso cref="T:wclBluetooth.wclGattServerClientEvent" />
        </member>
        <member name="E:wclBluetooth.wclGattServerConnection.OnMaxPduSizeChanged">
            <summary> The event fires when maximum PDU size changed for the
              connected client. </summary>
            <seealso cref="T:wclBluetooth.wclGattServerClientEvent" />
        </member>
        <member name="E:wclBluetooth.wclGattServerConnection.OnNotificationSizeChanged">
            <summary> The event fires when a maximum notification size of a
              subscribed client has been changed. </summary>
            <seealso cref="T:wclBluetooth.wclGattServerClientEvent" />
        </member>
        <member name="E:wclBluetooth.wclGattServerConnection.OnRead">
            <summary> The event fires when a remote GATT client requests
              characteristic's data read. </summary>
            <remarks> An application must call the <c>Respond</c> method to
              respond on the data read request. </remarks>
            <seealso cref="T:wclBluetooth.wclGattLocalCharacteristicReadEvent" />
        </member>
        <member name="E:wclBluetooth.wclGattServerConnection.OnStarted">
            <summary> The event fires when the Bluetooth LE GATT Server has been
              successfully started. </summary>
        </member>
        <member name="E:wclBluetooth.wclGattServerConnection.OnStopped">
            <summary> The event fires when the Bluetooth LE GATT Server has been
              stopped. </summary>
        </member>
        <member name="E:wclBluetooth.wclGattServerConnection.OnSubscribed">
            <summary> The event fires when a remote GATT client subscribes to the
              characteristic changes notifications or indications. </summary>
            <seealso cref="T:wclBluetooth.wclGattLocalCharacteristicSubscribedClientsChangedEvent" />
        </member>
        <member name="E:wclBluetooth.wclGattServerConnection.OnUnsubscribed">
            <summary> The event fires when a remote GATT client unsubscribes from
              the characteristic changes notifications or indications. </summary>
            <seealso cref="T:wclBluetooth.wclGattLocalCharacteristicSubscribedClientsChangedEvent" />
        </member>
        <member name="E:wclBluetooth.wclGattServerConnection.OnWrite">
            <summary> The event fires when a remote device writes data to the
              characteristic. </summary>
            <seealso cref="T:wclBluetooth.wclGattLocalCharacteristicWriteEvent" />
        </member>
        <member name="T:wclBluetooth.wclRfCommClientConnection">
            <summary> The base class for all Classic Bluetooth (RFCOMM) client
              connections. </summary>
            <remarks> An application must never create instances of this class
              directly. Instead of that an application must use related methods
              from the <see cref="T:wclBluetooth.wclBluetoothRadio" /> object. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
            <seealso cref="T:wclCommunication.wclClientDataConnection" />
        </member>
        <member name="M:wclBluetooth.wclRfCommClientConnection.MessageReceived(wclCommon.wclMessage)">
            <summary> The method called when a new notification message
              received. </summary>
            <param name="Message"> A <see cref="T:wclCommon.wclMessage" /> object
              represents a notification message. </param>
            <remarks> <para> This method is for internal use only. </para>
              <para> If a derived class overrides this method it must always call
              the inherited implementation first. </para> </remarks>
            <seealso cref="T:wclCommon.wclMessage" />
        </member>
        <member name="M:wclBluetooth.wclRfCommClientConnection.#ctor(wclBluetooth.wclBluetoothRadio)">
            <summary> Create new Classic Bluetooth client connection. </summary>
            <param name="Radio"> The Radio object that owns the connection. </param>
            <remarks> <para> An application must never create this class directly.
              Instead of that an application must use upper-level methods and
              classes. </para>
              <para> If the <c>Radio</c> parameter is <c>null</c> the
              <see cref="T:wclCommon.wclECritical" /> exception raises. </para> </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
            <exception cref="T:wclCommon.wclECritical" />
        </member>
        <member name="M:wclBluetooth.wclRfCommClientConnection.Connect(System.Int64,System.Guid,System.Byte,System.Boolean,System.Boolean,System.UInt32)">
            <summary> Connects to a remote device. </summary>
            <param name="Address"> The remote Bluetooth device address. </param>
            <param name="Service"> The Bluetooth Service UUID. If the <c>Channel</c>
              parameter is zero, the system attempts to use <c>Service</c> to
              resolve the remote channel corresponding to the service. The service
              class is a normalized 128-bit GUID, defined by the Bluetooth
              specification. Common GUIDs are defined by the Bluetooth Assigned
              Numbers document. Alternatively, a unique GUID may be used for a
              domain-specific application. </param>
            <param name="Channel"> The RFCOMM channel number. If zero the
              <c>Service</c> UUID will be used. </param>
            <param name="Authentication"> Specifies that authentication is required
              for a connect operation to complete successfully. Setting this option
              actively initiates authentication during connection establishment,
              if the two Bluetooth devices were not previously
              authenticated. </param>
            <param name="Encryption"> The option enforces encryption to establish a
              connection. Encryption is only available for authenticated
              connections. </param>
            <param name="Timeout"> The connect timeout in milliseconds. The
              default value is 10000 milliseconds. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> <para> The method starts a connection operation to a remote
              device. If the method success that does not mean that the connection
              was established. That just means that the connection operation was
              started. The real connection result will be passed to the
              <c>OnConnect</c> event handler. </para>
              <para> NOTE: BlueSoleil does not support <c>Authentication</c>
              and <c>Encryption</c> parameters per connection. </para> </remarks>
        </member>
        <member name="P:wclBluetooth.wclRfCommClientConnection.Address">
            <summary> Gets a remote device MAC address. </summary>
            <value> The remote device MAC address. </value>
        </member>
        <member name="P:wclBluetooth.wclRfCommClientConnection.Authentication">
            <summary> Gets the authentication value. </summary>
            <value> <c>True</c> if the connection required authentication.
              <c>False</c> otherwise. </value>
        </member>
        <member name="P:wclBluetooth.wclRfCommClientConnection.Channel">
            <summary> Gets the target service RFCOMM channel number. <c>0</c> to
              auto detection. </summary>
            <value> The RFCOMM channel number used for connection. </value>
        </member>
        <member name="P:wclBluetooth.wclRfCommClientConnection.Encryption">
            <summary> Gets the encryption state of the connection. </summary>
            <value> <c>True</c> if the connection is encrypted. <c>False</c>
              otherwise. </value>
        </member>
        <member name="P:wclBluetooth.wclRfCommClientConnection.Radio">
            <summary> Gets the connection owner. </summary>
            <value> The <see cref="T:wclBluetooth.wclBluetoothRadio" /> object owns the
              connection. </value>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
        </member>
        <member name="P:wclBluetooth.wclRfCommClientConnection.Service">
            <summary> Gets the target Bluetooth service UUID used for
              connection. </summary>
            <value> A Bluetooth service UUID. </value>
        </member>
        <member name="T:wclBluetooth.wclRfCommServerConnection">
            <summary> The base class for all WCL Bluetooth RFCOMM based
              server connections. </summary>
            <remarks> An application must never create instances of this class
              directly. Instead of that an application must use related methods
              from the <see cref="T:wclBluetooth.wclBluetoothRadio" /> object. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
            <seealso cref="T:wclCommunication.wclServerDataConnection" />
        </member>
        <member name="M:wclBluetooth.wclRfCommServerConnection.MessageReceived(wclCommon.wclMessage)">
            <summary> The method called when a new notification message
              received. </summary>
            <param name="Message"> A <see cref="T:wclCommon.wclMessage" /> object
              represents a notification message. </param>
            <remarks> <para> This method is for internal use only. </para>
              <para> If a derived class overrides this method it must always call
              the inherited implementation first. </para> </remarks>
            <seealso cref="T:wclCommon.wclMessage" />
        </member>
        <member name="M:wclBluetooth.wclRfCommServerConnection.SetAssignedChannel(System.Byte)">
            <summary> Sets the assigned RFCOMM channel number. </summary>
            <remarks> For internal use only. </remarks>
        </member>
        <member name="M:wclBluetooth.wclRfCommServerConnection.DoGetSdpAttributes(System.UInt16[]@,wclBluetooth.wclBluetoothSdpProfile[]@,System.Byte[]@,System.UInt32@)">
            <summary> Fires the <c>GetSdpAttributes</c> event. </summary>
            <param name="Protocols"> The additional protocol descriptors array that
              should be added to SDP record. </param>
            <param name="Profiles"> The profile list that should be added to SDP
              record. </param>
            <param name="Formats"> Other attributes that should be added to SDP
              record. </param>
            <param name="Cod"> <para> Class of device (COD) information. A 32-bit
              parameter of COD_SERVICE_* class of device bits associated with this
              SDP record. The system combines these bits with COD bits from other
              service records and system characteristics. The resulting class of
              device for the local radio is advertised when the radio is found during
              device inquiry. When the last SDP record associated with a particular
              service bit is deleted, that service bit is no longer reported in
              responses to future device inquiries. </para>
              <para> The format and possible values for the COD field are defined in
              the Bluetooth Assigned Numbers 1.1 portion of the Bluetooth
              specification, Section 1.2. (This resource may not be available in some
              languages and countries.) </para> </param>
            <remarks> <para> The HAL Radio implementation calls this method when
              needs to add custom attributes into the SDP record. </para>
              <para> BlueSoleil driver does not support custom SDP records and this
              method does not work with BlueSoleil Bluetooth driver. </para>
              <para> A derived class must always call the inherited
              method.  </para> </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothSdpProfile" />
        </member>
        <member name="M:wclBluetooth.wclRfCommServerConnection.#ctor(wclBluetooth.wclBluetoothRadio)">
            <summary> Create new Classic Bluetooth server connection. </summary>
            <param name="Radio"> The Radio object that owns the connection. </param>
            <remarks> <para> An application must never create this class directly.
              Instead of that an application must use upper-level methods and
              classes. </para>
              <para> If the <c>Radio</c> parameter is <c>null</c> the
              <see cref="T:wclCommon.wclECritical" /> exception raises. </para> </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
            <exception cref="T:wclCommon.wclECritical" />
        </member>
        <member name="M:wclBluetooth.wclRfCommServerConnection.Listen(System.Guid,System.String,System.Byte,System.Boolean,System.Boolean)">
            <summary> The method starts listening for client connections. </summary>
            <param name="Service"> The Bluetooth Service UUID. If the <c>Channel</c>
              parameter is zero, the system attempts to use <c>Service</c> to
              resolve the remote channel corresponding to the service. The service
              class is a normalized 128-bit GUID, defined by the Bluetooth
              specification. Common GUIDs are defined by the Bluetooth Assigned
              Numbers document. Alternatively, a unique GUID may be used for a
              domain-specific application. </param>
            <param name="ServiceName"> The option service name. </param>
            <param name="Channel"> The RFCOMM channel number. If zero the
              <c>Service</c> UUID will be used. </param>
            <param name="Authentication"> Specifies that authentication is required
              for a connect operation to complete successfully. Setting this option
              actively initiates authentication during connection establishment,
              if the two Bluetooth devices were not previously
              authenticated. </param>
            <param name="Encryption"> The option enforces encryption to establish a
              connection. Encryption is only available for authenticated
              connections. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> NOTE: BlueSoleil has limited support for <c>Authentication</c>
              and <c>Encryption.</c>. Also it doe snot support user-defined RFCOMM
              channel number. </remarks>
        </member>
        <member name="P:wclBluetooth.wclRfCommServerConnection.Authentication">
            <summary> Gets the authentication value. </summary>
            <value> <c>True</c> if the connection required authentication.
              <c>False</c> otherwise. </value>
        </member>
        <member name="P:wclBluetooth.wclRfCommServerConnection.AssignedChannel">
            <summary> Gets the assigned RFCOMM channel number. </summary>
            <value> The RFCOMM channel number. </value>
        </member>
        <member name="P:wclBluetooth.wclRfCommServerConnection.Channel">
            <summary> Gets the service RFCOMM channel number. <c>0</c> to
              auto detection. </summary>
            <value> The RFCOMM channel number used for connection. </value>
        </member>
        <member name="P:wclBluetooth.wclRfCommServerConnection.Encryption">
            <summary> Gets the encryption state of the connection. </summary>
            <value> <c>True</c> if the connection is encrypted. <c>False</c>
              otherwise. </value>
        </member>
        <member name="P:wclBluetooth.wclRfCommServerConnection.Radio">
            <summary> Gets the connection owner. </summary>
            <value> The <see cref="T:wclBluetooth.wclBluetoothRadio" /> object owns the
              connection. </value>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
        </member>
        <member name="P:wclBluetooth.wclRfCommServerConnection.Service">
            <summary> Gets the Bluetooth service UUID used for
              connection. </summary>
            <value> A Bluetooth service UUID. </value>
        </member>
        <member name="P:wclBluetooth.wclRfCommServerConnection.ServiceName">
            <summary> Gets the service name. </summary>
            <value> The service name. </value>
        </member>
        <member name="E:wclBluetooth.wclRfCommServerConnection.GetSdpAttributes">
            <summary> The event fires when the server builds SDP record for
              the service it runs. If an application needs to provide
              additional attributes it should handle the event. By default no
              additional attributes is added for the SDP record. </summary>
            <remarks> This event will not fire with BlueSoleil Bluetooth
              driver. BlueSoleil does not support custom SDP records. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothGetSdpAttributesEvent" />
        </member>
        <member name="T:wclBluetooth.wclWiiRemoteClientConnection">
            <summary> The virtual connection represents a Wii Remote
              client. </summary>
            <remarks> <para> The class provides methods to receive data from
              the Wii Remote controller. </para>
              <para> An application must never create instances of this class
              directly. Instead of that an application must use related methods
              from the <see cref="T:wclBluetooth.wclBluetoothRadio" /> object. </para>
              <para> The feature is supported only on Windows 10 platform with
              Microsoft Bluetooth drivers. </para> </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
            <seealso cref="T:wclCommunication.wclClientConnection" />
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClientConnection.ProcessReport(System.Byte[])">
            <summary> The function parses the received report. </summary>
            <param name="Report"> A pointer to the report data. </param>
            <remarks> The method must be called from the communication thread
              to process received reports. </remarks>
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClientConnection.MessageReceived(wclCommon.wclMessage)">
            <summary> The method called when a new notification message
              received. </summary>
            <param name="Message"> A <see cref="T:wclCommon.wclMessage" /> object
              represents a notification message. </param>
            <remarks> <para> This method is for internal use only. </para>
              <para> If a derived class overrides this method it must always call
              the inherited implementation first. </para> </remarks>
            <seealso cref="T:wclCommon.wclMessage" />
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClientConnection.HalConnect(System.IntPtr)">
            <summary> Implements a hardware-dependent code that connects to a
              remote device. </summary>
            <param name="Event"> The system even object handle. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> <para> Derived classes must override this method to implement
              a hardware-dependent code that connects to a remote device. </para>
              <para> The method executes in a separate thread. </para>
              <para> The method implementation must monitor the <c>Event</c>
              parameter. The <c>Event</c> parameter is set if the
              <c>Disconnect</c> method was called. If the termination event was set
              the method must terminate connection operation. </para>
              <para> If connection to a remote device was terminated the method
              must release all allocated resources because the <c>HalDisconnect</c>
              will not be called. </para>
              <para> A derived class must always call inherited
              method. </para> </remarks>
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClientConnection.HalDisconnect">
            <summary> Implements a hardware-dependent code that disconnects from the
              connected remote device. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> <para> The method is called only if a connection to a remote
              device was established with success (the <c>Connect</c> method was
              success). </para>
              <para> The method will not be called if the connection to the  remote
              device was terminated in the middle of the <c>HalConnect</c>
              method. </para>
              <para> A derived HalConnect implementation <c>must</c> always call
              the <c>HalConnect</c> method first, before any other connection
              operation. If the connection is failed the derived implementation
              <c>must</c> always call inherited <c>HalDisconnect</c> method. </para>
              <para> A derived class must always call inherited
              method. </para> </remarks>
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClientConnection.HalWrite(System.Byte[])">
            <summary> Implements a hardware-dependent code that writes data report
              to the connected Wii Remote controller. </summary>
            <param name="Report"> The pointer to the report data buffer. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> <para> A derived class must override this method to implement
              a hardware-dependent code that sends data to the connected device.
              The method executes in the main thread and must be
              synchronous. </para>
              <para> A derived implementation must always call this method in case
              of the derived <c>HalConnect</c> failed. </para> </remarks>
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClientConnection.DoAccelChanged(wclBluetooth.wclWiiRemoteAccel)">
            <summary> Fire the <c>OnAccelChanged</c> event. </summary>
            <param name="Accel"> The current accelerometer data. </param>
            <seealso cref="T:wclBluetooth.wclWiiRemoteAccel" />
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClientConnection.DoBalanceBoardChanged(wclBluetooth.wclWiiRemoteBalanceBoard)">
            <summary> Fires the <c>OnBalanceBoardChanged</c> event </summary>
            <param name="Board"> The new Balance Board extension
              state. </param>
            <seealso cref="T:wclBluetooth.wclWiiRemoteBalanceBoard" />
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClientConnection.DoButtonsChanged(wclBluetooth.wclWiiRemoteButtons)">
            <summary> Fires the <c>OnButtonsChanged</c> event. </summary>
            <param name="Buttons"> The new buttons state. </param>
            <seealso cref="T:wclBluetooth.wclWiiRemoteButtons" />
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClientConnection.DoClassicControllerChanged(wclBluetooth.wclWiiRemoteClassicController)">
            <summary> Fires the <c>OnClassicControllerChanged</c> event. </summary>
            <param name="Controller"> The current state of the Wii Remote Classic
              Controller extension. </param>
            <seealso cref="T:wclBluetooth.wclWiiRemoteClassicController" />
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClientConnection.DoConnect(System.Int32)">
            <summary> Fires the <c>OnConnect</c> event. </summary>
            <param name="Error"> The connection operation result code. If the
              parameter is <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" /> the connection to a remote
              device was established and the remote device is connected. Otherwise
              the connection was not established and the remote device is
              not connected. </param>
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClientConnection.DoDisconnect(System.Int32)">
            <summary> Fires the <c>OnDisconnect</c> event. </summary>
            <param name="Reason"> The disconnection code. If the
              parameter is <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" /> the connection was closed
              by the <c>Disconnect</c> call. Otherwise indicates the disconnection
              reason. </param>
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClientConnection.DoDrumsChanged(wclBluetooth.wclWiiRemoteDrums)">
            <summary> Fires the <c>OnDrumsChanged</c> event. </summary>
            <param name="Drums"> The current state of the Drums extension. </param>
            <seealso cref="T:wclBluetooth.wclWiiRemoteDrums" />
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClientConnection.DoExtensionAttached">
            <summary> Fires the <c>OnExtensionAttached</c> event. </summary>
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClientConnection.DoExtensionDetached">
            <summary> Fires the <c>OnExtensionDetached</c> event. </summary>
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClientConnection.DoGuitarChanged(wclBluetooth.wclWiiRemoteGuitar)">
            <summary> Fires the <c>OnGuitarChanged</c> event. </summary>
            <param name="Guitar"> The current Guitar extension state. </param>
            <seealso cref="T:wclBluetooth.wclWiiRemoteGuitar" />
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClientConnection.DoIrChanged(wclBluetooth.wclWiiRemoteIrSensors)">
            <summary> Fires the <c>OnIrChanged</c> event. </summary>
            <param name="Ir"> The IR sensor data. </param>
            <seealso cref="T:wclBluetooth.wclWiiRemoteIrSensors" />
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClientConnection.DoNunchukChanged(wclBluetooth.wclWiiRemoteNunchuk)">
            <summary> Fires the <c>OnNunchukChanged</c> event. </summary>
            <param name="Nunchuk"> The current Nunchuk extension state. </param>
            <seealso cref="T:wclBluetooth.wclWiiRemoteNunchuk" />
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClientConnection.DoStatusChanged(System.Double,wclBluetooth.wclWiiRemoteLeds)">
            <summary> Fires the <c>OnStatusChanged</c> event. </summary>
            <param name="Batt"> The WeDo Remote battery level. </param>
            <param name="Leds"> The We Do Remote LEDs state. </param>
            <seealso cref="T:wclBluetooth.wclWiiRemoteLeds" />
        </member>
        <member name="P:wclBluetooth.wclWiiRemoteClientConnection.DisconnectEvent">
            <summary> Gets the disconnect event object. </summary>
            <value> The disconnect event object. </value>
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClientConnection.#ctor(wclBluetooth.wclBluetoothRadio)">
            <summary> Create new Wii Remote client connection. </summary>
            <param name="Radio"> The Radio object that owns the connection. </param>
            <remarks> <para> An application must never create this class directly.
              Instead of that an application must use upper-level methods and
              classes. </para>
              <para> If the <c>Radio</c> parameter is <c>nil</c> the
              <see cref="T:wclCommon.wclECritical" /> exception raises. </para> </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
            <exception cref="T:wclCommon.wclECritical" />
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClientConnection.Connect(System.Int64,System.UInt32)">
            <summary> Connects to a remote device. </summary>
            <param name="Address"> The remote Bluetooth device address. </param>
            <param name="Timeout"> The connect timeout in milliseconds. The
              default value is 10000 milliseconds. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> <para> The method starts a connection operation to a remote
              device. If the method success that does not mean that the connection
              was established. That just means that the connection operation was
              started. The real connection result will be passed to the
              <c>OnConnect</c> event handler. </para>
              <para> NOTE: BlueSoleil does not support <c>Authentication</c>
              and <c>Encryption</c> parameters per connection. </para> </remarks>
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClientConnection.GetStatus">
            <summary> Requests the Wii Remote status. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> This is asynchronous method. When operation completes the
              <c>OnStatusChanged</c> event fires. </remarks>
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClientConnection.SetLeds(wclBluetooth.wclWiiRemoteLeds)">
            <summary> Changes the Wii Remote LEDs state. </summary>
            <param name="Leds"> The new LEDs state. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclBluetooth.wclWiiRemoteLeds" />
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClientConnection.SetLeds(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Changes the Wii Remote LEDs state. </summary>
            <param name="Led1"> The new LED 1 state. </param>
            <param name="Led2"> The new LED 2 state. </param>
            <param name="Led3"> The new LED 3 state. </param>
            <param name="Led4"> The new LED 4 state. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>/>
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClientConnection.SetRumble(System.Boolean)">
            <summary> Turns the Rumble On and Off. </summary>
            <param name="TurnOn"> Set to <c>True</c> to turn the Rumble On. Set
              to <c>False</c> to turn the Rumble Off. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClientConnection.EnableAccel">
            <summary> Enables accelerometer. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClientConnection.DisableAccel">
            <summary> Disables accelerometer. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClientConnection.SetIrSensitivity(wclBluetooth.wclWiiRemoteIrSensitivity)">
            <summary> Sets IR IR sensor sensitivity (and turns it ON or
              OFF). </summary>
            <param name="Sensitivity"> The IR sensor sensitivity. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclBluetooth.wclWiiRemoteIrSensitivity" />
        </member>
        <member name="P:wclBluetooth.wclWiiRemoteClientConnection.Address">
            <summary> Gets a remote device MAC address. </summary>
            <value> The remote device MAC address. </value>
        </member>
        <member name="P:wclBluetooth.wclWiiRemoteClientConnection.AccelEnabled">
            <summary> Gets the current accelerometer status. </summary>
            <value> <c>True</c> if the accelerometer is enabled. <c>False</c>
              otherwise. </value>
        </member>
        <member name="P:wclBluetooth.wclWiiRemoteClientConnection.Extension">
            <summary> Gets the current connected extension type. </summary>
            <value> The currently connected extension. </value>
            <seealso cref="T:wclBluetooth.wclWiiRemoteExtension" />
        </member>
        <member name="P:wclBluetooth.wclWiiRemoteClientConnection.IrMode">
            <summary> Gets the current IR sensor mode. </summary>
            <value> The IR sensor mode. </value>
            <seealso cref="T:wclBluetooth.wclWiiRemoteIrMode" />
        </member>
        <member name="P:wclBluetooth.wclWiiRemoteClientConnection.IrSensitivity">
            <summary> Gets the current IR sensor sensitivity. </summary>
            <value> The IR sensor sensitivity. </value>
            <seealso cref="T:wclBluetooth.wclWiiRemoteIrSensitivity" />
        </member>
        <member name="P:wclBluetooth.wclWiiRemoteClientConnection.Leds">
            <summary> Gets the current LEDs state. </summary>
            <value> The LEDs state. </value>
            <seealso cref="T:wclBluetooth.wclWiiRemoteLeds" />
        </member>
        <member name="P:wclBluetooth.wclWiiRemoteClientConnection.Radio">
            <summary> Gets the connection owner. </summary>
            <value> The <see cref="T:wclBluetooth.wclBluetoothRadio" /> object owns the
              connection. </value>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
        </member>
        <member name="P:wclBluetooth.wclWiiRemoteClientConnection.Rumble">
            <summary> Gets the current Rumble status. </summary>
            <value> <c>True</c> if the Rumble is turned ON. </value>
        </member>
        <member name="E:wclBluetooth.wclWiiRemoteClientConnection.OnAccelChanged">
            <summary> The event fires when the accelerometer state has been
              changed. </summary>
            <seealso cref="T:wclBluetooth.wclWiiRemoteAccelChangedEvent" />
        </member>
        <member name="E:wclBluetooth.wclWiiRemoteClientConnection.OnBalanceBoardChanged">
            <summary> The event fires when the stat eof the Balance Board extension
              has been changed. </summary>
            <seealso cref="T:wclBluetooth.wclWiiRemoteBalanceBoardChangedEvent" />
        </member>
        <member name="E:wclBluetooth.wclWiiRemoteClientConnection.OnButtonsChanged">
            <summary> The event fires when the buttons state of the Wii Remote
              controller has been changed. </summary>
            <seealso cref="T:wclBluetooth.wclWiiRemoteButtonsChangedEvent" />
        </member>
        <member name="E:wclBluetooth.wclWiiRemoteClientConnection.OnClassicControllerChanged">
            <summary> The event fires when a Classic Controller extension state has
              been changed. </summary>
            <seealso cref="T:wclBluetooth.wclWiiRemoteClassicControllerChangedEvent" />
        </member>
        <member name="E:wclBluetooth.wclWiiRemoteClientConnection.OnDrumsChanged">
            <summary> The event fires when the Drums extension state has been
              changed. </summary>
            <seealso cref="T:wclBluetooth.wclWiiRemoteDrumsChangedEvent" />
        </member>
        <member name="E:wclBluetooth.wclWiiRemoteClientConnection.OnExtensionAttached">
            <summary> The event fires when the extension is attached. </summary>
        </member>
        <member name="E:wclBluetooth.wclWiiRemoteClientConnection.OnExtensionDetached">
            <summary> The event fires when the extension has been
              detached. </summary>
        </member>
        <member name="E:wclBluetooth.wclWiiRemoteClientConnection.OnGuitarChanged">
            <summary> The event fires when the Guitar extension state has been
              changed. </summary>
            <seealso cref="T:wclBluetooth.wclWiiRemoteGuitarChangedEvent" />
        </member>
        <member name="E:wclBluetooth.wclWiiRemoteClientConnection.OnIrChanged">
            <summary> The event fires when the IR sensor data has been
              changed. </summary>
            <seealso cref="T:wclBluetooth.wclWiiRemoteIrChangedEvent" />
        </member>
        <member name="E:wclBluetooth.wclWiiRemoteClientConnection.OnNunchukChanged">
            <summary> The event fires when the state of the Nunchuk extension has
              been changed. </summary>
            <seealso cref="T:wclBluetooth.wclWiiRemoteNunchukChangedEvent" />
        </member>
        <member name="E:wclBluetooth.wclWiiRemoteClientConnection.OnStatusChanged">
            <summary> The event fires when the WeDo Remote status
              changed. </summary>
            <seealso cref="T:wclBluetooth.wclWiiRemoteStatusChangedEvent" />
        </member>
        <member name="T:wclBluetooth.wclWiiRemoteHidClientConnection">
            <summary> The virtual connection represents a Wii Remote HID
              client. </summary>
            <remarks> <para> The class provides methods to receive data from
              the Wii Remote controller. </para>
              <para> An application must never create instances of this class
              directly. Instead of that an application must use related methods
              from the <see cref="T:wclBluetooth.wclBluetoothRadio" /> object. </para>
              <para> The feature is supported only on Windows 10 platform with
              Microsoft Bluetooth drivers. </para> </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
            <seealso cref="T:wclBluetooth.wclWiiRemoteClientConnection" />
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteHidClientConnection.HalConnect(System.IntPtr)">
            <summary> Connects to the Wii Remote as to HID device. </summary>
            <param name="Event"> The system even object handle. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteHidClientConnection.HalCommunicate(System.IntPtr)">
            <summary> Communicates with the Wii Remote as with HID
              device. </summary>
            <param name="Event"> The system even object handle (disconnect
              event). </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteHidClientConnection.HalDisconnect">
            <summary> Disconnects from the Wii Remote as from HID device. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteHidClientConnection.HalWrite(System.Byte[])">
            <summary> Sends data to the Wii Remote as to HID device. </summary>
            <param name="Report"> The pointer to the report data buffer. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteHidClientConnection.#ctor(wclBluetooth.wclBluetoothRadio)">
            <summary> Create new Wii Remote HID client connection. </summary>
            <param name="Radio"> The Radio object that owns the connection. </param>
            <remarks> <para> An application must never create this class directly.
              Instead of that an application must use upper-level methods and
              classes. </para>
              <para> If the <c>Radio</c> parameter is <c>nil</c> the
              <see cref="T:wclCommon.wclECritical" /> exception raises. </para> </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
            <exception cref="T:wclCommon.wclECritical" />
        </member>
        <member name="T:wclBluetooth.wclBluetoothConstants">
            <summary> Some useful constants. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothConstants.WCL_WII_REMOTE_REPORT_LENGTH">
            <summary> Wii Remote HID report length. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothConstants.WCL_BLE_MIN_SCAN_INTERVAL">
            <summary> The minimum allowed scan interval value (2.5ms) </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothConstants.WCL_BLE_MAX_SCAN_INTERVAL">
            <summary> The maximum allowed scan interval value (10.24s) </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothConstants.WCL_BLE_DEFAULT_SCAN_INTERVAL">
            <summary> Default BLE scan interval value (118.125ms). </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothConstants.WCL_BLE_MIN_SCAN_WINDOW">
            <summary> The minimum allowed scan window value (2.5ms) </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothConstants.WCL_BLE_MAX_SCAN_WINDOW">
            <summary> The maximum allowed scan window value (10.24s) </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothConstants.WCL_BLE_DEFAULT_SCAN_WINDOW">
            <summary> Default BLE scan window value (18.125ms). </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothConstants.WCL_BLE_MIN_ADVERTISING_INTERVAL">
            <summary> The minimum allowed advertising interval (20ms) </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothConstants.WCL_BLE_MAX_ADVERTISING_INTERVAL">
            <summary> The maximum allowed advertising interval (10.24s) </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothConstants.WCL_BLE_DEFAULT_ADVERTISING_INTERVAL">
            <summary> Default BLE advertising interval (100ms). </summary>
        </member>
        <member name="T:wclBluetooth.wclAudioDefaultDeviceChangedEvent">
            <summary> The Audio Switcher <c>OnDefaultDeviceChanged</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Id"> The device ID. </param>
            <param name="Flow"> The device data flow. </param>
            <param name="Role"> The device role. </param>
            <seealso cref="T:wclBluetooth.wclAudioDeviceDataFlow" />
            <seealso cref="T:wclBluetooth.wclAudioDeviceRole" />
        </member>
        <member name="T:wclBluetooth.wclAudioDeviceEvent">
            <summary> The Audio Switcher <c>OnDeviceAdded</c> and
              <c>OnDeviceRemoved</c> events handler prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Id"> The device ID. </param>
        </member>
        <member name="T:wclBluetooth.wclAudioDeviceStateChangedEvent">
            <summary> The Audio Switcher <c>OnStateChanged</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Id"> The device ID. </param>
            <param name="State"> The new device state. </param>
            <seealso cref="T:wclBluetooth.wclAudioDeviceState" />
        </member>
        <member name="T:wclBluetooth.wclBluetoothConfirmEvent">
            <summary> The <c>OnConfirm</c> event handler prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Radio"> A <see cref="T:wclBluetooth.wclBluetoothRadio" /> object
              represents a Bluetooth driver that fired the event. </param>
            <param name="Address"> A remote device's MAC address. </param>
            <param name="Confirm"> An application must set this parameter to
              <c>True</c> to confirm pairing. Set it to <c>False</c> to reject
              pairing. </param>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
        </member>
        <member name="T:wclBluetooth.wclBluetoothDeviceEvent">
            <summary> The common event for notifications when a remote device's
              MAC address required. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Radio"> A <see cref="T:wclBluetooth.wclBluetoothRadio" /> object
              represents a Bluetooth driver that fired the event. </param>
            <param name="Address"> A remote device's MAC address. </param>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
        </member>
        <member name="T:wclBluetooth.wclBluetoothDeviceResultEvent">
            <summary> The common event handler prototype used for a remote
              Bluetooth device's operations result notifications. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Radio"> A <see cref="T:wclBluetooth.wclBluetoothRadio" /> object
              represents a Bluetooth driver that fired the event. </param>
            <param name="Address"> A remote device's MAC address. </param>
            <param name="Error"> An operation result code. </param>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
        </member>
        <member name="T:wclBluetooth.wclBluetoothIoCapabilityRequestEvent">
            <summary> The <c>OnIoCapabilityRequest</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Radio"> A <see cref="T:wclBluetooth.wclBluetoothRadio" /> object
              represents a Bluetooth driver that fired the event. </param>
            <param name="Address"> A remote device's MAC address. </param>
            <param name="Mitm"> An application sets this parameter to specify the
              "Man in the Middle" protection required for authentication. </param>
            <param name="IoCapability"> An application sets this parameter to define
              the input/output capabilities of a Bluetooth Device. </param>
            <param name="OobPresent"> An application sets this parameter to
              <c>True</c> to force Out Of Band authentication. </param>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
            <seealso cref="T:wclBluetooth.wclBluetoothMitmProtection" />
            <seealso cref="T:wclBluetooth.wclBluetoothIoCapability" />
        </member>
        <member name="T:wclBluetooth.wclBluetoothEvent">
            <summary> The common Bluetooth event handler prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Radio"> A <see cref="T:wclBluetooth.wclBluetoothRadio" /> object
              represents a Bluetooth driver that fired the event. </param>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
        </member>
        <member name="T:wclBluetooth.wclBluetoothNumericComparisonEvent">
            <summary> The <c>OnNumericComparison</c> event handler prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Radio"> A <see cref="T:wclBluetooth.wclBluetoothRadio" /> object
              represents a Bluetooth driver that fired the event. </param>
            <param name="Address"> A remote device's MAC address. </param>
            <param name="Number"> A number sent by a remote device to display and
              compare. </param>
            <param name="Confirm"> An application must set this parameter to
              <c>True</c> to confirm pairing. Set it to <c>False</c> to reject
              pairing. </param>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
        </member>
        <member name="T:wclBluetooth.wclBluetoothOobDataRequestEvent">
            <summary> The <c>OnOobDataRequest</c> event handler prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Radio"> A <see cref="T:wclBluetooth.wclBluetoothRadio" /> object
              represents a Bluetooth driver that fired the event. </param>
            <param name="Address"> A remote device's MAC address. </param>
            <param name="OobData"> An application must set this parameter to
              the Out Of Band data received from peer device. </param>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
            <seealso cref="T:wclBluetooth.wclBluetoothOobData" />
        </member>
        <member name="T:wclBluetooth.wclBluetoothPasskeyNotificationEvent">
            <summary> The <c>OnPasskeyNotification</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Radio"> A <see cref="T:wclBluetooth.wclBluetoothRadio" /> object
              represents a Bluetooth driver that fired the event. </param>
            <param name="Address"> A remote device's MAC address. </param>
            <param name="Passkey"> A Passkey provided by a remote
              Bluetooth device. </param>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
        </member>
        <member name="T:wclBluetooth.wclBluetoothPasskeyRequestEvent">
            <summary> The <c>OnPasskeyRequest</c> event handler prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Radio"> A <see cref="T:wclBluetooth.wclBluetoothRadio" /> object
              represents a Bluetooth driver that fired the event. </param>
            <param name="Address"> A remote device's MAC address. </param>
            <param name="Passkey"> A Passkey provided by an application. </param>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
        </member>
        <member name="T:wclBluetooth.wclBluetoothPinRequestEvent">
            <summary> The <c>OnPinRequest</c> event handler prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Radio"> A <see cref="T:wclBluetooth.wclBluetoothRadio" /> object
              represents a Bluetooth driver that fired the event. </param>
            <param name="Address"> A remote device's MAC address. </param>
            <param name="Pin"> A PIN code provided by an application. </param>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
        </member>
        <member name="T:wclBluetooth.wclBluetoothProtectionLevelRequestEvent">
            <summary> The <c>OnProtectionLevelRequest</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Radio"> A <see cref="T:wclBluetooth.wclBluetoothRadio" /> object
              represents a Bluetooth driver that fired the event. </param>
            <param name="Address"> A remote device's MAC address. </param>
            <param name="Protection"> Describes the required protection
              level provided by an application. </param>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
            <seealso cref="T:wclBluetooth.wclBluetoothLeProtectionLevel" />
        </member>
        <member name="T:wclBluetooth.wclBluetoothResultEvent">
            <summary> The common Bluetooth result even handler prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Radio"> A <see cref="T:wclBluetooth.wclBluetoothRadio" /> object
              represents a Bluetooth driver that fired the event. </param>
            <param name="Error"> An operation result code. </param>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
        </member>
        <member name="T:wclBluetooth.wclBluetoothGetSdpAttributesEvent">
            <summary> The <c>GetSdpAttributes</c> event handler prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Protocols"> The additional protocol descriptors array that
              should be added to SDP record. </param>
            <param name="Profiles"> The profile descriptors list that should be added
              to SDP record. </param>
            <param name="Formats"> Other attributes that should be added to SDP
              record. </param>
            <param name="Cod"> <para> Class of device (COD) information. A 32-bit
              parameter of COD_SERVICE_* class of device bits associated with this
              SDP record. The system combines these bits with COD bits from other
              service records and system characteristics. The resulting class of
              device for the local radio is advertised when the radio is found during
              device inquiry. When the last SDP record associated with a particular
              service bit is deleted, that service bit is no longer reported in
              responses to future device inquiries. </para>
              <para> The format and possible values for the COD field are defined in
              the Bluetooth Assigned Numbers 1.1 portion of the Bluetooth
              specification, Section 1.2. (This resource may not be available in some
              languages and countries.) </para> </param>
            <seealso cref="T:wclBluetooth.wclBluetoothSdpProfile" />
        </member>
        <member name="T:wclBluetooth.wclRfCommServerConnectEvent">
            <summary> The prototype of the <c>OnConnect</c> event handler for RFCOMM
              server. </summary>
            <param name="Sender"> The object that initiated the event. </param>
            <param name="Client"> The
              <see cref="T:wclBluetooth.wclRfCommServerClientConnection" /> represents a remote
              connected client. </param>
            <param name="Error"> The connection operation result code. If the
              parameter is <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" /> the connection to a remote
              device was established and the remote device is connected. Otherwise
              the connection was not established and the remote device is
              not connected. </param>
            <seealso cref="T:wclBluetooth.wclRfCommServerClientConnection" />
        </member>
        <member name="T:wclBluetooth.wclRfCommServerDataEvent">
            <summary> A server connection <c>OnData</c> event handler
              prototype. </summary>
            <param name="Sender"> The object that initiated the event. </param>
            <param name="Client"> A
              <see cref="T:wclBluetooth.wclRfCommServerClientConnection" /> object
              represents a remote client connection. </param>
            <param name="Data"> The pointer to the received data buffer.
              It is guaranteed that the parameter points to a valid data buffer.
              The data buffer is valid only inside the event handler. If an
              application needs to use the data outside the event handle it must
              allocate own buffer and copy data into it. </param>
            <seealso cref="T:wclBluetooth.wclRfCommServerClientConnection" />
        </member>
        <member name="T:wclBluetooth.wclRfCommServerDisconnectEvent">
            <summary> The prototype of the <c>OnDisconnect</c> event handler for
              server connections. </summary>
            <param name="Sender"> The object that initiated the event. </param>
            <param name="Client"> The
              <see cref="T:wclBluetooth.wclRfCommServerClientConnection" /> represents a remote
              connected client. </param>
            <param name="Reason"> The disconnection code. If the
              parameter is <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" /> the connection was closed
              by the <c>Disconnect</c> call. Otherwise indicates the disconnection
              reason. </param>
            <seealso cref="T:wclBluetooth.wclRfCommServerClientConnection" />
        </member>
        <member name="T:wclBluetooth.wclGattCharacteristicChangedEvent">
            <summary> The <c>OnCharacteristicChanged</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Handle"> A changed characteristic handle. </param>
            <param name="Value"> A characteristic value. </param>
            <remarks> The <c>Value</c> parameter is valid only inside the event
              handler. If an application needs to use it outside the event handler
              it must be copied. </remarks>
        </member>
        <member name="T:wclBluetooth.wclGattServerClientEvent">
            <summary> The GATT server client event handlers prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Client"> The <see cref="T:wclBluetooth.wclGattServerClient" /> object that
              represents a GATT server client. </param>
            <remarks> This event handler prototype is used for
              <c>OnClientConnected</c> and <c>OnClientDisconnected</c> events of the
              GATT server. </remarks>
            <seealso cref="T:wclBluetooth.wclGattServerClient" />
        </member>
        <member name="T:wclBluetooth.wclGattLocalCharacteristicReadEvent">
            <summary> The <c>OnRead</c> characteristic's event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Client"> The <see cref="T:wclBluetooth.wclGattServerClient" /> object that
              requested read. </param>
            <param name="Characteristic"> The characteristic object for which writes
              is executing. </param>
            <param name="Request"> The GATT read request object. </param>
            <seealso cref="T:wclBluetooth.wclGattServerClient" />
            <seealso cref="T:wclBluetooth.wclGattLocalCharacteristic" />
            <seealso cref="T:wclBluetooth.wclGattLocalCharacteristicReadRequest" />
        </member>
        <member name="T:wclBluetooth.wclGattLocalCharacteristicWriteEvent">
            <summary> The <c>OnWrite</c> characteristic's event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Client"> The <see cref="T:wclBluetooth.wclGattServerClient" /> object that
              requested write. </param>
            <param name="Characteristic"> The characteristic object for which writes
              is executing. </param>
            <param name="Request"> The GATT characteristic write request object. </param>
            <seealso cref="T:wclBluetooth.wclGattServerClient" />
            <seealso cref="T:wclBluetooth.wclGattLocalCharacteristic" />
            <seealso cref="T:wclBluetooth.wclGattLocalCharacteristicWriteRequest" />
        </member>
        <member name="T:wclBluetooth.wclGattLocalCharacteristicSubscribedClientsChangedEvent">
            <summary> The <c>OnClientSubscribed</c> and <c>OnClientUnsubscribed</c>
              events handler prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Client"> The <see cref="T:wclBluetooth.wclGattServerClient" /> object that
              subscribed or unsubscribed. </param>
            <param name="Characteristic"> The characteristic object for which writes
              is executing. </param>
            <seealso cref="T:wclBluetooth.wclGattServerClient" />
            <seealso cref="T:wclBluetooth.wclGattLocalCharacteristic" />
        </member>
        <member name="T:wclBluetooth.wclBluetoothLeAdvertisementFrameInformationEvent">
            <summary> The <c>OnAdvertisementFrameInformation</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Address"> The Bluetooth LE advertiser's MAC address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="Name"> The Bluetooth LE advertiser's name. </param>
            <param name="PacketType"> The Bluetooth LE advertisement data packet
              type. </param>
            <param name="Flags"> The Bluetooth LE advertisement packet payload
              flags. </param>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisementType" />
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisementFlag" />
        </member>
        <member name="T:wclBluetooth.wclBluetoothLeAdvertisementExtFrameInformationEvent">
            <summary> The <c>OnAdvertisementExtFrameInformation</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Address"> The Bluetooth LE advertiser's MAC address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="AddressType"> The Bluetooth LE address type. </param>
            <param name="TxPower"> The received transmit power of the
              advertisement. Ranges from -127 dBm to 20 dBm. -128 indicates
              "no value". </param>
            <param name="Flags"> The Bluetooth LE advertisement extended frame
              flags. </param>
            <seealso cref="T:wclBluetooth.wclBluetoothAddressType" />
            <seealso cref="T:wclBluetooth.wclBluetoothLeExtendedFrameFlag" />
        </member>
        <member name="T:wclBluetooth.wclBluetoothLeAdvertisementRawFrameEvent">
            <summary> The <c>OnAdvertisementRawFrame</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Address"> The Bluetooth LE advertiser's MAC address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="DataType"> The frame's data type. </param>
            <param name="Data"> The frame's raw bytes data. If there is no data the
              value is <c>null</c>. </param>
        </member>
        <member name="T:wclBluetooth.wclBluetoothLeAdvertisementReceivedEvent">
            <summary> The <c>OnAdvertisementReceived</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Address"> The Bluetooth LE advertiser's MAC address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="Data"> The frame's raw bytes data. If there is no data the
              value is <c>nil</c>. </param>
        </member>
        <member name="T:wclBluetooth.wclBluetoothLeAdvertisementService16DataFrameEvent">
            <summary> The <c>OnService16DataFrame</c> event handler prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Address"> The Bluetooth LE advertiser's MAC address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="Uuid"> The 16 bits service UUID. </param>
            <param name="Data"> The service data. </param>
        </member>
        <member name="T:wclBluetooth.wclBluetoothLeAdvertisementService32DataFrameEvent">
            <summary> The <c>OnService32DataFrame</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Address"> The Bluetooth LE advertiser's MAC address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="Uuid"> The 32 bits service UUID. </param>
            <param name="Data"> The service data. </param>
        </member>
        <member name="T:wclBluetooth.wclBluetoothLeAdvertisementService128DataFrameEvent">
            <summary> The <c>OnService128DataFrame</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Address"> The Bluetooth LE advertiser's MAC address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="Uuid"> The 128 bits service UUID. </param>
            <param name="Data"> The service data. </param>
        </member>
        <member name="T:wclBluetooth.wclBluetoothLeAdvertisementServiceSol16FrameEvent">
            <summary> The <c>OnServiceSol16Frame</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Address"> The Bluetooth LE advertiser's MAC address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="Uuid"> The 16 bits service UUID. </param>
        </member>
        <member name="T:wclBluetooth.wclBluetoothLeAdvertisementServiceSol32FrameEvent">
            <summary> The <c>OnServiceSol32Frame</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Address"> The Bluetooth LE advertiser's MAC address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="Uuid"> The 32 bits service UUID. </param>
        </member>
        <member name="T:wclBluetooth.wclBluetoothLeAdvertisementServiceSol128FrameEvent">
            <summary> The <c>OnServiceSol128Frame</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Address"> The Bluetooth LE advertiser's MAC address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="Uuid"> The 128 bits service UUID. </param>
        </member>
        <member name="T:wclBluetooth.wclBluetoothLeAdvertisementUuidFrameEvent">
            <summary> The <c>OnAdvertisementUuidFrame</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Address"> The Bluetooth LE advertiser's MAC address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="Uuid"> The advertised UUID value. </param>
        </member>
        <member name="T:wclBluetooth.wclBluetoothLeAltBeaconFrameEvent">
            <summary> The <c>OnAltBeaconFrame</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Address"> The Bluetooth LE advertiser's MAC address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="CompanyId"> The beacon's manufacturer ID as defined in the
              Bluetooth SIG Assigned Numbers. </param>
            <param name="Major"> The beacon's Major value. </param>
            <param name="Minor"> The beacon's Minor value. </param>
            <param name="Uuid"> The beacon's UUID. </param>
            <param name="TxRssi"> The beacon's RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution measured at 1 meter
              distance. </param>
            <param name="Reserved"> A 1-byte value from 0x00 to 0xFF. Interpretation
              of this value is to be defined by the manufacturer and is to be
              evaluated based on the CompanyId value. </param>
            <param name="Data"> The additional frame data. </param>
        </member>
        <member name="T:wclBluetooth.wclBluetoothLeEddystoneTlmFrameEvent">
            <summary> The <c>OnEddystoneTlmFrame</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Address"> The Bluetooth LE advertiser's MAC address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="AdvCnt"> The running count of advertisement frames of all
              types emitted by the beacon since power-up or reboot, useful for
              monitoring performance metrics that scale per broadcast frame.
              If this value is reset (e.g. on reboot), the current time field is
              also reset. </param>
            <param name="Batt"> The current battery charge in millivolts, expressed as
              1 mV per bit. If not supported (for example in a USB-powered beacon) the
              value should be zeroed. </param>
            <param name="SecCnt"> The 0.1 second resolution counter that represents
              time since beacon power-up or reboot. If this value is reset (e.g. on
              a reboot), the AdvCnt count field is also reset. </param>
            <param name="Temp"> The beacon temperature in degrees Celsius sensed by
              the beacon. If not supported the value is -128 °C. </param>
            <param name="Data"> The additional frame data. </param>
        </member>
        <member name="T:wclBluetooth.wclBluetoothLeEddystoneUidFrameEvent">
            <summary> The <c>OnEddystoneUidFrame</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Address"> The Bluetooth LE advertiser's MAC address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="TxRssi"> The beacon's RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution measured at 0 meter
              distance. </param>
            <param name="Uuid"> The Eddystone ID: 10 bytes - Namespace ID and 6
              bytes - Instance ID. </param>
            <param name="Data"> The additional frame data. </param>
        </member>
        <member name="T:wclBluetooth.wclBluetoothLeEddystoneUrlFrameEvent">
            <summary> The <c>OnEddystoneUrlFrame</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Address"> The Bluetooth LE advertiser's MAC address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="TxRssi"> The beacon's RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution measured at 0 meter
              distance. </param>
            <param name="Url"> The Eddystone URL. </param>
        </member>
        <member name="T:wclBluetooth.wclBluetoothLeManufacturerRawFrameEvent">
            <summary> The <c>OnManufacturerRawFrame</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Address"> The Bluetooth LE advertiser's MAC address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="CompanyId"> The beacon's manufacturer ID as defined in the
              Bluetooth SIG Assigned Numbers. </param>
            <param name="Data"> The frame raw data. The value can be <c>null</c> if
              there is no any data available in the frame. </param>
        </member>
        <member name="T:wclBluetooth.wclBluetoothLeProximityBeaconFrameEvent">
            <summary> The <c>OnProximityBeaconFrame</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Address"> The Bluetooth LE advertiser's MAC address. </param>
            <param name="Timestamp"> The frame's timestamp in Universal Time
              format. </param>
            <param name="Rssi"> The measured RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution. </param>
            <param name="CompanyId"> The beacon's manufacturer ID as defined in the
              Bluetooth SIG Assigned Numbers. </param>
            <param name="Major"> The beacon's Major value. </param>
            <param name="Minor"> The beacon's Minor value. </param>
            <param name="Uuid"> The beacon's UUID. </param>
            <param name="TxRssi"> The beacon's RSSI value in dBm at range between -100
              dBm and +20 dBm at 1 dBm resolution measured at 1 meter
              distance. </param>
            <param name="Data"> The additional frame data. </param>
        </member>
        <member name="T:wclBluetooth.wclBleSnifferAdvDirectIndReceivedEvent">
            <summary> The BLE sniffer <c>OnAdvDirectIndReceived</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="PduHeader"> The PDU header. </param>
            <param name="AdvA"> The advertiser address. </param>
            <param name="TargetA"> The address of the device to which this PDU
              is addressed. </param>
            <remarks> The <c>TxAdd</c> field of the <c>PduHeader</c> parameter
              indicates whether the advertiser’s address in the <c>AdvA</c>
              parameter is public (TxAdd = False) or random (TxAdd = True).
              The <c>RxAdd</c> field of the <c>PduHeader</c> parameter indicates
              whether the target’s address in the <c>TargetA</c> parameter is
              public (RxAdd = False) or random (RxAdd = True). The <c>ChSel</c> field
              in the <c>PduHeader</c> parameter is <c>True</c> if the advertiser
              supports the LE Channel Selection Algorithm #2 feature. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisingPduHeader" />
        </member>
        <member name="T:wclBluetooth.wclBleSnifferAdvIndReceivedEvent">
            <summary> The BLE sniffer <c>OnAdvIndReceived</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="PduHeader"> The PDU header. </param>
            <param name="AdvA"> The advertiser address. </param>
            <param name="AdvData"> The pointer to the advertisement data.
              Can be <c>null</c>. The pointer is valid only inside the event
              handler. </param>
            <remarks> The <c>TxAdd</c> field of the <c>PduHeader</c> parameter
              indicates whether the advertiser’s address in the <c>AdvA</c>
              parameter is public (TxAdd = False) or random (TxAdd = True). The
              <c>ChSel</c> field in the <c>PduHeader</c> parameter is <c>True</c>
              if the advertiser supports the LE Channel Selection Algorithm #2
              feature. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisingPduHeader" />
        </member>
        <member name="T:wclBluetooth.wclBleSnifferAdvNonConnIndReceivedEvent">
            <summary> The BLE sniffer <c>OnAdvNonConnIndReceived</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="PduHeader"> The PDU header. </param>
            <param name="AdvA"> The advertiser address. </param>
            <param name="AdvData"> The pointer to the advertisement data.
              Can be <c>null</c>. The pointer is valid only inside the event
              handler. </param>
            <remarks> The <c>TxAdd</c> field of the <c>PduHeader</c> parameter
              indicates whether the advertiser’s address in the <c>AdvA</c>
              parameter is public (TxAdd = False) or random (TxAdd = True). </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisingPduHeader" />
        </member>
        <member name="T:wclBluetooth.wclBleSnifferAdvScanIndReceivedEvent">
            <summary> The BLE sniffer <c>OnAdvScanIndReceived</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="PduHeader"> The PDU header. </param>
            <param name="AdvA"> The advertiser address. </param>
            <param name="AdvData"> The pointer to the advertisement data.
              Can be <c>null</c>. The pointer is valid only inside the event
              handler. </param>
            <remarks> The <c>TxAdd</c> field of the <c>PduHeader</c> parameter
              indicates whether the advertiser’s address in the <c>AdvA</c>
              parameter is public (TxAdd = False) or random (TxAdd = True). </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisingPduHeader" />
        </member>
        <member name="T:wclBluetooth.wclBleSnifferConnectIndReceivedEvent">
            <summary> The BLE sniffer <c>OnConnectIndReceived</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="PduHeader"> The PDU header. </param>
            <param name="InitA"> The Initiator’s device address. </param>
            <param name="AdvA"> The advertiser’s device address. </param>
            <param name="LlData"> The Link Layer data. </param>
            <remarks> The <c>TxAdd</c> field of the <c>PduHeader</c> parameter
              indicates whether the advertiser’s address in the <c>InitA</c>
              parameter is public (TxAdd = False) or random (TxAdd = True). The
              <c>RxAdd</c> field of the <c>PduHeader</c> parameter indicates whether
              the advertiser’s device address in the <c>AdvA</c> parameter is public
              (RxAdd = False) or random (RxAdd = True). The <c>ChSel</c> field in the
              <c>PduHeader</c> parameter is <c>True</c> if the advertiser supports the
              LE Channel Selection Algorithm #2 feature. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisingPduHeader" />
            <seealso cref="T:wclBluetooth.wclBleSnifferLlData" />
        </member>
        <member name="T:wclBluetooth.wclBleSnifferScanReqReceivedEvent">
            <summary> The BLE sniffer <c>OnScanReqReceived</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="PduHeader"> The PDU header. </param>
            <param name="ScanA"> The scanner's address. </param>
            <param name="AdvA"> The address of the device to which this PDU
              is addressed. </param>
            <remarks> The <c>TxAdd</c> field of the <c>PduHeader</c> parameter
              indicates whether the scanner’s address in the <c>ScanA</c>
              parameter is public (TxAdd = False) or random (TxAdd = True).
              The <c>RxAdd</c> field of the <c>PduHeader</c> parameter indicates
              whether the target’s address in the <c>AdvA</c> parameter is
              public (RxAdd = False) or random (RxAdd = True). </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisingPduHeader" />
        </member>
        <member name="T:wclBluetooth.wclBleSnifferScanRspReceivedEvent">
            <summary> The BLE sniffer <c>OnScanRspReceived</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="PduHeader"> The PDU header. </param>
            <param name="AdvA"> The advertiser address. </param>
            <param name="ScanRspData"> The pointer to the advertisement data.
              Can be <c>null</c>. The pointer is valid only inside the event
              handler. </param>
            <remarks> The <c>TxAdd</c> field of the <c>PduHeader</c> parameter
              indicates whether the advertiser’s address in the <c>AdvA</c>
              parameter is public (TxAdd = False) or random (TxAdd = True). </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisingPduHeader" />
        </member>
        <member name="T:wclBluetooth.wclBleSnifferRawPacketReceivedEvent">
            <summary> The BLE sniffer <c>OnRawPacketReceived</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Header"> The Bluetooth LE packet header. </param>
            <param name="Payload"> The pointer to the packet's payload raw bytes.
              The pointer is valid only inside an event handler. If an application
              needs to use the data outside the event handler it must copy the
              payload. </param>
            <seealso cref="T:wclBluetooth.wclBluetoothLePacketHeader" />
        </member>
        <member name="T:wclBluetooth.wclWiiRemoteAccelChangedEvent">
            <summary> The Wii Remote <c>OnAccelChanged</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Accel"> The current accelerometer data. </param>
            <seealso cref="T:wclBluetooth.wclWiiRemoteAccel" />
        </member>
        <member name="T:wclBluetooth.wclWiiRemoteBalanceBoardChangedEvent">
            <summary> The Wii Remote <c>OnBalanceBoardChanged</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Board"> The new Balance Board extension
              state. </param>
            <seealso cref="T:wclBluetooth.wclWiiRemoteBalanceBoard" />
        </member>
        <member name="T:wclBluetooth.wclWiiRemoteButtonsChangedEvent">
            <summary> The Wii Remote <c>OnButtonsChanged</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Buttons"> The current state of the Wii Remote controller
              buttons. </param>
            <seealso cref="T:wclBluetooth.wclWiiRemoteButtons" />
        </member>
        <member name="T:wclBluetooth.wclWiiRemoteClassicControllerChangedEvent">
            <summary> The Wii Remote <c>OnClassicControllerChanged</c> event
              handler prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Controller"> The current state of the Wii Remote Classic
              Controller extension. </param>
            <seealso cref="T:wclBluetooth.wclWiiRemoteClassicController" />
        </member>
        <member name="T:wclBluetooth.wclWiiRemoteDrumsChangedEvent">
            <summary> The Wii Remote <c>OnDrumsChanged</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Drums"> The current state of the Drums extension. </param>
            <seealso cref="T:wclBluetooth.wclWiiRemoteDrums" />
        </member>
        <member name="T:wclBluetooth.wclWiiRemoteGuitarChangedEvent">
            <summary> The Wii Remote <c>OnGuitarChanged</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Guitar"> The current Guitar extension state. </param>
            <seealso cref="T:wclBluetooth.wclWiiRemoteGuitar" />
        </member>
        <member name="T:wclBluetooth.wclWiiRemoteIrChangedEvent">
            <summary> The Wii Remote <c>OnIrChanged</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Ir"> The IR sensor data. </param>
            <seealso cref="T:wclBluetooth.wclWiiRemoteIrSensors" />
        </member>
        <member name="T:wclBluetooth.wclWiiRemoteNunchukChangedEvent">
            <summary> The Wii Remote <c>OnNunchukChanged</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Nunchuk"> The current Nunchuk extension state. </param>
            <seealso cref="T:wclBluetooth.wclWiiRemoteNunchuk" />
        </member>
        <member name="T:wclBluetooth.wclWiiRemoteStatusChangedEvent">
            <summary> The Wii Remote <c>OnStatusChanged</c> event handler
              prototype. </summary>
            <param name="Sender"> The object initiates the event. </param>
            <param name="Batt"> The WeDo Remote battery level. </param>
            <param name="Leds"> The We Do Remote LEDs state. </param>
            <seealso cref="T:wclBluetooth.wclWiiRemoteLeds" />
        </member>
        <member name="T:wclBluetooth.wclBluetoothApi">
            <summary> Supported Bluetooth APIs (drivers). </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothApi.baBlueSoleil">
            <summary> BlueSoleil Bluetooth driver. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothApi.baMicrosoft">
            <summary> Microsoft Bluetooth driver. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothApi.baToshiba">
            <summary> Toshiba Bluetooth driver. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothApi.baBled112">
            <summary> Silicon Labs BLED112 module. </summary>
        </member>
        <member name="T:wclBluetooth.wclBluetoothDeviceType">
            <summary> A remote device types. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothDeviceType.dtClassic">
            <summary> Classic Bluetooth device. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothDeviceType.dtBle">
            <summary> BLE (Bluetooth Low Energy) device. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothDeviceType.dtMixed">
            <summary> Mixed device (supports both classic and LE
              functions). </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothDeviceType.dtUnknown">
            <summary> Unknown device type. </summary>
        </member>
        <member name="T:wclBluetooth.wclBluetoothDiscoverKind">
            <summary> The <c>TwclBluetoothDiscoverKind</c> enumeration describes
              Bluetooth devices discovering methods. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothDiscoverKind.dkClassic">
            <summary> Discover only Classic Bluetooth devices. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothDiscoverKind.dkBle">
            <summary> Discovers only Bluetooth Low Energy devices. </summary>
        </member>
        <member name="T:wclBluetooth.wclGattDescriptorType">
            <summary> The enumeration describes the different types of Bluetooth LE
              generic attributes (GATT). </summary>
        </member>
        <member name="F:wclBluetooth.wclGattDescriptorType.dtCharacteristicExtendedProperties">
            <summary> The characteristic value has additional properties that
              describe how it can be used, or how it can be accessed. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattDescriptorType.dtCharacteristicUserDescription">
            <summary> The characteristic value contains a string that is a user
              textual description. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattDescriptorType.dtClientCharacteristicConfiguration">
            <summary> The characteristic value may be configured by the
              client. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattDescriptorType.dtServerCharacteristicConfiguration">
            <summary> The characteristic value may be configured for the
              server. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattDescriptorType.dtCharacteristicFormat">
            <summary> The format of the characteristic value. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattDescriptorType.dtCharacteristicAggregateFormat">
            <summary> The format of an aggregated characteristic value. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattDescriptorType.dtCustomDescriptor">
            <summary> The characteristic value is customized. </summary>
        </member>
        <member name="T:wclBluetooth.wclGattPresentationFormat">
            <summary> The characteristic presentation formats. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattPresentationFormat.fmtRfu">
            <summary> Reserved for future use. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattPresentationFormat.fmtBoolean">
            <summary> Boolean. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattPresentationFormat.fmt2Bit">
            <summary> Unsigned 2-bit integer. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattPresentationFormat.fmtNibble">
            <summary> Unsigned 4-bit integer. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattPresentationFormat.fmtUInt8">
            <summary> Unsigned 8-bit integer. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattPresentationFormat.fmtUInt12">
            <summary> Unsigned 12-bit integer. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattPresentationFormat.fmtUInt16">
            <summary> Unsigned 16-bit integer. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattPresentationFormat.fmtUInt24">
            <summary> Unsigned 24-bit integer. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattPresentationFormat.fmtUInt32">
            <summary> Unsigned 32-bit integer. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattPresentationFormat.fmtUInt48">
            <summary> Unsigned 48-bit integer. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattPresentationFormat.fmtUInt64">
            <summary> Unsigned 64-bit integer. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattPresentationFormat.fmtUInt128">
            <summary> Unsigned 128-bit integer. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattPresentationFormat.fmtSInt8">
            <summary> Signed 8-bit integer. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattPresentationFormat.fmtSInt12">
            <summary> Signed 12-bit integer. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattPresentationFormat.fmtSInt16">
            <summary> Signed 16-bit integer. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattPresentationFormat.fmtSInt24">
            <summary> Signed 24-bit integer. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattPresentationFormat.fmtSInt32">
            <summary> Signed 32-bit integer. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattPresentationFormat.fmtSInt48">
            <summary> Signed 48-bit integer. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattPresentationFormat.fmtSInt64">
            <summary> Signed 64-bit integer. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattPresentationFormat.fmtSInt128">
            <summary> Signed 128-bit integer. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattPresentationFormat.fmtFloat32">
            <summary> IEEE-754 32-bit floating point. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattPresentationFormat.fmtFloat64">
            <summary> IEEE-754 64-bit floating point. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattPresentationFormat.fmtSFloat">
            <summary> IEEE-11073 16-bit SFLOAT. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattPresentationFormat.fmtFloat">
            <summary> IEEE-11073 32-bit FLOAT. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattPresentationFormat.fmtDUint16">
            <summary> IEEE-20601 format. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattPresentationFormat.fmtUtf8S">
            <summary> UTF-8 string. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattPresentationFormat.fmtUtf16S">
            <summary> UTF-16 string. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattPresentationFormat.fmtStruct">
            <summary> Opaque Structure. </summary>
        </member>
        <member name="T:wclBluetooth.wclGattOperationFlag">
            <summary> This enumeration describes how a GATT reading operation
              should be executed. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattOperationFlag.goNone">
            <summary> Use default behavior. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattOperationFlag.goReadFromDevice">
            <summary> The value is to be read directly from the device. This
              overwrites the one in the cache if one is already
              present. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattOperationFlag.goReadFromCache">
            <summary> The value is to be read from the cache (regardless of whether
              it is present in the cache or not). </summary>
        </member>
        <member name="T:wclBluetooth.wclGattProtectionLevel">
            <summary> Represents the desired security level for GATT communication. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattProtectionLevel.plNone">
            <summary> Uses the default protection level. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattProtectionLevel.plAuthentication">
            <summary> Require the link to be authenticated. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattProtectionLevel.plEncryption">
            <summary> Require the link to be encrypted. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattProtectionLevel.plEncryptionAndAuthentication">
            <summary> Require the link to be encrypted and authenticated. </summary>
        </member>
        <member name="T:wclBluetooth.wclGattWriteKind">
            <summary> The GATT write operation mode. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattWriteKind.wkWithResponse">
            <summary> Execute write operation as Write With Response. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattWriteKind.wkWithoutResponse">
            <summary> Execute write operation as Write Without Response if a
              characteristic supports such method. If a characteristic does not
              support Write Without Response the
              <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_WRITE_WITHOUT_RESPONSE_NOT_SUPPORTED" />
              error returned. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattWriteKind.wkAuto">
            <summary> Automatic detection of write operation mode. If a
              characteristic supports Write Without Response then this method will
              be used. Otherwise the Write With Response operation
              executes. The default write operation mode. </summary>
        </member>
        <member name="T:wclBluetooth.wclGattSubscribeKind">
            <summary> The GATT subscription method. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattSubscribeKind.skNotification">
            <summary> Subscribe to notifications. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattSubscribeKind.skIndication">
            <summary> Subscribe to indication. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattSubscribeKind.skManual">
            <summary> A subscription method is controlled by a characteristic
              properties. </summary>
        </member>
        <member name="T:wclBluetooth.wclGattLocalCharacteristicProperty">
            <summary> The enumeration represents the GATT local characteristic
              properties, as defined by the GATT profile. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattLocalCharacteristicProperty.cpNone">
            <summary> Not specified. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattLocalCharacteristicProperty.cpAuthenticatedSignedWritable">
            <summary> The characteristic supports signed writes. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattLocalCharacteristicProperty.cpBroadcastable">
            <summary> The characteristic supports broadcasting. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattLocalCharacteristicProperty.cpExtendedProperties">
            <summary> The ExtendedProperties Descriptor is present. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattLocalCharacteristicProperty.cpIndicatable">
            <summary> The characteristic is indicatable. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattLocalCharacteristicProperty.cpNotifiable">
            <summary> The characteristic is notifiable. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattLocalCharacteristicProperty.cpReadable">
            <summary> The characteristic is readable. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattLocalCharacteristicProperty.cpReliableWritable">
            <summary> The characteristic supports reliable writes. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattLocalCharacteristicProperty.cpWritableAuxiliaries">
            <summary> The characteristic has writable auxiliaries. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattLocalCharacteristicProperty.cpWritable">
            <summary> The characteristic is writable. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattLocalCharacteristicProperty.cpWritableWithoutResponse">
            <summary> The characteristic supports Write Without Response. </summary>
        </member>
        <member name="T:wclBluetooth.wclBluetoothLeScanningMode">
            <summary> Specifies the Bluetooth LE scanning mode. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeScanningMode.smActive">
            <summary> Scanning mode is active. This indicates that scan request
              packets will be sent from the platform to actively query for more
              advertisement data of type ScanResponse. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeScanningMode.smPassive">
            <summary> Scanning mode is passive. </summary>
        </member>
        <member name="T:wclBluetooth.wclBluetoothLeAdvertisementType">
            <summary> Types of the Bluetooth LE advertisement packet. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeAdvertisementType.atConnectableUndirected">
            <summary> <para> The advertisement is undirected and indicates that the
              device is connectable and scannable. This advertisement type can carry
              data. </para>
              <para> This corresponds with the <c>ADV_IND</c> type defined in the
              Bluetooth LE specifications. </para> </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeAdvertisementType.atConnectableDirected">
            <summary> <para> The advertisement is directed and indicates that the
              device is connectable but not scannable. This advertisement type
              cannot carry data. </para>
              <para> This corresponds with the <c>ADV_DIRECT_IND</c> type defined in
              the Bluetooth LE specifications. </para> </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeAdvertisementType.atScannableUndirected">
            <summary> <para> The advertisement is undirected and indicates that the
              device is scannable but not connectable. This advertisement type can
              carry data. </para>
              <para> This corresponds with the <c>ADV_SCAN_IND</c> type defined in
              the Bluetooth LE specifications. </para> </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeAdvertisementType.atNonConnectableUndirected">
            <summary> <para> The advertisement is undirected and indicates that the
              device is not connectable nor scannable. This advertisement type can
              carry data. </para>
              <para> This corresponds with the <c>ADV_NONCONN_IND</c> type defined
              in the Bluetooth LE specifications. </para> </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeAdvertisementType.atScanResponse">
            <summary> <para> This advertisement is a scan response to a scan request
              issued for a scannable advertisement. This advertisement type can
              carry data. </para>
              <para> This corresponds with the <c>SCAN_RSP</c> type defined in the
              Bluetooth LE specifications. </para> </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeAdvertisementType.atExtended">
            <summary> This advertisement is a 5.0 extended advertisement. This
              advertisement type may have different properties, and is not
              necessarily directed, connected, scannable, nor a scan
              response. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeAdvertisementType.atUnknown">
            <summary> Unknown advertisement packet type. </summary>
        </member>
        <member name="T:wclBluetooth.wclBluetoothLeAdvertisementFlag">
            <summary> Flags used to match flags contained inside a Bluetooth LE
              advertisement payload. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeAdvertisementFlag.afNone">
            <summary> Indicates empty flags set. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeAdvertisementFlag.afLimitedDiscoverableMode">
            <summary> Bluetooth LE Limited Discoverable Mode. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeAdvertisementFlag.afGeneralDiscoverableMode">
            <summary> Bluetooth LE General Discoverable Mode. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeAdvertisementFlag.afClassicNotSupported">
            <summary> Bluetooth BR/EDR not supported. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeAdvertisementFlag.afDualModeControllerCapable">
            <summary> Simultaneous Bluetooth LE and BR/EDR to same device
              capable (controller). </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeAdvertisementFlag.afDualModeHostCapable">
            <summary> Simultaneous Bluetooth LE and BR/EDR to same device capable
              (host). </summary>
        </member>
        <member name="T:wclBluetooth.wclBluetoothLeExtendedFrameFlag">
            <summary> Extended advertisement frame flags. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeExtendedFrameFlag.efAnonymous">
            <summary> Indicates whether a Bluetooth Address was omitted from the
              received advertisement. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeExtendedFrameFlag.efConnectable">
            <summary> Indicates whether the received advertisement is
              connectable. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeExtendedFrameFlag.efDirected">
            <summary> Indicates whether the received advertisement is
              directed. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeExtendedFrameFlag.efScannable">
            <summary> Indicates whether the received advertisement is
              scannable. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeExtendedFrameFlag.efScanResponse">
            <summary> Indicates whether the received advertisement is a scan
              response. </summary>
        </member>
        <member name="T:wclBluetooth.wclBluetoothMitmProtection">
            <summary> The enumeration specifies the "Man in the Middle" protection
              required for authentication. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothMitmProtection.mitmProtectionNotRequired">
            <summary> Protection against a "Man in the Middle" attack is not
              required for authentication. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothMitmProtection.mitmProtectionRequired">
            <summary> Protection against a "Man in the Middle" attack is required
              for authentication. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothMitmProtection.mitmProtectionNotRequiredBonding">
            <summary> Protection against a "Man in the Middle" attack is not
              required for bonding. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothMitmProtection.mitmProtectionRequiredBonding">
            <summary> Protection against a "Man in the Middle" attack is required
              for bonding. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothMitmProtection.mitmProtectionNotRequiredGeneralBonding">
            <summary> Protection against a "Man in the Middle" attack is not
              required for General Bonding. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothMitmProtection.mitmProtectionRequiredGeneralBonding">
            <summary> Protection against a "Man in the Middle" attack is required
              for General Bonding. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothMitmProtection.mitmProtectionNotDefined">
            <summary> Protection against "Man in the Middle" attack is not
              defined. </summary>
        </member>
        <member name="T:wclBluetooth.wclBluetoothLeProtectionLevel">
            <summary> The Bluetooth LE pairing protection levels. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeProtectionLevel.pplDefault">
            <summary> Use default protection level. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeProtectionLevel.pplNone">
            <summary> Pair the device using no levels of protection. (Mode 1,
              Level 1). </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeProtectionLevel.pplEncryption">
            <summary> Pair the device using encryption. (Mode 1,
              Level 2). </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeProtectionLevel.pplEncryptionAndAuthentication">
            <summary> Pair the device using encryption and authentication. (Mode 1,
              Level 3). </summary>
        </member>
        <member name="T:wclBluetooth.wclBluetoothIoCapability">
            <summary> The enumeration defines the input/output capabilities of a
              Bluetooth Device. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothIoCapability.iocapDisplayOnly">
            <summary> The Bluetooth device is capable of output via display
              only. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothIoCapability.iocapDisplayYesNo">
            <summary> The Bluetooth device is capable of output via a display, and
              has the additional capability to presenting a yes/no question to the
              user. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothIoCapability.iocapKeyboardOnly">
            <summary> The Bluetooth device is capable of input via
              keyboard. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothIoCapability.iocapNoInputNoOutput">
            <summary> The Bluetooth device is not capable of
              input/output. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothIoCapability.iocapDisplayKeyboard">
            <summary> The Bluetooth device is capable of input via
              keyboard and of output via display. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothIoCapability.iocapNotDefined">
            <summary> The input/output capabilities for the Bluetooth device are
              undefined. </summary>
        </member>
        <member name="T:wclBluetooth.wclBluetoothAddressType">
            <summary> Describes the Bluetooth address type. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothAddressType.atClassic">
            <summary> Classic Bluetooth device (public static address). </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothAddressType.atPublic">
            <summary> Public address. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothAddressType.atRandom">
            <summary> Random address. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothAddressType.atUnspecified">
            <summary> Unspecified address. </summary>
        </member>
        <member name="T:wclBluetooth.wclBluetoothPairingMethod">
            <summary> The pairing methods. </summary>
            <remarks> The pairing method allows your application to force Classic or
              BLE pairing when needed. </remarks>
        </member>
        <member name="F:wclBluetooth.wclBluetoothPairingMethod.pmAuto">
            <summary> Bluetooth Framework automatically selects the pairing
              method based on Bluetooth device type. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothPairingMethod.pmClassic">
            <summary> Bluetooth Framework forces Classic pairing. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothPairingMethod.pmLe">
            <summary> Bluetooth Framework forces LE pairing. </summary>
        </member>
        <member name="T:wclBluetooth.wclBluetoothLeConnectionParametersType">
            <summary> The enumeration defines the Bluetooth LE GATT preferred
              connection parameters. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeConnectionParametersType.ppBalanced">
            <summary> The balanced set of connection parameters, offering a balance
              between throughput and power usage. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeConnectionParametersType.ppPowerOptimized">
            <summary> The more power-efficient set of connection parameters.
              Optimized for power usage at the expense of throughput. Also allows
              for more simultaneous connections to other Bluetooth
              devices. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeConnectionParametersType.ppThroughputOptimized">
            <summary> The more aggressive set of connection parameters, optimized
              for faster throughput at the expense of power usage. Also reduces the
              number of simultaneous connections that can be made to other Bluetooth
              devices. </summary>
        </member>
        <member name="T:wclBluetooth.wclWiiRemoteIrMode">
            <summary> The Wii Remote IR sensor modes. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteIrMode.wiiIrOff">
            <summary> The IR sensor is turned off. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteIrMode.wiiIrBasicMode">
            <summary> The basic mode. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteIrMode.wiiIrExtendedMode">
            <summary> The extended mode. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteIrMode.wiiIrFullMode">
            <summary> The full mode. </summary>
        </member>
        <member name="T:wclBluetooth.wclWiiRemoteIrSensitivity">
            <summary> The Wii Remote IR sensor sensitivity. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteIrSensitivity.wiiIrLevelOff">
            <summary> The IR sensor is turned off. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteIrSensitivity.wiiIrLevel1">
            <summary> The Level 1. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteIrSensitivity.wiiIrLevel2">
            <summary> The Level 2. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteIrSensitivity.wiiIrLevel3">
            <summary> The Level 3. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteIrSensitivity.wiiIrLevel4">
            <summary> The Level 4. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteIrSensitivity.wiiIrLevel5">
            <summary> The Level 5. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteIrSensitivity.wiiIrLevelMax">
            <summary> The maximum sensitivity. </summary>
        </member>
        <member name="T:wclBluetooth.wclWiiRemoteExtension">
            <summary> The Wii Remote extension types. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteExtension.wiiNoExtension">
            <summary> No extension is connected. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteExtension.wiiNunchuk">
            <summary> The Nunchuk extension. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteExtension.wiiClassicController">
            <summary> The Classic Controller extension. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteExtension.wiiGuitar">
            <summary> The Guitar extension. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteExtension.wiiDrums">
            <summary> The Drums extension. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteExtension.wiiBalanceBoard">
            <summary> The Balance Board extension. </summary>
        </member>
        <member name="T:wclBluetooth.wclWiiRemoteGuitarType">
            <summary> The Wii Remote Guitar extension type. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteGuitarType.wiiGuitarHero3">
            <summary> The Guitar extension is the Hero 3 model. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteGuitarType.wiiGuitarHeroWorldTour">
            <summary> The Guitar extension is the Hero World Tour model. </summary>
        </member>
        <member name="T:wclBluetooth.wclBluetoothLeAdvertisingPduType">
            <summary> The Bluetooth LE advertising packet PDU types. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeAdvertisingPduType.ptAdvInd">
            <summary> The <c>ADV_IND</c> PDU type. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeAdvertisingPduType.ptAdvDirectInd">
            <summary> The <c>ADV_DIRECT_IND</c> PDU type. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeAdvertisingPduType.ptAdvNonConnInd">
            <summary> The <c>ADV_NONCONN_IND</c> PDU type. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeAdvertisingPduType.ptScanReq">
            <summary> The <c>SCAN_REQ</c> PDU type. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeAdvertisingPduType.ptAuxScanReq">
            <summary> The <c>AUX_SCAN_REQ</c> PDU type. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeAdvertisingPduType.ptScanRsp">
            <summary> The <c>SCAN_RSP</c> PDU type. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeAdvertisingPduType.ptConnectInd">
            <summary> The <c>CONNECT_IND</c> PDU type. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeAdvertisingPduType.ptAuxConnectReq">
            <summary> The <c>AUX_CONNECT_REQ</c> PDU type. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeAdvertisingPduType.ptAdvScanInd">
            <summary> The <c>ADV_SCAN_IND</c> PDU type. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeAdvertisingPduType.ptAdvExtInd">
            <summary> The <c>ADV_EXT_IND</c> PDU type. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeAdvertisingPduType.ptAuxAdvInd">
            <summary> The <c>AUX_ADV_IND</c> PDU type. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeAdvertisingPduType.ptAuxScanRsp">
            <summary> The <c>AUX_SCAN_RSP</c> PDU type. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeAdvertisingPduType.ptAuxSyncInd">
            <summary> The <c>AUX_SYNC_IND</c> PDU type. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeAdvertisingPduType.ptAuxChainInd">
            <summary> The <c>AUX_CHAIN_IND</c> PDU type. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeAdvertisingPduType.ptAuxConnectRsp">
            <summary> The <c>AUX_CONNECT_RSP</c> PDU type. </summary>
        </member>
        <member name="T:wclBluetooth.wclBluetoothConnectionType">
            <summary> Supported connection types. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothConnectionType.ctRfCommClient">
            <summary> RFCOMM client connection. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothConnectionType.ctRfCommServer">
            <summary> RFCOMM server connection. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothConnectionType.ctGattClient">
            <summary> BLE GATT client connection. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothConnectionType.ctGattServer">
            <summary> BLE GATT server connection. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothConnectionType.ctBeaconWatcher">
            <summary> BLE beacon watcher connection. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothConnectionType.ctLeAdvertiser">
            <summary> Bluetooth LE advertiser connection. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothConnectionType.ctWiiRemote">
            <summary> Wii Remote controller client connection. </summary>
        </member>
        <member name="T:wclBluetooth.wclAudioDeviceDataFlow">
            <summary> The audio device data flow direction. </summary>
            <remarks> The Data Flow indicates the direction in which audio data flows
              between an audio endpoint device and an application. </remarks>
        </member>
        <member name="F:wclBluetooth.wclAudioDeviceDataFlow.dfRender">
            <summary> Audio rendering stream. Audio data flows from the application
              to the audio endpoint device, which renders the stream. </summary>
        </member>
        <member name="F:wclBluetooth.wclAudioDeviceDataFlow.dfCapture">
            <summary> Audio capture stream. Audio data flows from the audio endpoint
              device that captures the stream, to the application. </summary>
        </member>
        <member name="T:wclBluetooth.wclAudioDeviceRole">
            <summary> The audio device role. </summary>
            <remarks> indicate the role that the system has assigned to an audio
              endpoint device. </remarks>
        </member>
        <member name="F:wclBluetooth.wclAudioDeviceRole.drConsole">
            <summary> Games, system notification sounds, and voice
              commands. </summary>
        </member>
        <member name="F:wclBluetooth.wclAudioDeviceRole.drMultimedia">
            <summary> Music, movies, narration, and live music
              recording. </summary>
        </member>
        <member name="F:wclBluetooth.wclAudioDeviceRole.drCommunications">
            <summary> Voice communications (talking to another person). </summary>
        </member>
        <member name="T:wclBluetooth.wclAudioDeviceState">
            <summary> Audio device state. </summary>
        </member>
        <member name="F:wclBluetooth.wclAudioDeviceState.asActive">
            <summary> Active device. </summary>
        </member>
        <member name="F:wclBluetooth.wclAudioDeviceState.asDisabled">
            <summary> Disabled device. </summary>
        </member>
        <member name="F:wclBluetooth.wclAudioDeviceState.asNotPresent">
            <summary> Not present device. </summary>
        </member>
        <member name="F:wclBluetooth.wclAudioDeviceState.asUnplugged">
            <summary> Unplugged device. </summary>
        </member>
        <member name="T:wclBluetooth.wclBluetoothErrors">
            <summary> The static class contains the Bluetooth Error Codes. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_BASE">
            <summary> The base code for the Bluetooth errors. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_MANAGER_CLOSED">
            <summary> A Bluetooth Manager is closed. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_MANAGER_OPENED">
            <summary> A Bluetooth Manager is opened. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_MANAGER_OPEN_FAILED">
            <summary> Unable to opened the Bluetooth Manager. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_MANAGER_EXISTS">
            <summary> An other instance of the Bluetooth Manager is already
              opened. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_DRIVER_NOT_AVAILABLE">
            <summary> A Bluetooth driver is not available or not loaded. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_HARDWARE_NOT_AVAILABLE">
            <summary> A Bluetooth hardware is not available. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_API_NOT_LOADED">
            <summary> A Bluetooth API (driver) was not loaded. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_API_INITIALIZATION_FAILED">
            <summary> Unable to initialize a Bluetooth API (driver)
              subsystem. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_API_NOT_FOUND">
            <summary> A Bluetooth API (driver) was not found in this
              system. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_API_NOT_INITIALIZED">
            <summary> A Bluetooth driver was not initialized. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_WRONG_DRIVER_VERSION">
            <summary> A Bluetooth driver has been found but it does not support
              all the features that WCL requires for correct work. You should
              update your Bluetooth driver for the latest available
              version. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_RADIO_OPENED">
            <summary> A Bluetooth Radio object is opened. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_RADIO_CLOSED">
            <summary> A Bluetooth Radio object is closed. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_RADIO_REMOVED">
            <summary> The Bluetooth Radio object has been removed
              (destroyed). </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_RADIO_INSTANCE_INIT_FAILED">
            <summary> Unable to initialize a Bluetooth Radio instance
              mutex. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_RADIO_INSTANCE_EXISTS">
            <summary> The same Bluetooth Radio instance has already been
              initialized. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_RADIO_UNAVAILABLE">
            <summary> The Bluetooth Radio object become unavailable. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_CHANGE_CONNECTABLE_STATE">
            <summary> Unable to change Radio connectable state. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_CHANGE_DISCOVERABLE_STATE">
            <summary> Unable to change Radio discoverable state. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_CHANGE_NAME">
            <summary> Unable to change Radio name. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_FEATURE_NOT_SUPPORTED">
            <summary> The requested feature is not supported by a Bluetooth
              driver. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNEXPECTED">
            <summary> Unexpected or unknown Bluetooth error. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LINK_UNEXPECTED">
            <summary> <para> Error other than time-out at L2CAP or Bluetooth radio
              level. </para>
              <para> Usually this error appears if you try to connect to device that is paired on PC side
              but PC is not paired or has been unpaired on the device side. Unpairing device on PC side
              usually solves the error. </para></summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_OPERATION_FAILED">
            <summary> The operation fails for an undefined reason. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_OPERATION_CONFLICT">
            <summary> The request can not be processed since a same request is
              being processed. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_NO_MORE_CONNECTION_ALLOWED">
            <summary> The limit of connection number is reached. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_OBJECT_EXISTS">
            <summary> An object with the specified attribute exists. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_OBJECT_IN_USE">
            <summary> The specified object is accessed by other process. It can not
              be removed or modified. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_DISCOVERING_RUNNING">
            <summary> Discovering is already running. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_DISCOVERING_NOT_RUNNING">
            <summary> Discovering is not running. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_DISCOVERING_TERMINATED">
            <summary> Discovering has been terminated. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_CANCELLED_BY_USER">
            <summary> Operation has been canceled by user. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_TIMEOUT">
            <summary> Operation time out. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_CONNECTION_TERMINATED_BY_USER">
            <summary> Connection has been terminated by a user. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_PENDING">
            <summary> Asynchronous processing is pending. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_CONNECTION_FAILED">
            <summary> Connection failure. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_DEVICE_NOT_FOUND">
            <summary> A specified remote Bluetooth device was not found. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_PAIRING">
            <summary> Pairing operations executing. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_START_PAIRING">
            <summary> Unable to start pairing with a remote Bluetooth
              device. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_ALREADY_PAIRED">
            <summary> A device has already been paired. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_DEVICE_NOT_PAIRED">
            <summary> The specified remote device is not paired. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_ACCESS_DENIED">
            <summary> Access denied. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_AUTHENTICATION_FAILED">
            <summary> Authentication (pairing) with a remote Bluetooth device
              is failed. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_REJECTED">
            <summary> Operation has been rejected. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_GET_READ_BUFFER">
            <summary> Unable to get a read buffer size. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_GET_WRITE_BUFFER">
            <summary> Unable to get a write buffer size. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_SET_READ_BUFFER">
            <summary> Unable to set a read buffer size. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_SET_WRITE_BUFFER">
            <summary> Unable to set a write buffer size. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_CLIENT_CONNECTED">
            <summary> A client is already connected to a Bluetooth device. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_CLIENT_NOT_CONNECTED">
            <summary> A client is not connected to a Bluetooth device. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_L2CAP_DISCONNECTED">
            <summary> The L2CAP channel disconnected by remote peer. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_INVALID_DEVICE_TYPE">
            <summary> Wrong device type used in connection. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_CHANNEL_IN_USE">
            <summary> The port/channel number requested is in use. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_SERVICE_NOT_VALID">
            <summary> The Bluetooth port/channel or device address
              not valid. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_SERVICE_NOT_FOUND">
            <summary> No service record with the specified search pattern is found
              on the remote device. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_CREATE_SOCKET">
            <summary> Unable to create a Bluetooth socket. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_SET_CLIENT_SECURITY">
            <summary> Unable to set client authentication and/or encryption
              states. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_CREATE_EVENT">
            <summary> Unable to create socket event. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_SET_EVENT">
            <summary> Unable to select socket events. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_LOCK_CONNECT_MUTEX">
            <summary> Unable to acquire the connections mutex object. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_INIT_OVERLAPPED_OPERATION">
            <summary> Unable to create system event object for
              overlapped IO. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_CREATE_DISCONNECT_EVENT">
            <summary> Unable to create disconnect notification event. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_CREATE_CONNECT_EVENT">
            <summary> Unable to create connect notification connection
              event. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_LOCK_SDP_MUTEX">
            <summary> Unable to acquire the SDP mutex object. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_RFCOMM_SESSION_DISCONNECTED">
            <summary> The RFCOMM multiplexor (session) disconnected by remote
              peer. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_RFCOMM_DOWN">
            <summary> The RFCOMM received DM response. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_RFCOMM_DISCONNECTED">
            <summary> The RFCOMM channel disconnected by remote peer. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_TO_RESOLVE_ADDRESS">
            <summary> Unable to resolve connected remote device address. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_ADD_ADP_RECORD">
            <summary> Unable to add new SDP record. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_SET_SERVER_SECURITY">
            <summary> Unable to set server authentication and/or encryption
              states. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LOCAL_SERVICE_ACTIVE">
            <summary> Local service is still active. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_CREATE_SERVER">
            <summary> Unable to create Bluetooth server. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_ENUMERATE_LOCAL_SERVICES">
            <summary> Unable to enumerate local running services. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_STOP_LOCAL_SERVER">
            <summary> Unable to stop local predefined server. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_TO_UPDATE_LOCAL_SERVER">
            <summary> Unable to update local server database. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_SETUP_COM_FAILED">
            <summary> Unable to setup the communication port. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_OPEN_CLIENT_COM">
            <summary> Unable to open the client COM port for the Bluetooth
              connection. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_OPEN_SERVER_COM">
            <summary> Unable to open the server COM port for the Bluetooth
              connection. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_WRITE_FAILED">
            <summary> Sending data to a remote device was failed. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_READ_FAILED">
            <summary> Abnormal data received. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_CREATE_WND">
            <summary> Unable to create Toshiba notifications window. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_REGISTER_MESSAGE">
            <summary> Unable to register Toshiba notification message. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_CREATE_SYNC_EVENT">
            <summary> Unable to create synchronization event. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_SDP_TRANSACTION">
            <summary> SDP transaction processing failure. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_START_SDP_THREAD">
            <summary> Unable start SDP connection thread. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_START_CONNECT_THREAD">
            <summary> Unable to start connection thread. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_START_LISTEN_THREAD">
            <summary> Unable to start listening thread. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_DISCOVERING_FAILED">
            <summary> Inquiry processing failure. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_READ_REMOTE_NAME_FAILED">
            <summary> Remote name acquisition processing failure. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_DESTROY_COM_FAILED">
            <summary> Unable to destroy COM port. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_CONNECT_COM_FAILED">
            <summary> Unable to connect COM port. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_DISCONNECT_COM_FAILED">
            <summary> Unable to disconnect COM port. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_TO_SWITCH_ON_OR_OFF">
            <summary> Unable to turn Bluetooth ON or OFF. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_CANNOT_ASSIGN_PSM">
            <summary> Can not assign PSM. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_GETLOCALINFO_FAILED">
            <summary> Unable to read local Radio information. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_DISCONNECT_SDP_FAILED">
            <summary> Unable to disconnect from SDP server. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_REGISTER_COM_NOTIFICATION">
            <summary> Unable to register COM port notifications. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_SETLOCALINFO_FAILED">
            <summary> Unable to change local radio information. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_TO_GET_CONNECTED_DEVICES">
            <summary> Unable to get connected state of the device. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_CONNECT">
            <summary> Unable to connect to a remote device. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_CONNECT_PSM">
            <summary> Unable to start connection to a remote device. PSM
              error. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_SDP_PARSE_ERROR">
            <summary> SDP record parsing error. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_READ_RSSI">
            <summary> Unable to read RSSI value. </summary> 
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_CHANGE_PAIRING_MODE">
            <summary> Unable to change pairing mode. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_SDP_ERROR">
            <summary> Error working with SDP records. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_START_THREAD">
            <summary> Unable to start Toshiba main thread. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_CREATE_INIT_EVENT">
            <summary> Unable to create BlueSoleil initialization event. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_START_INIT_THREAD">
            <summary> Unable to start BlueSoleil initialization thread. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_VCOM_NOT_FOUND">
            <summary> The virtual COM port was not found. Probably it was not
              created by this Bluetooth radio object. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_VCOM_EXISTS">
            <summary> A virtual COM port was already created for this Bluetooth device
              and service. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_CREATE_DEVICE_STATICS_FAILED">
            <summary> Unable create Bluetooth Device Statics interface. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_START_ASYNC_OPERATION_FAILED">
            <summary> Unable start Win RT asynchronous operation. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_SET_ASYNC_OPERATION_EVENT_HANDLER_FAILED">
            <summary> Unable set Win RT asynchronous operation event
              handler. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_CREATE_DEVICE_FAILED">
            <summary> Unable create Bluetooth Device interface. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_GET_ASYNC_OPERATION_RESULT_FAILED">
            <summary> Unable get Win RT async operation result. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_GET_DEVICE_ID_FAILED">
            <summary> Failed to get Bluetooth Device ID. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_GET_DEVICE_PROPERTIES_FAILED">
            <summary> Failed to read Bluetooth Device properties. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_START_RSSI_THREAD_FAILED">
            <summary> Unable to start RSSI measurement thread. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_AUTHENTICATION_DEVICE_IGNORED">
            <summary> This is Microsoft specific error indicates that the pairing with
              remote classic Bluetooth enabled device was not started and need to be
              re-initiated. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_INCOMPATIBLE_OS_BITS">
            <summary> Incompatible OS. This feature required to run x64 application
              on x64 platform and/or x86 application on x86 platform. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_GET_RADIOS_LIST_FAILED">
            <summary> Unable to get Bluetooth radios list. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_GET_RADIOS_COUNT_FAILED">
            <summary> Unable to get number of available Bluetooth radios. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_GET_BLUETOOTH_RADIO_FAILED">
            <summary> Access to Bluetooth Radio driver instance has been
              failed. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_CHANGE_RADIO_STATE">
            <summary> Unable to change Bluetooth Radio state. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNSUPPORTED_BY_HARDWARE">
            <summary> Bluetooth features are unsupported by the hardware. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_RADIO_CLOSING">
            <summary> A Bluetooth Radio object is closing. The operation can not be
              executed. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_START_GET_DEV_NAME_THREAD_FAILED">
            <summary> Unable to start asynchronous name reading of a remote Bluetooth
              LE device. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_INVALID_PAIRING_METHOD">
            <summary> Invalid pairing method specified. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_NO_SYSTEM_RESOURCES">
            <summary> No system resources. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_CREATE_REG_CHANGE_TERMINATION_EVENT_FAILED">
            <summary> Unable to create registry changes monitoring thread termination
              event. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_CREATE_REG_CHANGE_RESULT_EVENT_FAILED">
            <summary> Unable to create registry changes monitoring thread
              initialization event. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_START_REG_CHANGE_THREAD_FAILED">
            <summary> Failed to start registry changes monitoring thread. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_REGISTER_AUTHENTICATION_CALLBACK_FAILED">
            <summary> Unable to registry authentication callback. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_FAILED_TO_OPEN_AUTH_AGENT_REG_KEY">
            <summary> Unable to open or create authentication agent registry
              key. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_CREATE_REG_CHANGES_NOTIFICATION_EVENT_FAILED">
            <summary> Create registry changes notification event failed. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_SET_REGISTRY_CHANGES_NOTIFICATIONS">
            <summary> Unable to set registry changes notification
              indication. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_TO_DISABLE_AUTHENTICATION_AGENT">
            <summary> Unable to disable Bluetooth Authentication Agent. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_PAIRED_BY_OTHER">
            <summary> Device has been paired by other application. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_DEVICE_ALREADY_INSTALLED">
            <summary> Drivers for the Bluetooth device has already been
              installed. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_DEVICE_NOT_CONNECTED">
            <summary> Disconnect operation failed because device is not connected. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_DEVICE_NOT_INSTALLED">
            <summary> Device has not been installed. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_ENUM_CONNECTION_FAILED">
            <summary> Unable to enumerate connections. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_WAIT_FAILED">
            <summary> Wait for Bluetooth communication events failed. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_ADMIN_RIGHTS_REQUIRED">
            <summary> The operation requires administrative rights. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_DISCOVERING_TIMEOUT_TOO_HIGH">
            <summary> The discovering Timeout value is too high. You can not use
              Timeout greater than 61 seconds. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_DISCOVERING_TIMEOUT_TOO_LOW">
            <summary> The discovering Timeout is too low. You can not use Timeout
              less than 2 seconds. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_GET_REMOTE_ADDRESS_TYPE_FAILED">
            <summary> Unable to read remote device's address type. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNKNOWN_DEVICE_TYPE">
            <summary> Unable read device's address type because device's type is unknown. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_START_WINRT_THREAD_FAILED">
            <summary> Unable to start Win RT classic working thread. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_CREATE_WATCHER_FACTORY_FAILED">
            <summary> Create Device Watcher Factory failed. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_CREATE_FILTER_FAILED">
            <summary> Create device's filter for Device Watcher failed. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_CREATE_WATCHER_FAILED">
            <summary> Create Bluetooth devices watcher failed. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_CREATE_COMPLETION_EVENT_FAILED">
            <summary> Create discovering completion event failed. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_SET_ADDED_HANDLER_FAILED">
            <summary> Set Bluetooth device watcher Added event handler failed. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_SET_UPDATED_HANDLER_FAILED">
            <summary> Set Bluetooth device watcher Updated event handler failed. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_SET_REMOVED_HANDLER_FAILED">
            <summary> Set Bluetooth device watcher Removed event handler failed. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_SET_COMPLETED_HANDLER_FAILED">
            <summary> Set Bluetooth device watcher Discovering Completed event handler failed. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_WATCHER_START_FAILED">
            <summary> Start discovering failed. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_TO_CREATE_WRITE_EVENT">
            <summary> Unable to create write completion event object. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_DISCOVERING_CANCELED">
            <summary> Discovering has been canceled (aborted) by the
              system. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_CREATE_STOPPED_EVENT_FAILED">
            <summary> Unable to create asynchronous operation termination indication
              event. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_SET_EVENT_HANDLER_FAILED">
            <summary> Unable to set Win RT object's event handler. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_REGISTER_CONNECT_MESSAGE">
            <summary> Unable to register Wii Remote client connect notification
              message. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_REGISTER_DISCONNECT_MESSAGE">
            <summary> Unable to register Wii Remote client disconnect notification
              message. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_REGISTER_DATA_MESSAGE">
            <summary> Unable to register Wii Remote client data notification
              message. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_CREATE_DATA_EVENT">
            <summary> Unable to create data received notification event. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_UNABLE_CREATE_PAIRING_TIMEOUT_EVENT">
            <summary> Unable to create pairing timeout event. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_HARDWARE_FAILED">
            <summary> Bluetooth hardware failed. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_CLASSIC_RADIO_UNAVAILABLE">
            <summary> A Classic Bluetooth Radio is not available. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_PAIRING_HANDLED_BY_SYSTEM">
            <summary> The pairing is handled by the OS. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_RADIO_INSTANCE_NOT_FOUND">
            <summary> The Bluetooth radio instance was not found. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_OPEN_RADIO_FAILED">
            <summary> Unable to open a Bluetooth Radio driver. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_BASE">
            <summary> The base error code for Bluetooth Low Energy. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_INVALID_HANDLE">
            <summary> The attribute handle given was not valid on this
              server. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_READ_NOT_PERMITTED">
            <summary> Attribute reading is not permitted. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_WRITE_NOT_PERMITTED">
            <summary> Attribute writing is not permitted. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_INVALID_PDU">
            <summary> Invalid request format. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_INSUFFICIENT_AUTHENTICATION">
            <summary> The attribute requires authentication before it can be read or
              written. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_REQUEST_NOT_SUPPORTED">
            <summary> Attribute server does not support the request received from the
              client. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_INVALID_OFFSET">
            <summary> Offset specified was past the end of the attribute. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_INSUFFICIENT_AUTHORIZATION">
            <summary> The attribute requires authorization before it can be read or written. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_PREPARE_QUEUE_FULL">
            <summary> Prepare queue is full. Too many prepare writes have been queued. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_ATTRIBUTE_NOT_FOUND">
            <summary> No attribute found within the given attribute handle range. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_ATTRIBUTE_NOT_LONG">
            <summary> The attribute cannot be read or written using the Read Blob Request. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_INSUFFICIENT_ENCRYPTION_KEYSIZE">
            <summary> The Encryption Key Size used for encrypting this link is insufficient. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_INVALID_ATTRIBUTE_VALUE_LENGTH">
            <summary> The attribute value length is invalid for the operation. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_INSUFFICIENT_ENCRYPTION">
            <summary> The attribute requires encryption before it can be read or written. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_UNSUPPORTED_GROUP_TYPE">
            <summary> The attribute type is not a supported grouping attribute as
              defined by a higher layer specification. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_INSUFFICIENT_RESOURCES">
            <summary> Insufficient Resources to complete the request. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_SMP_FAILED">
            <summary> SMP failed. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_TASK_CANCEL">
            <summary> Task cancel. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_CONNECT_FAILED">
            <summary> Connect failed. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_TIMEOUT">
            <summary> Response timed out. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_WRONG_CONFIGURATION">
            <summary> CCC improperly configured. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_PROCEDURE_IN_PROGRESS">
            <summary> Requested procedure is already in progress. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_OUT_OF_RANGE">
            <summary> Out of range. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_ACCESS_DENIED">
            <summary> The access to the Bluetooth LE attribute failed. This is
              Microsoft specific error code and usually indicates that the driver or
              low-level API can not access to the internal GATT attribute
              object. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_SUBSCRIPTION_ACTIVE">
            <summary> At least one subscription active. The error appears if you try
              to read services, characteristics or descriptors with
              <c>goReadFromDevice</c> flag and there is at least one subscription
              active. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_ALREADY_SUBSCRIBED">
            <summary> The GATT connection is already subscribed for this attribute
              changes notifications. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_NOT_SUBSCRIBED">
            <summary> The GATT connection has not been subscribed for this attribute
              changes notifications. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_UNLIKELY">
            <summary> The attribute request that was requested has encountered an
              error that was unlikely, and therefore could not be completed as
              requested. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_REMOTE_DEVICE_DISCONNECTS">
            <summary> A remote device closes the connection. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_INAVLID_USER_BUFFER">
            <summary> A buffer is specified, but the buffer count size is smaller than
              what is required, in bytes. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_INCONSISTENT_DATA">
            <summary> The current data in the cache appears to be inconsistent, and
              is leading to internal errors. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_COMMUNICATION_FAILED">
            <summary> The target server did not provide an appropriate network
              response. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_CHARACTERISTIC_NOT_READABLE">
            <summary> The characteristic value is not readable as dictated by the
              characteristic properties. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_CREATE_WATCHER_FAILED">
            <summary> Unable to create Bluetooth LE Advertisement Watcher. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_SET_SCANNING_MODE_FAILED">
            <summary> Unable to change Bluetooth LE Advertisement Watcher
              scanning mode. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_START_WATCHER_FAILED">
            <summary> Unable start Bluetooth LE Advertisement Watcher. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_START_WINRT_THREAD_FAILED">
            <summary> Unable to start Win RT LE working thread. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_SET_EVENT_HANDLER_FAILED">
            <summary> Unable to set Win RT object's event handler. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_CREATE_DEVICE_STATICS_FAILED">
            <summary> Unable create Bluetooth LE Device Statics interface. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_CREATE_DEVICE_FAILED">
            <summary> Unable create Bluetooth LE Device interface. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_START_ASYNC_OPERATION_FAILED">
            <summary> Unable start Win RT asynchronous operation. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_SET_ASYNC_OPERATION_EVENT_HANDLER_FAILED">
            <summary> Unable set Win RT asynchronous operation event
              handler. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GET_ASYNC_OPERATION_RESULT_FAILED">
            <summary> Unable get Win RT async operation result. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_CREATE_DEVICE2_FAILED">
            <summary> Unable create IBluetoothLEDevice2 interface. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GET_DEVICE_INFORMATION_FAILED">
            <summary> Unable to get IDeviceInformation interface. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GET_DEVICE_INFORMATION2_FAILED">
            <summary> Unable to get IDeviceInformation2 interface. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GET_DEVICE_INFORMATION_PAIRING_FAILED">
            <summary> Unable to get IDeviceInformationPairing interface. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GET_DEVICE_INFORMATION_PAIRING2_FAILED">
            <summary> Unable to get IDeviceInformationPairing2 interface. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GET_DEVICE_INFORMATION_CUSTOM_PAIRING_FAILED">
            <summary> Unable to get IDeviceInformationCustomPairing interface. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_BEACON_MONITORING_RUNNING">
            <summary> Bluetooth Beacons monitoring is running. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_BEACON_MONITORING_NOT_RUNNING">
            <summary> Bluetooth Beacons monitoring is not running. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_ADVERTISING_RUNNING">
            <summary> The Bluetooth LE advertising is already running. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_ADVERTISING_NOT_RUNNING">
            <summary> The Bluetooth LE advertising is not running. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_ADVERTISING_UNBALE_CREATE_INIT_EVENT">
            <summary> Unable create initialization event for the Bluetooth LE
              advertising thread. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_ADVERTISING_UNBALE_CREATE_TERMINATE_EVENT">
            <summary> Unable create termination event for the Bluetooth LE
              advertising thread. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_ADVERTISING_UNBALE_START_THREAD">
            <summary> Unable start Bluetooth LE Advertising thread. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_WRITE_VALUE_TOO_LONG">
            <summary> An application executes Write Without Response with value size
              longer than maximum PDU size (MTU). An application must use Write With
              Response instead. To do that an application must set
              <c>IsWritableWithoutResponse</c> characteristic's property to
              <c>false</c> and then call the <c>WriteCharacteristicValue</c>
              method to force Write With Response. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_UNABLE_GET_ADVERTISER">
            <summary> Unable to get Bluetooth LE Advertiser object. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_ADVERTISING">
            <summary> Bluetooth LE advertising is already running on this
              radio. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_CREATE_ADVERTISING_MUTEX_FAILED">
            <summary> Unable to create advertising protection mutex object. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_CREATE_CONNECTION_COMPLETION_EVENT_FAILED">
            <summary> Unable to create connection completion event. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_CREATE_DISCOVERING_THREAD_FAILED">
            <summary> Unable to start LE devices discovering thread. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_EDDYSTONE_URL_TOO_SHORT">
            <summary> The URL passed to the Eddystone URL Beacon is empty or too
              short. The length of the URL must be at least 8 characters. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_EDDYSTONE_URL_SCHEME_INVALID">
            <summary> Invalid Eddystone URL Beacon URL scheme. An URL must start with
              "http://" or "https://".  </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_EDDYSTONE_URL_TOO_LONG">
            <summary> The Eddystone URL Beacon URL is too long. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_ASYNC_PAIR_FAILED">
            <summary> Failed to start asynchronous pairing with Bluetooth LE device. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_ASYNC_PAIR_ERROR">
            <summary> Error during executing asynchronous pairing with Bluetooth LE device. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_MANUAL_PAIRING_REQUIRED">
            <summary> The OS does not support automatic connection to BLE device
              and manual pairing is required. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_AUTH_NOT_READY_TO_PAIR">
            <summary> The device object is not in a state where it can be
              paired. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_AUTH_NOT_PAIRED">
            <summary> The device object is not currently paired. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_AUTH_CONNECTION_REJECTED">
            <summary> The device object rejected the connection. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_AUTH_TOO_MANY_CONNECTIONS">
            <summary> The device object indicated it cannot accept any more incoming
              connections. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_AUTH_HARDWARE_FAILURE">
            <summary> The device object indicated there was a hardware
              failure. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_AUTH_TIMEOUT">
            <summary> The authentication process timed out before it could
              complete. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_AUTH_NOT_ALLOWED">
            <summary> The authentication protocol is not supported, so the device is
              not paired. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_AUTH_FAILURE">
            <summary> Authentication failed, so the device is not paired. Either the
              device object or the application rejected the authentication. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_AUTH_NO_SUPPORTED_PROFILE">
            <summary> There are no network profiles for this device object to
              use. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_AUTH_PROTECTION_LEVEL_COULD_NOT_BE_MET">
            <summary> The minimum level of protection is not supported by the device
              object or the application. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_AUTH_ACCESS_DENIED">
            <summary> Your application does not have the appropriate permissions level
              to pair the device object. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_AUTH_INVALID_CEREMONY_DATA">
            <summary> The ceremony data was incorrect. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_AUTH_PAIRING_CANCELED">
            <summary> The pairing action was canceled before completion. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_AUTH_OPERATION_ALREADY_IN_POROGRESS">
            <summary> The device object is already attempting to pair or
              unpair. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_AUTH_REQUIRED_HANDLER_NOT_REGISTERED">
            <summary> Either the event handler was not registered or a required
              pairing method was not supported. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_AUTH_REJECTED_BY_HANDLER">
            <summary> The application handler rejected the pairing. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_AUTH_REMOTE_DEVICE_HAS_ASSOCIATION">
            <summary> The remove device already has an association. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_AUTH_FAILED">
            <summary> An unknown failure occurred. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_SET_PROTECTION_LEVEL_FAILED">
            <summary> Failed to change protection level. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_CHARACTERISTIC_NOT_WRITABLE">
            <summary> The characteristic value is not writable as dictated by the
              characteristic properties. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_DEVICE_NOT_DISCOVERED">
            <summary> Attempt to connect to not previously discovered Bluetooth LE
              GATT device. Device object was not found by the system. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_ALREADY_PAIRED">
            <summary> A device has already been paired. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_UNSUPPORTED_BY_HARDWARE">
            <summary> Bluetooth LE features are unsupported by the hardware. Bluetooth
              LE features requires Bluetooth 4.0 or newest Bluetooth hardware with
              HCI version 6 and above. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_CREATE_DISCOVERING_EVENT_FAILED">
            <summary> Unable to create LE devices discovering thread termination
              event. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_DEVICE_NOT_FOUND">
            <summary> A specified remote Bluetooth LE device was not found. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GET_DEVICE_ID_FAILED">
            <summary> Failed to get Bluetooth LE Device ID. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GET_DEVICE_PROPERTIES_FAILED">
            <summary> Failed to read Bluetooth LE Device properties. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_FEATURE_NOT_SUPPORTED">
            <summary> The requested feature is not supported bu a Bluetooth LE
              driver. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_UNABLE_READ_RSSI">
            <summary> Unable to read RSSI value. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_START_RSSI_THREAD_FAILED">
            <summary> Unable to start BLE RSSI measurement thread. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_APPLICATION">
            <summary> Application error code defined by a higher layer
              specification. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_AUTH_REPEATED_ATTEMPTS">
            <summary> Pairing or authentication procedure is disallowed because too
              little time has elapsed since last pairing request or security
              request. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_AUTH_OOB_NOT_AVAILABLE">
            <summary> Out of Band data is not available for authentication. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GET_ROOT_SERVICE_FAILED">
            <summary> Unable to get information about Bluetooth LE service that
              owns an attribute. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GET_SERVICE_HANDLE_FAILED">
            <summary> Unable to read Bluetooth LE GATT service handle. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GET_CHARACTERISTIC_HANDLE_FAILED">
            <summary> Unable to read Bluetooth LE GATT characteristic
              handle. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GET_DESCRIPTOR_HANDLE_FAILED">
            <summary> Unable to read Bluetooth LE GATT descriptor handle. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GET_DESCRIPTOR_UUID_FAILED">
            <summary> Unable to read Bluetooth LE GATT descriptor UUID. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GET_PRESENTATION_FORMATS_FAILED">
            <summary> Unable to read Bluetooth LE GATT characteristics presentation
              formats list. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GET_PRESENTATION_FORMATS_LIST_SIZE_FAILED">
            <summary> Unable to read Bluetooth LE GATT characteristics presentation
              formats list size (length). </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GET_PRESENTATION_FORMAT_FAILED">
            <summary> Unable to read Bluetooth LE GATT characteristics presentation
              format. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GET_PRESENTATION_FORMAT_TYPE_FAILED">
            <summary> Unable to read Bluetooth LE GATT characteristics presentation
              format type. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GET_PRESENTATION_FORMAT_EXPONENT_FAILED">
            <summary> Unable to read Bluetooth LE GATT characteristics presentation
              format exponent. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GET_PRESENTATION_FORMAT_UNIT_FAILED">
            <summary> Unable to read Bluetooth LE GATT characteristics presentation
              format unit. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GET_PRESENTATION_FORMAT_NAMESPACE_FAILED">
            <summary> Unable to read Bluetooth LE GATT characteristics presentation
              format namespace. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GET_PRESENTATION_FORMAT_DESCRIPTION_FAILED">
            <summary> Unable to read Bluetooth LE GATT characteristics presentation
              format description. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GET_DESCRIPTOR_VALUE_SIZE_FAILED">
            <summary> Unable to get Bluetooth LE GATT descriptor value
              size. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GET_DESCRIPTOR_VALUE_RAW_DATA_FAILED">
            <summary> Unable to get access to Bluetooth LE GATT descriptor value raw
              data. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GET_DESCRIPTOR_VALUE_DATA_FAILED">
            <summary> Unable to get access to Bluetooth LE GATT descriptor value
              data. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GET_CHARACTERISTIC_UUID_FAILED">
            <summary> Unable to read Bluetooth LE GATT characteristic UUID. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GET_CHARACTERISTIC_PROPETIES_FAILED">
            <summary> Unable to read Bluetooth LE GATT characteristic
              properties. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GET_DESCRIPTOR_VALUE_DATA_BUFFER_FAILED">
            <summary> Unable to get Bluetooth LE GATT descriptor value data
              buffer. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GET_CHARACTERISTIC_VALUE_DATA_BUFFER_FAILED">
            <summary> Unable to get Bluetooth LE GATT characteristic value data
              buffer. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GET_CHARACTERISTIC_VALUE_SIZE_FAILED">
            <summary> Unable to get Bluetooth LE GATT characteristic value
              size. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GET_CHARACTERISITC_VALUE_RAW_DATA_FAILED">
            <summary> Unable to get access to Bluetooth LE GATT characteristic value
              raw data. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GET_CHARACTERISITC_VALUE_DATA_FAILED">
            <summary> Unable to get access to Bluetooth LE GATT characteristic value
              data. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GET_DESCRIPTORS_LIST_SIZE_FAILED">
            <summary> Unable to read Bluetooth LE GATT descriptors list size
              (length). </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GET_SERVICE_UUID_FAILED">
            <summary> Unable to read Bluetooth LE GATT service UUID. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GET_CHARACTERISITCS_LIST_SIZE_FAILED">
            <summary> Unable to read Bluetooth LE GATT characteristics list size
              (length). </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GET_SERVICES_LIST_SIZE_FAILED">
            <summary> Unable to read Bluetooth LE GATT services list size
              (length). </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_START_GET_DEV_CONNECTED_STATUS_THREAD_FAILED">
            <summary> Unable to start reading device's connected status
              thread. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_CONNECTION_ESTABLISHING_FAILED">
            <summary> LL initiated a connection but the connection has failed to be
              established. Controller did not receive any packets from remote
              end. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GET_CONNECTED_STATUS_FAILED">
            <summary> Unable to get Bluetooth LE device connected status. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_START_GET_DEV_PAIRED_STATUS_THREAD_FAILED">
            <summary> Unable to start Bluetooth LE device paired status reading
              thread. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_MIC_FAILED">
            <summary> Connection was terminated because the Message Integrity Check
              (MIC) failed on a received packet. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GET_DEVICE_PAIRED_FAILED">
            <summary> Unable to get Bluetooth LE device's paired status. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_PROTOCOL_ERROR">
            <summary> GATT protocol error. Usually this error indicates that a client
              sent wrong data to a server. Or sometime it may indicates that server
              requires subscribing to a characteristic before it can accept any
              write requests. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_SERVER_CHARACTERISTIC_ADDED">
            <summary> The characteristic has already been added to the local GATT
              service. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_SERVER_CHARACTERISTIC_REMOVED">
            <summary> The characteristic has already been removed from the local GATT
              service. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_SERVER_SERVICE_ADDED">
            <summary> The service has already been added to the GATT
              server. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_SERVER_SERVICE_REMOVED">
            <summary> The service has already been removed from the GATT
              server. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_SERVER_RUNNING">
            <summary> The GATT server is running (advertising). </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_SERVER_NOT_RUNNING">
            <summary> The GATT server is not running. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_SERVER_CREATE_INIT_EVENT_FAILED">
            <summary> Failed to create GATT server thread initialization
              event. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_SERVER_CREATE_TERM_EVENT_FAILED">
            <summary> Failed to create GATT server thread termination
              event. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_SERVER_CREATE_THREAD_FAILED">
            <summary> Failed to create GATT server communication thread. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_SERVER_GET_SERVICE_FAILED">
            <summary> Failed to get GATT local service interface. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_SERVER_CREATE_PARAMS_FAILED">
            <summary> Unable to create local GATT characteristic parameters object. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_SERVER_SET_READ_PROTECTION_FAILED">
            <summary> Failed to set local GATT characteristic read protection level. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_SERVER_SET_WRITE_PROTECTION_FAILED">
            <summary> Failed to set local GATT characteristic write protection level. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_SERVER_SET_PROPERTIES_FAILED">
            <summary> Unable to set properties of a local GATT characteristic. </summary> 
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_SERVER_CREATE_CHARACTERISTIC_FAILED">
            <summary> Unable to create local GATT characteristic. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_SERVER_INVALID_CHARACTERISTIC">
            <summary> Local GATT characteristic was not created by unknown reason. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_SERVER_SET_ADV_PARAMS_FAILED">
            <summary> Failed to set local GATT service advertisement parameters. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_SERVER_PERIPHERAL_MODE_NOT_SUPPORTED">
            <summary> Bluetooth hardware does not support peripheral mode. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_SERVER_START_FAILED">
            <summary> Unable to publish local GATT service. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_SERVER_CREATE_SERVICE_FAILED">
            <summary> Unable to create local GATT service. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_SERVER_INVALID_SERVICE">
            <summary> Local GATT service was not created by unknown reason. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_SERVER_NOT_INITIALIZED">
            <summary> The GATT server is not initialized. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_SERVER_INITIALIZED">
            <summary> The GATT server has already been initialized. </summary> 
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_SERVER_SET_WRITE_EVENT_HANDLER_FAILED">
            <summary> Unable to set GATT local characteristic write request event handler. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_SERVER_SET_READ_EVENT_HANDLER_FAILED">
            <summary> Unable to set GATT local characteristic read request event handler. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_SERVER_SET_CLIENTS_CHANGED_EVENT_HANDLER_FAILED">
            <summary> Unable to set GATT local characteristic subscribed clients
              changed event handler. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_SERVER_GET_CLIENTS_LIST_FAILED">
            <summary> Unable to get list of the characteristic's subscribed clients. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_SERVER_GET_CLIENTS_COUNT_FAILED">
            <summary> Unable to get number of subscribed clients. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_SERVER_CHARACTERISTIC_NOT_NOTIFIABLE">
            <summary> Characteristic is not notifiable or indicatable. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_DIRECT_ADVERTISING_TIMEOUT">
            <summary> Directed advertising completed without a connection being
              created. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_SERVER_CREATE_MUTEX_FAILED">
            <summary> Unable to create GATT Server protection mutex. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_SERVER_OTHER_INSTANCE_RUNNING">
            <summary> Other instance of the GATT server is already running. Only
              one instance of the GATT server is allowed. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_ADMIN_RIGHTS_REQUIRED">
            <summary> The operation requires administrative rights. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_UNEXPECTED">
            <summary> Unexpected or unknown error. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_SET_SCAN_PARAMS_FAILED">
            <summary> Unable to set Bluetooth LE scan parameters. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_WRITE_WITHOUT_RESPONSE_NOT_SUPPORTED">
            <summary> A characteristic does not support the Write Without Response
              operation. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_CREATE_SCAN_PARAMS_SET_EVENT_FAILED">
            <summary> Unable to create scan parameters changing event. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_SET_ADV_PARAMS_FAILED">
            <summary> Unable to set Bluetooth LE advertising parameters. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_WRONG_CONNECTION_INTERVAL">
            <summary> The error code indicates that the remote device terminated the
              connection because of an unacceptable connection interval. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GET_CONNECTION_PHY_VALUE_FAILED">
            <summary> Get connection PHY value failed. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_OPEN_PROCESS_TOKEN_FAILED">
            <summary> Unable to open process token. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_LOOKUP_PRIVILEGE_FAILED">
            <summary> Unable to find one or more required privilege. </summary> 
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_ADJUST_PRIVILEGE_FAILED">
            <summary> Unable to change one or more privilege. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_ALLOCATE_SID_FAILED">
            <summary> Unable to allocate and initialize SID. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_TAKE_OWNERSHIP_FAILED">
            <summary> Unable to take registry key ownership. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_SET_ACL_FAILED">
            <summary> Unable to set ACL. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_SET_REGISTRY_RIGHTS_FAILED">
            <summary> Unable to change registry access rights. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_INVALID_CHARACTERISTIC_CONFIGURATION">
            <summary> The characteristic has invalid configuration. This error means
              that the characteristic has both <c>IsNotifiable</c> and
              <c>IsIndicatable</c> properties are set to <c>True</c>. Set one of
              the property to <c>False</c>. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_CREATE_STOPPED_EVENT_FAILED">
            <summary> Unable to create asynchronous operation termination indication
              event. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_DISCOVERING_TERMINATED">
            <summary> Discovering has been terminated. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_DISCOVERING_CANCELED">
            <summary> Discovering has been canceled (aborted) by the system. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_CONNECTION_TERMINATED">
            <summary> Local device terminated the connection. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_INIT_ADVERTISEMENT_FAILED">
            <summary> Bluetooth LE advertisement initialization failed. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_UNSUPPORTED_ADVERTISEMENT_TYPE">
            <summary> Bluetooth LE advertisement type is not supported. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_INVALID_ADVERTISEMENT_FORMAT">
            <summary> Bluetooth LE advertisement has invalid format. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_RADIO_UNAVAILABLE">
            <summary> A Bluetooth LE Radio is not available. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GET_CONNECTION_PARAMS_FAILED">
            <summary> Unable to get the current connection parameters. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_INVALID_CONNECTION_PARAMS">
            <summary> Invalid or unknown preferred connection parameters type. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_SET_CONNECTION_PARAMS_FAILED">
            <summary> Unable to set the current connection parameters. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_EXT_ADV_NOT_SUPPORTED">
            <summary> The extended advertisement properties are not supported.
              Set the <c>UseExtendedAdvertisement</c> property of the
              <c>TwclBluetoothLeAdvertiser</c> component to <c>False</c> and
              try to restart the advertisement. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_SET_EXT_ADV_FAILED">
            <summary> Set extended advertisement properties failed. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_SERVER_SET_DISCONNECT_EVENT_HANDLER_FAILED">
            <summary> Unable to set client disconnect event handler for the GATT
              server. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_SERVER_CLIENT_NOT_SUBSCRIBED">
            <summary> The client is not subscribed to any GATT server characteristic. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_SERVER_CLIENT_GET_MAX_NOTIFICATION_SIZE_FAILED">
            <summary> Unable to read maximum notification size. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GET_MAX_PDU_SIZE_FAILED">
            <summary> Unable to get maximum PDU size. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_AUTH_UNKNOWN">
            <summary> Unknown or unexpected error appeared during pairing
              procedure. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_CLIENT_SET_DISCONNECT_EVENT_HANDLER_FAILED">
            <summary> Unable to set disconnect event handler for the GATT client. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_SERVER_SET_DESCRIPTION_FAILED">
            <summary> Unable to set local GATT characteristic user-friendly description. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_SERVER_GET_FORMATS_LIST_FAILED">
            <summary> Unable to get GATT local characteristic presentation formats list. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_SERVER_CREATE_FORMAT_STATICS_FAILED">
            <summary> Unable to create GATT local characteristic presentation format statics. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_SERVER_CREATE_FORMAT_FAILED">
            <summary> Unable to create GATT local characteristic presentation format. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_SERVER_ADD_FORMAT_FAILED">
            <summary> Unable to add GATT local characteristic presentation format. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GET_USER_DESCRIPTION_FAILED">
            <summary> Read characteristic's user description descriptor failed. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_INVALID_DESCRIPTOR_UUID">
            <summary> The descriptor with given UUID can not be used as custom
              descriptor in GATT server. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_SERVER_CREATE_DESCRIPTOR_FAILED">
            <summary> Create custom descriptor failed. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_SERVER_ADD_DESCRIPTOR_FAILED">
            <summary> Unable to add custom descriptor. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_SERVER_SET_DESCRIPTOR_VALUE_FAILED">
            <summary> Set descriptor's value failed. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_SERVER_SET_DESCRIPTOR_READ_PROTECTION_FAILED">
            <summary> Failed to set local GATT descriptor read protection level. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_SERVER_SET_DESCRIPTOR_WRITE_PROTECTION_FAILED">
            <summary> Failed to set local GATT descriptor write protection level. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_SERVER_GET_CREATE_DESCRIPTOR_RESULT_FAILED">
            <summary> Unable to get result of descriptor creation operation. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_SERVER_GET_CREATE_DESCRIPTOR_ERROR_FAILED">
            <summary> Unable to get result code of description creation operation. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GET_CONNECTION_PHY_FAILED">
            <summary> Unable to get Bluetooth LE connection PHY data. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GET_CONNECTION_TX_PHY_FAILED">
            <summary> Get transmit PHY information failed. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GET_CONNECTION_RX_PHY_FAILED">
            <summary> Get receive PHY information failed. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_NOTHING_ADVERTISE">
            <summary> There is no advertisements that can be advertised. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_TOO_MANY_ADVERTISEMENTS">
            <summary> Too many advertisements. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_SERVER_SEND_RESPONSE_FAILED">
            <summary> Unable to send response to a connected GATT client. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_SERVER_WRITE_WITHOUT_RESPONSE">
            <summary> The write operation was requested as Write Without Response. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_GATT_SERVER_RESPONSE_ALREADY_SENT">
            <summary> The response was already sent. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_CLIENT_NOT_CONNECTED">
            <summary> A client is not connected to a Bluetooth device. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_SUBSCRIBE_FAILED">
            <summary> Unable to start subscribing thread. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_UNSUBSCRIBE_FAILED">
            <summary> Unable to start unsubscribing thread. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_WII_REMOTE_BASE">
            <summary> The base error code for Wii Remote errors. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_WII_REMOTE_ENUM_HID_FAILED">
            <summary> Can not create HID devices list. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_WII_REMOTE_NOT_INSTALLED">
            <summary> A Wii Remote controller has not been installed.</summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_WII_REMOTE_CREATE_READ_EVENT_FAILED">
            <summary> Unable to create overlapped read event. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_WII_REMOTE_CREATE_WRITE_EVENT_FAILED">
            <summary> Unable to create overlapped write event. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_WII_REMOTE_CONNECT_FAILED">
            <summary> Unable to connect to the Wii Remote controller. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_WII_REMOTE_HID_UNABLE_CREATE_MUTEX">
            <summary> Unable to create HID API access mutex. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_WII_REMOTE_HID_SUBSYSTEM_NOT_AVAILABLE">
            <summary> HID subsystem is not available on this platform. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_WII_REMOTE_HID_NOT_SUPPORTED">
            <summary> Not all required HID features are supported by the
              system. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_WII_REMOTE_READ_REPORT_FAILED">
            <summary> Read data from the Wii Remote failed. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_WII_REMOTE_WRITE_REPORT_FAILED">
            <summary> Write data to the Wii Remote failed. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_WII_REMOTE_WRITE_REPORT_TIMEOUT">
            <summary> Write data to the Wii Remote has timed out. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_WII_REMOTE_CREATE_READ_MEMORY_EVENT_FAILED">
            <summary> Unable to create read memory event object. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_WII_REMOTE_CREATE_WRITE_MEMORY_EVENT_FAILED">
            <summary> Unable to create write memory event object. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_WII_REMOTE_NOT_INITIALIZED">
            <summary> The Wii Remote controller has not been initialized
              yet. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_WII_REMOTE_IR_LEVEL_WRONG">
            <summary> Wrong IR sensor level has been specified. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_WII_REMOTE_IR_LEVEL_UNKNOWN">
            <summary> Unknown IR sensor level has been specified. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_WII_REMOTE_IR_MODE_WRONG">
            <summary> Wrong IR sensor mode has been specified. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_WII_REMOTE_IR_MODE_UNKNOWN">
            <summary> Unknown IR sensor mode has been specified. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_WII_REMOTE_EXTENSION_NOT_FOUND">
            <summary> The extension has not been detected (or partially inserted)
              during initialization. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_WII_REMOTE_EXTENSION_UNKNOWN">
            <summary> Unknown or unsupported extension has been attached. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_WII_REMOTE_FEATURE_NOT_SUPPORTED">
            <summary> The requested feature is not supported. Probably because
              Balance Board is connected. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_WII_REMOTE_ACCELEROMETER_ENABLED">
            <summary> Accelerometer is already enabled. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_WII_REMOTE_ACCELEROMETER_DISABLED">
            <summary> Accelerometer is disabled. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_WII_REMOTE_INVALID_CONFIGURATION">
            <summary> Invalid Wii Remote configuration. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLED112_BASE">
            <summary> The base error code for BLED112 errors. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLED112_INVALID_PARAM">
            <summary> Command contained invalid parameter. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLED112_WRONG_STATE">
            <summary> Device is in wrong state to receive command. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLED112_OUT_OF_MEMORY">
            <summary> Device has run out of memory. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLED112_NOT_IMPLEMENTED">
            <summary> Feature is not implemented. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLED112_INVALID_COMMAND">
            <summary> Command was not recognized. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLED112_TIMEOUT">
            <summary> Command or Procedure failed due to timeout. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLED112_NOT_CONNECTED">
            <summary> Connection handle passed is to command is not a valid
              handle. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLED112_FLOW">
            <summary> Command would cause either underflow or overflow
              error. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLED112_USER_ATTRIBUTE">
            <summary> User attribute was accessed through API which is not
              supported. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLED112_INVALID_LICENSE_KEY">
            <summary> No valid license key found. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLED112_COMMAND_TOO_LONG">
            <summary> Command maximum length exceeded. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLED112_OUT_OF_BONDS">
            <summary> Bonding procedure can not be started because device has no space
              left for bond. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLED112_SCRIPT_OVERFLOW">
            <summary> Module was reset due to script stack overflow. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLED112_TOO_MANY_CONNECTIONS">
            <summary> Controller is at limit of connections it can support. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLED112_BUSY">
            <summary> Operation was rejected because the controller is busy and unable
              to process the request. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLED112_COMMAND_IN_POROGRESS">
            <summary> A command can not be executed because other command is still
              running. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLED112_SET_HANDFLOW_FAILED">
            <summary> Set handflow failed. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLED112_INVALID_RESPONSE_SIZE">
            <summary> Invalid response data size. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLED112_SET_QUEUE_SIZE_FAILED">
            <summary> Unable to set input and output queue size. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLED112_SET_TIMEOUTS_FAILED">
            <summary> Unable to set communication timeouts. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLED112_SET_BAUD_RATE_FAILED">
            <summary> Unable to set required baud rate. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLED112_SET_DTR_FAILED">
            <summary> Set DTR control failed. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLED112_SET_LINE_CONTROL_FAILED">
            <summary> Set line control failed. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLED112_SET_CHARS_FAILED">
            <summary> Set the special characters failed. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLED112_PAIR_DURING_CONNECT">
            <summary> BLED112 does not support pairing. The pairing done during
              connection procedure. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLE_SNIFFER_BASE">
            <summary> The base error code for BLE sniffer errors. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLE_SNIFFER_ACTIVE">
            <summary> The BLE sniffer is already active. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLE_SNIFFER_NOT_ACTIVE">
            <summary> The BLE sniffer is not active. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLE_SNIFFER_CREATE_INIT_EVENT_FAILED">
            <summary> Unable to create the thread initialization event. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLE_SNIFFER_CREATE_TERM_EVENT_FAILED">
            <summary> Unable to create the thread termination event. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLE_SNIFFER_START_THREAD_FAILED">
            <summary> Unable to start BLE sniffer working thread. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLE_SNIFFER_CC2540_DEVICE_NOT_FOUND">
            <summary> The CC2540 device was not found. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLE_SNIFFER_GET_IDENT_FAILED">
            <summary> Unable to read BLE sniffer device ident. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLE_SNIFFER_SET_POWER_FAILED">
            <summary> Set BLE sniffer device power failed. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLE_SNIFFER_GET_POWER_FAILED">
            <summary> Get BLE sniffer device power failed. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLE_SNIFFER_SET_CHANNEL_FAILED">
            <summary> Set capturing channel failed. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLE_SNIFFER_START_CAPTURE_FAILED">
            <summary> Unable to start packet capturing. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_AUDIO_SWITCHER_BASE">
            <summary> The base error code for audio switcher errors. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_AUDIO_SWITCHER_CLOSED">
            <summary> The Audio Switcher is already closed. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_AUDIO_SWITCHER_OPENED">
            <summary> The Audio Switcher is already opened. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_AUDIO_SWITCHER_NOT_OPENED">
            <summary> The Audio Switcher is not opened. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_AUDIO_SWITCHER_COM_INIT_FAILED">
            <summary> COM initialization failed. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_AUDIO_SWITCHER_CREATE_ENUMERATOR_FAILED">
            <summary> Create device enumerator failed. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_AUDIO_SWITCHER_REGISTER_EVENT_FAILED">
            <summary> Unable to register audio device changes event handler. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_AUDIO_SWITCHER_ENUM_ENDPOINTS_FAILED">
            <summary> Unable to enumerate audio endpoints. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_AUDIO_SWITCHER_GET_ENDPOIN_COUNT_FAILED">
            <summary> Get audio endpoints count failed. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_AUDIO_SWITCHER_CREATE_CONFIGURATOR_FAILED">
            <summary> Create Audio configurator failed. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_AUDIO_SWITCHER_SET_DEFAULT_DEVICE_FAILED">
            <summary> Unable to change default Audio Device. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_AUDIO_SWITCHER_FEATURE_NOT_SUPPORTED">
            <summary> Audio Switcher is not supported on this platform. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_AUDIO_SWITCHER_DEVICE_NOT_FOUND">
            <summary> The specified device not found. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_AUDIO_SWITCHER_INVALID_DEVICE">
            <summary> Invalid device selected. Connect and Disconnect features are
              supprted for Bluetooth Audio Devices only. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_AUDIO_SWITCHER_DEVICE_CONNECTED">
            <summary> The device is already connected. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_AUDIO_SWITCHER_DEVICE_DISCONNECTED">
            <summary> The device is disconnected. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_AUDIO_SWITCHER_CREATE_TOPOLOGY_FAILED">
            <summary> Unable to create device topology object. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_AUDIO_SWITCHER_GET_CONNECTORS_COUNT_FAILED">
            <summary> Unable to get device topology connectors number. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_AUDIO_SWITCHER_CONNECT_FAILED">
            <summary> Unable to connect to device. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_AUDIO_SWITCHER_DISCONNECT_FAILED">
            <summary> Unable to disconnect from device. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothErrors.WCL_E_AUDIO_SWITCHER_NO_CONNECTORS_FOUND">
            <summary> Not device connectors found. </summary>
        </member>
        <member name="T:wclBluetooth.wclEBluetooth">
            <summary> The base exception class for all Bluetooth
              exceptions. </summary>
            <seealso cref="T:wclCommon.wclException" />
        </member>
        <member name="M:wclBluetooth.wclEBluetooth.#ctor(System.String)">
            <summary> Initializes a new instance of the exception class with a specified error message. </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:wclBluetooth.wclEBluetoothClient">
            <summary> The Bluetooth clients exceptions. </summary>
            <seealso cref="T:wclBluetooth.wclEBluetooth" />
        </member>
        <member name="M:wclBluetooth.wclEBluetoothClient.#ctor(System.String)">
            <summary> Initializes a new instance of the exception class with a specified error message. </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:wclBluetooth.wclEBluetoothServer">
            <summary> The Bluetooth server exceptions. </summary>
            <seealso cref="T:wclBluetooth.wclEBluetooth" />
        </member>
        <member name="M:wclBluetooth.wclEBluetoothServer.#ctor(System.String)">
            <summary> Initializes a new instance of the exception class with a specified error message. </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:wclBluetooth.wclEGattClient">
            <summary> The Bluetooth GATT client exceptions. </summary>
            <seealso cref="T:wclBluetooth.wclEBluetoothClient" />
        </member>
        <member name="M:wclBluetooth.wclEGattClient.#ctor(System.String)">
            <summary> Initializes a new instance of the exception class with a specified error message. </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:wclBluetooth.wclEGattServer">
            <summary> The Bluetooth GATT server exceptions. </summary>
            <seealso cref="T:wclBluetooth.wclEBluetoothServer" />
        </member>
        <member name="M:wclBluetooth.wclEGattServer.#ctor(System.String)">
            <summary> Initializes a new instance of the exception class with a specified error message. </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:wclBluetooth.wclEBluetoothLeBeacon">
            <summary> The Bluetooth LE beacon exception. </summary>
            <seealso cref="T:wclBluetooth.wclEBluetooth" />
        </member>
        <member name="M:wclBluetooth.wclEBluetoothLeBeacon.#ctor(System.String)">
            <summary> Initializes a new instance of the exception class with a specified error message. </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:wclBluetooth.wclGattClient">
            <summary> Bluetooth Low Energy GATT client. </summary>
            <remarks> The <c>TwclGattClient</c> component enables an
              application to connect to a Bluetooth Low Energy device and work
              with GATT profiles. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothComponent" />
        </member>
        <member name="M:wclBluetooth.wclGattClient.DoCharacteristicChanged(System.UInt16,System.Byte[])">
            <summary> Fires the <c>OnCharacteristicChanged</c> event. </summary>
            <param name="Handle"> A changed characteristic handle. </param>
            <param name="Value"> A characteristic value. </param>
            <remarks> The <c>Value</c> parameter is valid only inside the event
              handler. If an application needs to use it outside the event handler
              it must be copied. </remarks>
        </member>
        <member name="M:wclBluetooth.wclGattClient.DoConnectionParamsChanged">
            <summary> Fires the <c>OnConnectionParamsChanged</c> event. </summary>
        </member>
        <member name="M:wclBluetooth.wclGattClient.DoConnectionPhyChanged">
            <summary> Fires the <c>OnConnectionPhyChanged</c> event. </summary>
        </member>
        <member name="M:wclBluetooth.wclGattClient.DoMaxPduSizeChanged">
            <summary> Fires the <c>OnMaxPduSizeChanged</c> event. </summary>
        </member>
        <member name="M:wclBluetooth.wclGattClient.DoConnect(System.Int32)">
            <summary> Fires the <c>OnConnected</c> event. </summary>
            <param name="Error"> The operation result. </param>
        </member>
        <member name="M:wclBluetooth.wclGattClient.DoDisconnect(System.Int32)">
            <summary> Fires then <c>OnDisconnected</c> event. </summary>
        </member>
        <member name="M:wclBluetooth.wclGattClient.#ctor">
            <summary> Creates new <c>TwclGattClient</c>
              component. </summary>
        </member>
        <member name="M:wclBluetooth.wclGattClient.Connect(wclBluetooth.wclBluetoothRadio)">
            <summary> Connects to a remote Bluetooth LE device. </summary>
            <param name="Radio"> The <see cref="T:wclBluetooth.wclBluetoothRadio" /> object used
              to communicate with a remote Bluetooth device. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> The method starts connection to a remote Bluetooth LE device.
              When connection operation completed the <c>OnConnected</c> event will
              fire. The operation result will be passed into the <c>OnConnected</c>
              event. </remarks>
        </member>
        <member name="M:wclBluetooth.wclGattClient.Disconnect">
            <summary> Disconnects from a remote device. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclGattClient.FindCharacteristic(wclBluetooth.wclGattService,wclBluetooth.wclGattUuid,System.Nullable{wclBluetooth.wclGattCharacteristic}@,wclBluetooth.wclGattOperationFlag)">
            <summary> The method searches the characteristic in given service with
              the specified UUID. </summary>
            <param name="Service"> The GATT services. </param>
            <param name="Uuid"> The required characteristic's UUID. </param>
            <param name="Characteristic"> If the method completed with success on
              output contains the required characteristic. If the method failed the
              value is undefined. </param>
            <param name="Flag"> Operation behavior flag. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclBluetooth.wclGattService" />
            <seealso cref="T:wclBluetooth.wclGattUuid" />
            <seealso cref="T:wclBluetooth.wclGattCharacteristic" />
            <seealso cref="T:wclBluetooth.wclGattOperationFlag" />
        </member>
        <member name="M:wclBluetooth.wclGattClient.FindService(wclBluetooth.wclGattUuid,System.Nullable{wclBluetooth.wclGattService}@,wclBluetooth.wclGattOperationFlag)">
            <summary> The method searches the service with specified
              UUID. </summary>
            <param name="Uuid"> The required service's UUID. </param>
            <param name="Service"> If the method completed with success on output
              contains the required service. If the method failed the value is
              undefined. </param>
            <param name="Flag"> Operation behavior flag. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclBluetooth.wclGattUuid" />
            <seealso cref="T:wclBluetooth.wclGattService" />
            <seealso cref="T:wclBluetooth.wclGattOperationFlag" />
        </member>
        <member name="M:wclBluetooth.wclGattClient.ReadCharacteristics(wclBluetooth.wclGattService,wclBluetooth.wclGattOperationFlag,wclBluetooth.wclGattCharacteristic[]@)">
            <summary> The method reads all the characteristics available for the
              specified service. </summary>
            <param name="Service"> Parent service returned by the call to
              the <c>ReadServices</c> method. </param>
            <param name="Flag"> Operation behavior flag. </param>
            <param name="Characteristics"> On output a list of the service's
              characteristics. An application is responsible to clean up a memory
              allocated for the dynamic array. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclBluetooth.wclGattService" />
            <seealso cref="T:wclBluetooth.wclGattOperationFlag" />
            <seealso cref="T:wclBluetooth.wclGattCharacteristic" />
        </member>
        <member name="M:wclBluetooth.wclGattClient.ReadCharacteristicValue(wclBluetooth.wclGattCharacteristic,wclBluetooth.wclGattOperationFlag,System.Byte[]@,wclBluetooth.wclGattProtectionLevel)">
            <summary> The method reads the value of the specified
              characteristic. </summary>
            <param name="Characteristic"> A <see cref="T:wclBluetooth.wclGattCharacteristic" />
              structure obtained by previous call to the <c>ReadCaracteristics</c>
              method. </param>
            <param name="Flag"> Operation behavior flag. </param>
            <param name="Value"> On output contains a characteristic's value
              as bytes array. An application is responsible to clean up a memory
              allocated for the dynamic array. </param>
            <param name="Protection"> Describes the required protection
              level. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclBluetooth.wclGattCharacteristic" />
            <seealso cref="T:wclBluetooth.wclGattOperationFlag" />
            <seealso cref="T:wclBluetooth.wclGattProtectionLevel" />
        </member>
        <member name="M:wclBluetooth.wclGattClient.ReadDescriptors(wclBluetooth.wclGattCharacteristic,wclBluetooth.wclGattOperationFlag,wclBluetooth.wclGattDescriptor[]@)">
            <summary> The method reads all the descriptors available for the
              specified characteristic. </summary>
            <param name="Characteristic"> A <see cref="T:wclBluetooth.wclGattCharacteristic" />
              structure obtained by previous call to the <c>ReadCaracteristics</c>
              method. </param>
            <param name="Flag"> Operation behavior flag. </param>
            <param name="Descriptors"> On output contains the list of the
              characteristic's descriptors. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclBluetooth.wclGattCharacteristic" />
            <seealso cref="T:wclBluetooth.wclGattOperationFlag" />
            <seealso cref="T:wclBluetooth.wclGattDescriptor" />
        </member>
        <member name="M:wclBluetooth.wclGattClient.ReadDescriptorValue(wclBluetooth.wclGattDescriptor,wclBluetooth.wclGattOperationFlag,wclBluetooth.wclGattDescriptorValue@,wclBluetooth.wclGattProtectionLevel)">
            <summary> The method reads the value of the specified
              descriptor. </summary>
            <param name="Descriptor"> A <see cref="T:wclBluetooth.wclGattDescriptor" /> obtained
              by previous call to the <c>ReadDescriptors</c> method. </param>
            <param name="Flag"> Operation behavior flag. </param>
            <param name="Value"> A descriptor's value. </param>
            <param name="Protection"> Describes the required protection
              level. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclBluetooth.wclGattDescriptor" />
            <seealso cref="T:wclBluetooth.wclGattOperationFlag" />
            <seealso cref="T:wclBluetooth.wclGattDescriptorValue" />
            <seealso cref="T:wclBluetooth.wclGattProtectionLevel" />
        </member>
        <member name="M:wclBluetooth.wclGattClient.ReadIncludedServices(wclBluetooth.wclGattService,wclBluetooth.wclGattOperationFlag,wclBluetooth.wclGattService[]@)">
            <summary> The method reads all the included services available for a
              given service. </summary>
            <param name="Service"> Parent service returned by the call to
              the <c>ReadServices</c> method. </param>
            <param name="Flag"> Operation behavior flag. </param>
            <param name="Services"> On output a list of available GATT services.
              An application is responsible to clean up a memory allocated for the
              dynamic array. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclBluetooth.wclGattService" />
            <seealso cref="T:wclBluetooth.wclGattOperationFlag" />
            <seealso cref="T:wclBluetooth.wclGattService" />
        </member>
        <member name="M:wclBluetooth.wclGattClient.ReadServices(wclBluetooth.wclGattOperationFlag,wclBluetooth.wclGattService[]@)">
            <summary> Reads available services from a remote Bluetooth LE
              device. </summary>
            <param name="Flag"> Operation behavior flag. </param>
            <param name="Services"> On output a list of available GATT services.
              An application is responsible to clean up a memory allocated for the
              dynamic array. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclBluetooth.wclGattOperationFlag" />
            <seealso cref="T:wclBluetooth.wclGattService" />
        </member>
        <member name="M:wclBluetooth.wclGattClient.WriteCharacteristicValue(wclBluetooth.wclGattCharacteristic,System.Byte[],wclBluetooth.wclGattProtectionLevel,wclBluetooth.wclGattWriteKind)">
            <summary> The method writes the specified characteristic value to the
              Bluetooth device. </summary>
            <param name="Characteristic"> A <see cref="T:wclBluetooth.wclGattCharacteristic" />
              structure obtained by previous call to the <c>ReadCaracteristics</c>
              method. </param>
            <param name="Value"> Contains a characteristic's value as bytes
              array. </param>
            <param name="Protection"> Describes the required protection
              level. </param>
            <param name="WriteKind"> The write operation mode. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclBluetooth.wclGattCharacteristic" />
            <seealso cref="T:wclBluetooth.wclGattProtectionLevel" />
            <seealso cref="T:wclBluetooth.wclGattWriteKind" />
        </member>
        <member name="M:wclBluetooth.wclGattClient.WriteDescriptorValue(wclBluetooth.wclGattDescriptor,wclBluetooth.wclGattDescriptorValue,wclBluetooth.wclGattProtectionLevel)">
            <summary> The method writes the specified descriptor value to the
              Bluetooth device. </summary>
            <param name="Descriptor"> A <see cref="T:wclBluetooth.wclGattDescriptor" /> obtained
              by previous call to the <c>ReadDescriptors</c> method. </param>
            <param name="Value"> A descriptor's value. </param>
            <param name="Protection"> Describes the required protection
              level. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclBluetooth.wclGattDescriptor" />
            <seealso cref="T:wclBluetooth.wclGattDescriptorValue" />
            <seealso cref="T:wclBluetooth.wclGattProtectionLevel" />
        </member>
        <member name="M:wclBluetooth.wclGattClient.WriteClientConfiguration(wclBluetooth.wclGattCharacteristic,System.Boolean,wclBluetooth.wclGattOperationFlag,wclBluetooth.wclGattProtectionLevel,wclBluetooth.wclGattSubscribeKind)">
            <summary> Writes the client configuration descriptor to the
              device. </summary>
            <param name="Characteristic"> A characteristic object in that changes
              an application is interested. </param>
            <param name="Subscribe"> The value indicates should we subscribe
              or unsubscribe from the characteristic value changes. </param>
            <param name="Flag"> Operation behavior flag. </param>
            <param name="Protection"> Describes the required protection
              level. </param>
            <param name="SubscribeKind"> Indicates a characteristic value change
              notification method that should be used. If a characteristic has both
              <c>IsIndicatable</c> and <c>IsNotifiable</c> properties set then this
              parameter allows to control which notification method should be
              used. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> In order to receive notifications about characteristic
              value changes the client must set the Client Configuration Descriptor.
              An application can use this method to do it in easy way. </remarks>
            <seealso cref="T:wclBluetooth.wclGattCharacteristic" />
            <seealso cref="T:wclBluetooth.wclGattOperationFlag" />
            <seealso cref="T:wclBluetooth.wclGattProtectionLevel" />
            <seealso cref="T:wclBluetooth.wclGattSubscribeKind" />
        </member>
        <member name="M:wclBluetooth.wclGattClient.Subscribe(wclBluetooth.wclGattCharacteristic,wclBluetooth.wclGattSubscribeKind)">
            <summary> Subscribes for the characteristic changes
              notifications. </summary>
            <param name="Characteristic"> A characteristic object in that changes
              an application is interested. </param>
            <param name="SubscribeKind"> Indicates a characteristic value change
              notification method that should be used. If a characteristic has both
              <c>IsIndicatable</c> and <c>IsNotifiable</c> properties set then this
              parameter allows to control which notification method should be
              used. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclBluetooth.wclGattCharacteristic" />
            <seealso cref="T:wclBluetooth.wclGattOperationFlag" />
            <seealso cref="T:wclBluetooth.wclGattSubscribeKind" />
        </member>
        <member name="M:wclBluetooth.wclGattClient.Unsubscribe(wclBluetooth.wclGattCharacteristic,wclBluetooth.wclGattSubscribeKind)">
            <summary> Unsubscribes from the characteristic changes
              notifications. </summary>
            <param name="Characteristic"> A characteristic object in that changes
              an application is not interested any more. </param>
            <param name="SubscribeKind"> Indicates a characteristic value change
              notification method that should be used. If a characteristic has both
              <c>IsIndicatable</c> and <c>IsNotifiable</c> properties set then this
              parameter allows to control which notification method should be
              used. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclBluetooth.wclGattCharacteristic" />
            <seealso cref="T:wclBluetooth.wclGattSubscribeKind" />
        </member>
        <member name="M:wclBluetooth.wclGattClient.SubscribeForNotifications(wclBluetooth.wclGattCharacteristic,wclBluetooth.wclGattOperationFlag,wclBluetooth.wclGattProtectionLevel,wclBluetooth.wclGattSubscribeKind)">
            <summary> Subscribes for the characteristic changes
              notifications and writes the client configuration descriptor to the
              device. </summary>
            <param name="Characteristic"> A characteristic object in that changes
              an application is interested. </param>
            <param name="Flag"> Operation behavior flag. </param>
            <param name="Protection"> Describes the required protection
              level. </param>
            <param name="SubscribeKind"> Indicates a characteristic value change
              notification method that should be used. If a characteristic has both
              <c>IsIndicatable</c> and <c>IsNotifiable</c> properties set then this
              parameter allows to control which notification method should be
              used. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> You can use this method to replace calls to the
              <c>Subscribe</c> and to the <c>WriteClientConfiguration</c>
              methods. </remarks>
            <seealso cref="T:wclBluetooth.wclGattCharacteristic" />
            <seealso cref="T:wclBluetooth.wclGattOperationFlag" />
            <seealso cref="T:wclBluetooth.wclGattProtectionLevel" />
            <seealso cref="T:wclBluetooth.wclGattSubscribeKind" />
        </member>
        <member name="M:wclBluetooth.wclGattClient.UnsubscribeFromNotifications(wclBluetooth.wclGattCharacteristic,wclBluetooth.wclGattOperationFlag,wclBluetooth.wclGattProtectionLevel,wclBluetooth.wclGattSubscribeKind)">
            <summary> Unsubscribes from the characteristic changes
              notifications and writes the client configuration descriptor to the
              device. </summary>
            <param name="Characteristic"> A characteristic object in that changes
              an application is interested. </param>
            <param name="Flag"> Operation behavior flag. </param>
            <param name="Protection"> Describes the required protection
              level. </param>
            <param name="SubscribeKind"> Indicates a characteristic value change
              notification method that should be used. If a characteristic has both
              <c>IsIndicatable</c> and <c>IsNotifiable</c> properties set then this
              parameter allows to control which notification method should be
              used. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> You can use this method to replace calls to the
              <c>Unsubscribe</c> and to the <c>WriteClientConfiguration</c>
              methods. </remarks>
            <seealso cref="T:wclBluetooth.wclGattCharacteristic" />
            <seealso cref="T:wclBluetooth.wclGattOperationFlag" />
            <seealso cref="T:wclBluetooth.wclGattProtectionLevel" />
            <seealso cref="T:wclBluetooth.wclGattSubscribeKind" />
        </member>
        <member name="M:wclBluetooth.wclGattClient.GetConnectionParams(wclBluetooth.wclBluetoothLeConnectionParameters@)">
            <summary> Gets the current connection parameters. </summary>
            <param name="Params"> If the function completed with success on output
              contains the current connection parameters. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> This feature is supported with <c>BLED112</c> dongle and with
              <c>Microsoft</c> Bluetooth drivers on <c>Windows 11</c> and
              above. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeConnectionParameters" />
        </member>
        <member name="M:wclBluetooth.wclGattClient.SetConnectionParams(wclBluetooth.wclBluetoothLeConnectionParametersType)">
            <summary> Request the connection parameters change to the specified
              preferred connection parameters. </summary>
            <param name="Params"> The preferred Bluetooth LE connection parameters
              type. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> <para> When performing firmware updates, higher throughput is
              necessary to complete the operation swiftly for the user. In those
              scenarios, you should request <c>ppThroughputOptimized</c> connection
              parameters for the duration of the firmware update. That will reduce
              the number of concurrent connections to other Bluetooth peripherals,
              and should be used sparingly. </para>
              <para> Conversely, when connecting to multiple LE devices
              concurrently, you should use <c>ppPowerOptimized</c>. That will
              increase the acceptable peripheral latency for the connection,
              reducing the interval at which the LE device must respond to the
              host OS. That allows the local Bluetooth radio to schedule more
              connections concurrently, and reduces power usage on both the host OS
              and on the peripheral device. </para>
              <para> If the connection parameters were changed successfully the
              <c>OnConnectionParamsChanged</c> even fires. </para>
              <para> This feature is supported with <c>BLED112</c> dongle and with
              <c>Microsoft</c> Bluetooth drivers on <c>Windows 11</c> and
              above. </para> </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeConnectionParametersType" />
        </member>
        <member name="M:wclBluetooth.wclGattClient.SetConnectionParams(wclBluetooth.wclBluetoothLeConnectionParametersValue)">
            <summary> Request the connection parameters change to the specified
              preferred connection parameters. </summary>
            <param name="Params"> The preferred Bluetooth LE connection parameters
              value. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks><para> If the connection parameters were changed successfully
              the <c>OnConnectionParamsChanged</c> even fires. </para>
              <para> This feature is supported with <c>BLED112</c> dongle and with
              <c>Microsoft</c> Bluetooth drivers on <c>Windows 11</c> and
              above. </para> </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeConnectionParametersValue" />
        </member>
        <member name="M:wclBluetooth.wclGattClient.GetMaxPduSize(System.UInt16@)">
            <summary> Reads the maximum PDU size for the current connection. </summary>
            <param name="Size"> If the method completed with success on output
              contains the maximum PDU size. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> The PDU size includes header and payload. For example if
              PDU size is 23 bytes the allowed payload is 20 bytes. </remarks>
        </member>
        <member name="M:wclBluetooth.wclGattClient.GetConnectionPhyInfo(wclBluetooth.wclBluetoothLeConnectionPhy@)">
            <summary> Reads the Bluetooth LE physical layer (PHY)
              information. </summary>
            <param name="Info"> If the method completed with success on output
              contains the connection PHY information. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclBluetooth.wclBluetoothLeConnectionPhy" />
        </member>
        <member name="P:wclBluetooth.wclGattClient.Radio">
            <summary> Gets the Radio used for connection. </summary>
            <value> The <see cref="T:wclBluetooth.wclBluetoothRadio" /> object that used for
              connection. </value>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
        </member>
        <member name="P:wclBluetooth.wclGattClient.State">
            <summary> Gets the client state. </summary>
            <value> The client state. </value>
            <seealso cref="T:wclCommunication.wclClientState" />
        </member>
        <member name="P:wclBluetooth.wclGattClient.Address">
            <summary> Gets and sets a target Bluetooth device's MAC
              address. </summary>
            <value> The Bluetooth MAC address. </value>
            <remarks> If an application changes the property when connection is
              active the <see cref="T:wclBluetooth.wclEGattClient" /> exception
              raises. </remarks>
            <exception cref="T:wclBluetooth.wclEGattClient" />
        </member>
        <member name="P:wclBluetooth.wclGattClient.ConnectOnRead">
            <summary> Gets and sets connection mode. </summary>
            <value> The Boolean indicates the connection mode. </value>
            <remarks> If this property set to <c>True</c> the connection to a target
              device will be executed on first services read or when the OS decided
              to do that. If the property is <c>False</c> the connection will be
              executed (if possible) on <c>Connect</c> call. </remarks>
              /// <exception cref="T:wclBluetooth.wclEGattClient" />
        </member>
        <member name="P:wclBluetooth.wclGattClient.ForceNotifications">
            <summary> Gets and sets the notifications mode. </summary>
            <value> The Boolean indicates the notifications mode. </value>
            <remarks> If this property set to <c>True</c> the characteristic value
              changes notification (and/or indication) will work correctly with
              some boards (such as <c>Bluno</c>, <c>Bluno Meag</c> and some others)
              that do not have <c>Characteristic Client Configucation
              Descriptor</c>. </remarks>
        </member>
        <member name="E:wclBluetooth.wclGattClient.OnCharacteristicChanged">
            <summary> The event fires when a subscribed characteristic value has
              been changed. </summary>
            <remarks> To receive characteristic value change events an application
              must first subscribe for characteristic changes notification
              by calling <c>Subscribe</c> method. </remarks>
            <seealso cref="T:wclBluetooth.wclGattCharacteristicChangedEvent" />
        </member>
        <member name="E:wclBluetooth.wclGattClient.OnConnect">
            <summary> The event fires when a connection to a remote device has been
              established. </summary>
            <seealso cref="T:wclCommunication.wclClientConnectionConnectEvent" />
        </member>
        <member name="E:wclBluetooth.wclGattClient.OnConnectionParamsChanged">
            <summary> The event fires when the connection parameters
              changed. </summary>
            <remarks> <para> Once this event received an application can use the
              <c>GetConnectionParams</c> method to retrieve the current connection
              parameters. </para>
              <para> This feature is supported with <c>BLED112</c> dongle and with
              <c>Microsoft</c> Bluetooth drivers on <c>Windows 11</c> and
              above. </para> </remarks>
        </member>
        <member name="E:wclBluetooth.wclGattClient.OnConnectionPhyChanged">
            <summary> The event fires when the connection PHY changed. </summary>
            <remarks> <para> Once this event received an application can use the
              <c>GetConnectionParams</c> method to get the current connection
              parameters. </para>
              <para> This feature is supported with <c>Microsoft</c> Bluetooth
              drivers on <c>Windows 11</c> and above. </para> </remarks>
        </member>
        <member name="E:wclBluetooth.wclGattClient.OnDisconnect">
            <summary> The even fires when a connection to a remote device has been
              closed. </summary>
            <seealso cref="T:wclCommunication.wclClientConnectionDisconnectEvent" />
        </member>
        <member name="E:wclBluetooth.wclGattClient.OnMaxPduSizeChanged">
            <summary> The event fires when the maximum PDU size changed. </summary>
            <remarks> Once the event fires an application can use the
              <c>GetMaxPduSize</c> method to read the current maximum PDU
              size. </remarks>
        </member>
        <member name="T:wclBluetooth.wclGattServer">
            <summary> Bluetooth Low Energy GATT server. </summary>
            <remarks> The <c>TwclGattServer</c> component enables an
              application to act as GATT peripheral device. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothComponent" />
        </member>
        <member name="M:wclBluetooth.wclGattServer.DoClientConnected(wclBluetooth.wclGattServerClient)">
            <summary> Fires the <c>OnClientConnected</c> event. </summary>
            <param name="Client"> The <see cref="T:wclBluetooth.wclGattServerClient" /> object
              that represents a connected client. </param>
            <seealso cref="T:wclBluetooth.wclGattServerClient" />
        </member>
        <member name="M:wclBluetooth.wclGattServer.DoClientDisconnected(wclBluetooth.wclGattServerClient)">
            <summary> Fires the <c>OnClientDisconnected</c> event. </summary>
            <param name="Client"> The <see cref="T:wclBluetooth.wclGattServerClient" /> object
              that represents a disconnected client. </param>
            <seealso cref="T:wclBluetooth.wclGattServerClient" />
        </member>
        <member name="M:wclBluetooth.wclGattServer.DoConnectionParamsChanged(wclBluetooth.wclGattServerClient)">
            <summary> Fires the <c>OnConnectionParamsChanged</c> event. </summary>
            <param name="Client"> The <see cref="T:wclBluetooth.wclGattServerClient" /> object
              that represents a disconnected client. </param>
            <seealso cref="T:wclBluetooth.wclGattServerClient" />
        </member>
        <member name="M:wclBluetooth.wclGattServer.DoConnectionPhyChanged(wclBluetooth.wclGattServerClient)">
            <summary> Fires the <c>OnConnectionPhyChanged</c> event. </summary>
            <param name="Client"> The <see cref="T:wclBluetooth.wclGattServerClient" /> object
              that represents a disconnected client. </param>
            <seealso cref="T:wclBluetooth.wclGattServerClient" />
        </member>
        <member name="M:wclBluetooth.wclGattServer.DoMaxPduSizeChanged(wclBluetooth.wclGattServerClient)">
            <summary> Fires the <c>OnMaxPduSizeChanged</c> event. </summary>
            <seealso cref="T:wclBluetooth.wclGattServerClient" />
        </member>
        <member name="M:wclBluetooth.wclGattServer.DoNotificationSizeChanged(wclBluetooth.wclGattServerClient)">
            <summary> Fires the <c>OnNotificationSizeChanged</c> event. </summary>
            <param name="Client"> The <see cref="T:wclBluetooth.wclGattServerClient" /> object
              that represents a client which changed the maximum notification
              size. </param>
            <seealso cref="T:wclBluetooth.wclGattServerClient" />
        </member>
        <member name="M:wclBluetooth.wclGattServer.DoRead(wclBluetooth.wclGattServerClient,wclBluetooth.wclGattLocalCharacteristic,wclBluetooth.wclGattLocalCharacteristicReadRequest)">
            <summary> Fires the <c>OnRead</c> event. </summary>
            <param name="Client"> The <see cref="T:wclBluetooth.wclGattServerClient" /> object
              that requested read. </param>
            <param name="Characteristic"> The local GATT characteristic object
              that requested the write operation. </param>
            <param name="Request"> The GATT read request object. </param>
            <remarks> This method is called when a remote GATT client requests
              read from the characteristic. An application must call the
              <c>Respond</c> method to send a data back to the device. </remarks>
            <seealso cref="T:wclBluetooth.wclGattServerClient" />
            <seealso cref="T:wclBluetooth.wclGattLocalCharacteristic" />
            <seealso cref="T:wclBluetooth.wclGattLocalCharacteristicReadRequest" />
        </member>
        <member name="M:wclBluetooth.wclGattServer.DoStarted">
            <summary> Fires the <c>OnStarted</c> event. </summary>
        </member>
        <member name="M:wclBluetooth.wclGattServer.DoStopped">
            <summary> Fires the <c>OnStopped</c> event. </summary>
        </member>
        <member name="M:wclBluetooth.wclGattServer.DoSubscribed(wclBluetooth.wclGattServerClient,wclBluetooth.wclGattLocalCharacteristic)">
            <summary> Fires the <c>OnSubscribed</c> event. </summary>
            <param name="Client"> The <see cref="T:wclBluetooth.wclGattServerClient" /> object
              that subscribed. </param>
            <param name="Characteristic"> The characteristic object for which writes
              is executing. </param>
            <seealso cref="T:wclBluetooth.wclGattServerClient" />
            <seealso cref="T:wclBluetooth.wclGattLocalCharacteristic" />
        </member>
        <member name="M:wclBluetooth.wclGattServer.DoUnsubscribed(wclBluetooth.wclGattServerClient,wclBluetooth.wclGattLocalCharacteristic)">
            <summary> Fires the <c>OnUnsubscribed</c> event. </summary>
            <param name="Client"> The <see cref="T:wclBluetooth.wclGattServerClient" /> object
              that unsubscribed. </param>
            <param name="Characteristic"> The characteristic object for which writes
              is executing. </param>
            <seealso cref="T:wclBluetooth.wclGattServerClient" />
            <seealso cref="T:wclBluetooth.wclGattLocalCharacteristic" />
        </member>
        <member name="M:wclBluetooth.wclGattServer.DoWrite(wclBluetooth.wclGattServerClient,wclBluetooth.wclGattLocalCharacteristic,wclBluetooth.wclGattLocalCharacteristicWriteRequest)">
            <summary> Fires the <c>OnWrite</c> event. </summary>
            <param name="Client"> The <see cref="T:wclBluetooth.wclGattServerClient" /> object
              that requested write. </param>
            <param name="Characteristic"> The local GATT characteristic object
              that requested the write operation. </param>
            <param name="Request"> The GATT characteristic write request
              object. </param>
            <seealso cref="T:wclBluetooth.wclGattServerClient" />
            <seealso cref="T:wclBluetooth.wclGattLocalCharacteristic" />
            <seealso cref="T:wclBluetooth.wclGattLocalCharacteristicWriteRequest" />
        </member>
        <member name="M:wclBluetooth.wclGattServer.#ctor">
            <summary> Creates new component. </summary>
        </member>
        <member name="M:wclBluetooth.wclGattServer.Initialize(wclBluetooth.wclBluetoothRadio)">
            <summary> Initializes Bluetooth LE GATT Server. </summary>
            <param name="Radio"> The <see cref="T:wclBluetooth.wclBluetoothRadio" /> object used
              to communicate with a remote Bluetooth device. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> <para> Before adding services and characteristics an
              application must initialize the server by calling this method. </para>
              <para> This feature is supported on Windows 10 with the Microsoft
              Bluetooth drivers or on any other Windows platform with BlueSoleil
              Bluetooth drivers. </para> </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
        </member>
        <member name="M:wclBluetooth.wclGattServer.Uninitialize">
            <summary> Uninitializes the Bluetooth LE GATT Server. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> <para> An application must call this method after stopping the
              server to release all allocated resources. </para>
              <para> This feature is supported on Windows 10 with the Microsoft
              Bluetooth drivers or on any other Windows platform with BlueSoleil
              Bluetooth drivers. </para> </remarks>
        </member>
        <member name="M:wclBluetooth.wclGattServer.Start">
            <summary> Starts the GATT server. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclGattServer.Stop">
            <summary> Stops the GATT server. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclGattServer.AddService(wclBluetooth.wclGattUuid,wclBluetooth.wclGattLocalService@)">
            <summary> Creates new local GATT service and adds it to the services
              list. </summary>
            <param name="Uuid"> The service's UUID. </param>
            <param name="Service"> If the function completed with success this
              parameter receives a just created GATT local service object. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclBluetooth.wclGattUuid" />
            <seealso cref="T:wclBluetooth.wclGattLocalService" />
        </member>
        <member name="M:wclBluetooth.wclGattServer.ClearServices">
            <summary> Clears the local services list. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclGattServer.DeleteService(System.Int32)">
            <summary> Deletes the service with given index. </summary>
            <param name="Index"> The service's index. The parameter must be in range
              between 0 and ServicesCount - 1. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclGattServer.Clients(System.Int32)">
            <summary> Gets the GATT server client by its index. </summary>
            <param name="Index"> The client's index. The parameter must be in range
              between 0 and ClientsCount - 1. If the parameter is out of range the
              <see cref="T:wclCommon.wclEInvalidArgument" /> exception raises. </param>
            <returns> The GATT server client object. </returns>
            <seealso cref="T:wclBluetooth.wclGattServerClient" />
            <exception cref="T:wclCommon.wclEInvalidArgument" />
        </member>
        <member name="P:wclBluetooth.wclGattServer.ClientsCount">
            <summary> Gets the clients count. </summary>
            <value> The clients count. </value>
        </member>
        <member name="P:wclBluetooth.wclGattServer.Initialized">
            <summary> Gets the server's state. </summary>
            <value> <c>True</c> if the server is running. </value>
        </member>
        <member name="P:wclBluetooth.wclGattServer.Radio">
            <summary> Gets the server's owner. </summary>
            <value> The <see cref="T:wclBluetooth.wclBluetoothRadio" /> object owns the
              connection. </value>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
        </member>
        <member name="P:wclBluetooth.wclGattServer.Started">
            <summary> Gets the server running status. </summary>
            <value> <c>True</c> if the server is advertising. </value>
        </member>
        <member name="M:wclBluetooth.wclGattServer.Services(System.Int32)">
            <summary> Gets the local GATT service by its index. </summary>
            <param name="Index"> The service's index. The parameter must be in range
              between 0 and ServicesCount - 1. If the parameter is out of range the
              <see cref="T:wclCommon.wclEInvalidArgument" /> exception raises. </param>
            <returns> The local GATT service object. </returns>
            <seealso cref="T:wclBluetooth.wclGattLocalService" />
            <exception cref="T:wclCommon.wclEInvalidArgument" />
            <exception cref="T:wclBluetooth.wclEGattServer" />
        </member>
        <member name="P:wclBluetooth.wclGattServer.ServicesCount">
            <summary> Gets the services count. </summary>
            <value> The services count. </value>
        </member>
        <member name="E:wclBluetooth.wclGattServer.OnClientConnected">
            <summary> The event fires when a client connected to the server. </summary>
            <seealso cref="T:wclBluetooth.wclGattServerClientEvent" />
        </member>
        <member name="E:wclBluetooth.wclGattServer.OnClientDisconnected">
            <summary> The event fires when a client disconnected from the server. </summary>
            <seealso cref="T:wclBluetooth.wclGattServerClientEvent" />
        </member>
        <member name="E:wclBluetooth.wclGattServer.OnConnectionParamsChanged">
            <summary> The event fires when the connection parameters
              changed. </summary>
            <remarks> <para> Once this event received an application can use the
              <c>GetConnectionParams</c> method to get the current connection
              parameters. </para>
              <para> This feature is supported with <c>Microsoft</c> Bluetooth
              drivers on <c>Windows 11</c> and above. </para> </remarks>
            <seealso cref="T:wclBluetooth.wclGattServerClientEvent" />
        </member>
        <member name="E:wclBluetooth.wclGattServer.OnConnectionPhyChanged">
            <summary> The event fires when the connection PHY changed. </summary>
            <remarks> <para> Once this event received an application can use the
              <c>GetConnectionPhyInfo</c> method to get the current connection
              parameters. </para>
              <para> This feature is supported with <c>Microsoft</c> Bluetooth
              drivers on <c>Windows 11</c> and above. </para> </remarks>
            <seealso cref="T:wclBluetooth.wclGattServerClientEvent" />
        </member>
        <member name="E:wclBluetooth.wclGattServer.OnMaxPduSizeChanged">
            <summary> The event fires when maximum PDU size changed for the
              connected client. </summary>
            <seealso cref="T:wclBluetooth.wclGattServerClientEvent" />
        </member>
        <member name="E:wclBluetooth.wclGattServer.OnNotificationSizeChanged">
            <summary> The event fires when a maximum notification size of a
              subscribed client has been changed. </summary>
            <seealso cref="T:wclBluetooth.wclGattServerClientEvent" />
        </member>
        <member name="E:wclBluetooth.wclGattServer.OnRead">
            <summary> The event fires when a remote GATT client requests
              characteristic's data read. </summary>
            <remarks> An application must call the <c>Respond</c> method to
              respond on the data read request. </remarks>
            <seealso cref="T:wclBluetooth.wclGattLocalCharacteristicReadEvent" />
        </member>
        <member name="E:wclBluetooth.wclGattServer.OnStarted">
            <summary> The event fires when the Bluetooth LE GATT Server has been
              successfully started. </summary>
        </member>
        <member name="E:wclBluetooth.wclGattServer.OnStopped">
            <summary> The event fires when the Bluetooth LE GATT Server has been
              stopped. </summary>
        </member>
        <member name="E:wclBluetooth.wclGattServer.OnSubscribed">
            <summary> The event fires when a remote GATT client subscribes to the
              characteristic changes notifications or indications. </summary>
            <seealso cref="T:wclBluetooth.wclGattLocalCharacteristicSubscribedClientsChangedEvent" />
        </member>
        <member name="E:wclBluetooth.wclGattServer.OnUnsubscribed">
            <summary> The event fires when a remote GATT client unsubscribes from
              the characteristic changes notifications or indications. </summary>
            <seealso cref="T:wclBluetooth.wclGattLocalCharacteristicSubscribedClientsChangedEvent" />
        </member>
        <member name="E:wclBluetooth.wclGattServer.OnWrite">
            <summary> The event fires when a remote device writes data to the
              characteristic. </summary>
            <seealso cref="T:wclBluetooth.wclGattLocalCharacteristicWriteEvent" />
        </member>
        <member name="T:wclBluetooth.wclGattLocalAttribute">
            <summary> The base class for local GATT attributes (characteristics,
              services). </summary>
        </member>
        <member name="M:wclBluetooth.wclGattLocalAttribute.Enter">
            <summary> Enters the GATT local attribute protection critical
              section. </summary>
        </member>
        <member name="M:wclBluetooth.wclGattLocalAttribute.Leave">
            <summary> Leaves the GATT local attribute protection critical
              section. </summary>
        </member>
        <member name="M:wclBluetooth.wclGattLocalAttribute.#ctor(wclBluetooth.wclGattUuid)">
            <summary> Creates new local GATT attribute. </summary>
            <param name="Uuid"> The attribute's UUID. </param>
            <seealso cref="T:wclBluetooth.wclGattUuid" />
        </member>
        <member name="P:wclBluetooth.wclGattLocalAttribute.Uuid">
            <summary> Gets the attribute's UUID. </summary>
            <value> The attribute's UUID. </value>
            <seealso cref="T:wclBluetooth.wclGattUuid" />
        </member>
        <member name="T:wclBluetooth.wclGattLocalCharacteristic">
            <summary> This class represents a local GATT characteristic. </summary>
            <remarks> An application must not create or destroy this class directly.
              Instead of that an application must use methods of the
              <seealso cref="T:wclBluetooth.wclGattLocalService" /> class. </remarks>
            <seealso cref="T:wclBluetooth.wclGattLocalAttribute" />
        </member>
        <member name="M:wclBluetooth.wclGattLocalCharacteristic.HalAdd">
            <summary> The method implements a driver specific code to add
              characteristic to the local GATT service. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to implement a
              driver specified code that adds the GATT characteristic. </remarks>
        </member>
        <member name="M:wclBluetooth.wclGattLocalCharacteristic.HalRemove">
            <summary> The method implements a driver specific code to remove
              characteristic from the local GATT service. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to implement a
              driver specified code that removes the GATT characteristic. </remarks>
        </member>
        <member name="M:wclBluetooth.wclGattLocalCharacteristic.HalNotify(System.Int64,System.Byte[])">
            <summary> The function implements a driver specific code to send
              notification to the given subscribed client. </summary>
            <param name="Address"> The client's MAC address. </param>
            <param name="Data"> The notification data. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to implement a
              driver specified code that sends notification to the given subscribed
              client. </remarks>
        </member>
        <member name="M:wclBluetooth.wclGattLocalCharacteristic.#ctor(wclBluetooth.wclGattLocalService,wclBluetooth.wclGattUuid,wclBluetooth.wclGattLocalCharacteristicParameters)">
            <summary> Creates new local GATT characteristic. </summary>
            <param name="Service"> The local GATT service object that owns the
              characteristic. If this parameter is <c>nil</c> the
              <see cref="T:wclCommon.wclECritical" /> exception raises. </param>
            <param name="Uuid"> The characteristic's UUID. </param>
            <param name="Params"> The characteristic's parameters. </param>
            <remarks> An application must not create this class directly.
              Instead of that an application must use methods of the
              <see cref="T:wclBluetooth.wclGattLocalService" /> class. </remarks>
            <seealso cref="T:wclBluetooth.wclGattLocalService" />
            <seealso cref="T:wclBluetooth.wclGattUuid" />
            <seealso cref="T:wclBluetooth.wclGattLocalCharacteristicParameters" />
            <exception cref="T:wclCommon.wclECritical" />
        </member>
        <member name="M:wclBluetooth.wclGattLocalCharacteristic.Notify(System.Int64,System.Byte[])">
            <summary> Sends notification to the given subscribed client. </summary>
            <param name="Address"> The client's MAC address. </param>
            <param name="Data"> The notification data. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="P:wclBluetooth.wclGattLocalCharacteristic.Added">
            <summary> Gets the characteristic's status. </summary>
            <value> <c>True</c> if the characteristic has been successfully added to
              the local GATT service, <c>False</c> otherwise. </value>
        </member>
        <member name="P:wclBluetooth.wclGattLocalCharacteristic.Item(System.Int32)">
            <summary> Gets the subscribed client by its index. </summary>
            <param name="Index"> The client's index. The <c>Index</c> parameter
              must be in range between <c>0</c> and <c>Count - 1</c>. If the
              <c>Index</c> is out of range the <see cref="T:wclCommon.wclEInvalidArgument" />
              exception raises. </param>
            <value> The <see cref="T:wclBluetooth.wclGattServerClient" /> object. </value>
            <seealso cref="T:wclBluetooth.wclGattServerClient" />
            <exception cref="T:wclCommon.wclEInvalidArgument" />
        </member>
        <member name="P:wclBluetooth.wclGattLocalCharacteristic.Count">
            <summary> Gets the subscribed clients count. </summary>
            <value> The subscribed clients count. </value>
        </member>
        <member name="P:wclBluetooth.wclGattLocalCharacteristic.Error">
            <summary> Gets the characteristic's publishing error. </summary>
            <value> One of the WCL error code that indicates why characteristic
              has not been added. </value>
            <remarks> If adding characteristic to the service was failed this
              property contains the failure reason code. </remarks>
        </member>
        <member name="P:wclBluetooth.wclGattLocalCharacteristic.Params">
            <summary> Gets the characteristic's parameters. </summary>
            <value> The characteristic's parameters. </value>
            <seealso cref="T:wclBluetooth.wclGattLocalCharacteristicParameters" />
        </member>
        <member name="P:wclBluetooth.wclGattLocalCharacteristic.Service">
            <summary> Gets the GATT service object that owns the
              characteristic. </summary>
            <value> The local GATT service object. </value>
            <seealso cref="T:wclBluetooth.wclGattLocalService" />
        </member>
        <member name="T:wclBluetooth.wclGattLocalService">
            <summary> This class represents a local GATT service. </summary>
            <remarks> An application must not create or destroy this class directly.
              Instead of that an application must use methods of the
              <see cref="T:wclBluetooth.wclGattServerConnection" /> classes. </remarks>
            <seealso cref="T:wclBluetooth.wclGattLocalAttribute" />
        </member>
        <member name="M:wclBluetooth.wclGattLocalService.HalAdd">
            <summary> The method implements a driver specific code to add
              local GATT service to the GATT server. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to implement a
              driver specified code that adds the GATT service. </remarks>
        </member>
        <member name="M:wclBluetooth.wclGattLocalService.HalCreate">
            <summary> The method implements a driver specific code to create
              local GATT service to the GATT server. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to implement a
              driver specified code that creates the GATT service. </remarks>
        </member>
        <member name="M:wclBluetooth.wclGattLocalService.HalDestroy">
            <summary> The method implements a driver specific code to destroy
              local GATT service from the GATT server. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to implement a
              driver specified code that destroys the GATT service. </remarks>
        </member>
        <member name="M:wclBluetooth.wclGattLocalService.HalRemove">
            <summary> The method implements a driver specific code to remove
              local GATT service from the GATT server. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to implement a
              driver specified code that removes the GATT service. </remarks>
        </member>
        <member name="M:wclBluetooth.wclGattLocalService.HalCreateCharacteristic(wclBluetooth.wclGattUuid,wclBluetooth.wclGattLocalCharacteristicParameters,wclBluetooth.wclGattLocalCharacteristic@)">
            <summary> The function creates a driver specific GATT characteristic
              object. </summary>
            <param name="Uuid"> The characteristic UUID. </param>
            <param name="Params"> The characteristic parameters. </param>
            <param name="Characteristic"> If the function completed with success
              the parameter contains just created characteristic object. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to create a
              GATT characteristic. </remarks>
            <seealso cref="T:wclBluetooth.wclGattUuid" />
            <seealso cref="T:wclBluetooth.wclGattLocalCharacteristicParameters" />
            <seealso cref="T:wclBluetooth.wclGattLocalCharacteristic" />
        </member>
        <member name="M:wclBluetooth.wclGattLocalService.#ctor(wclBluetooth.wclGattServerConnection,wclBluetooth.wclGattUuid)">
            <summary> Creates new Local GATT service. </summary>
            <param name="Server"> The GATT server connection object that owns
              the service. If this parameter is <c>nil</c> the
              <seealso cref="T:wclCommon.wclECritical" /> raises. </param>
            <param name="Uuid"> The service's UUID. </param>
            <remarks> An application must not create this class directly.
              Instead of that an application must use methods of high-level
              classes. </remarks>
            <seealso cref="T:wclBluetooth.wclGattServerConnection" />
            <seealso cref="T:wclBluetooth.wclGattUuid" />
            <exception cref="T:wclCommon.wclECritical" />
        </member>
        <member name="M:wclBluetooth.wclGattLocalService.AddCharacteristic(wclBluetooth.wclGattUuid,wclBluetooth.wclGattLocalCharacteristicParameters,wclBluetooth.wclGattLocalCharacteristic@)">
            <summary> Creates new characteristic and adds it to the service
              characteristics list. </summary>
            <param name="Uuid"> The characteristic UUID. </param>
            <param name="Params"> The characteristic parameters. </param>
            <param name="Characteristic"> If the method completed with success the
              parameters contains a just created GATT characteristic
              object. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclBluetooth.wclGattUuid" />
            <seealso cref="T:wclBluetooth.wclGattLocalCharacteristicParameters" />
            <seealso cref="T:wclBluetooth.wclGattLocalCharacteristic" />
        </member>
        <member name="M:wclBluetooth.wclGattLocalService.ClearCharacteristics">
            <summary> Clears the characteristics list. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclGattLocalService.DeleteCharacteristic(System.Int32)">
            <summary> Deletes the characteristic with given index. </summary>
            <param name="Index"> The service's index. The parameter must be in range
              between 0 and ServicesCount - 1. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="P:wclBluetooth.wclGattLocalService.Connectable">
            <summary> Gets or sets a boolean that indicates if the GATT service is
              connectable. </summary>
            <value> A boolean that indicates if the GATT service is
              connectable. </value>
            <remarks> If the service has been published and an application
              changes the property the <see cref="T:wclBluetooth.wclEGattServer" /> exception
              raises. </remarks>
            <exception cref="T:wclBluetooth.wclEGattServer" />
        </member>
        <member name="P:wclBluetooth.wclGattLocalService.Discoverable">
            <summary> Gets or sets a boolean indicating that the GATT service is
              discoverable. </summary>
            <value> A boolean indicating that the GATT service is
              discoverable. </value>
            <remarks> If the service has been published and an application
              changes the property the <see cref="T:wclBluetooth.wclEGattServer" /> exception
              raises. </remarks>
            <exception cref="T:wclBluetooth.wclEGattServer" />
        </member>
        <member name="P:wclBluetooth.wclGattLocalService.Added">
            <summary> Gets the service state. </summary>
            <value> <c>True</c> if the service is added and published. <c>False</c>
              otherwise. </value>
        </member>
        <member name="P:wclBluetooth.wclGattLocalService.Item(System.Int32)">
            <summary> Gets the GATT characteristic by its index. </summary>
            <param name="Index"> The characteristic's index. The parameter must be
              in range between 0 and CharacteristicsCount - 1. If the parameter is
              out of range the <see cref="T:wclCommon.wclEInvalidArgument" /> exception
              raises. </param>
            <value> The local GATT characteristic. </value>
            <seealso cref="T:wclBluetooth.wclGattLocalCharacteristic" />
            <exception cref="T:wclCommon.wclEInvalidArgument" />
        </member>
        <member name="P:wclBluetooth.wclGattLocalService.CharacteristicsCount">
            <summary> Gets the characteristics count. </summary>
            <value> The characteristics count. </value>
        </member>
        <member name="P:wclBluetooth.wclGattLocalService.Error">
            <summary> Gets the service's publishing result code. </summary>
            <value> One of WCL errors code indicates the publishing result. </value>
            <remarks> If publishing the service was failed this property contains the
              failure reason code. </remarks>
        </member>
        <member name="P:wclBluetooth.wclGattLocalService.Server">
            <summary> Gets the GATT server object that owns the service. </summary>
            <value> The GATT server object. </value>
            <seealso cref="T:wclBluetooth.wclGattServerConnection" />
        </member>
        <member name="T:wclBluetooth.wclGattServerClient">
            <summary> The class represents a GATT client connected to the GATT
              server. </summary>
            <remarks> An application must not create and destroy objects of this
              class directly. The objects of this class managed by the
              <see cref="T:wclBluetooth.wclGattServerConnection" />. </remarks>
            <seealso cref="T:wclBluetooth.wclGattServerConnection" />
        </member>
        <member name="M:wclBluetooth.wclGattServerClient.AfterConnect(wclBluetooth.wclBluetoothGattServerClientParams)">
            <summary> The method called right after client connected. </summary>
            <param name="Params"> The additional driver-specific parameters that
              can be used during client initialization. Can be <c>nil</c> if
              the driver specific implementation does not need this. </param>
            <remarks> A derived class may override this method to provide additional
              initialization after the client connected to a GATT server. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothGattServerClientParams" />
        </member>
        <member name="M:wclBluetooth.wclGattServerClient.AfterDisconnect">
            <summary> The method right after a client disconnected from the server
              and before the client will be destroyed. </summary>
            <remarks> A derived class may override this method to provide additional
             finalization after client disconnected from a GATT server. </remarks>
        </member>
        <member name="M:wclBluetooth.wclGattServerClient.AfterSubscribed(wclBluetooth.wclGattLocalCharacteristic)">
            <summary> The method called right after the client subscribed to a
              characteristic. </summary>
            <param name="Characteristic"> A
              <see cref="T:wclBluetooth.wclGattLocalCharacteristic" /> object represents the
              subscribed characteristic. </param>
            <remarks> A derived class may override this method to provide additional
              initialization after client subscribed to the
              characteristic. </remarks>
            <seealso cref="T:wclBluetooth.wclGattLocalCharacteristic" />
        </member>
        <member name="M:wclBluetooth.wclGattServerClient.AfterUnsubscribed(wclBluetooth.wclGattLocalCharacteristic)">
            <summary> The method called right after the client unsubscribed from a
              characteristic. </summary>
            <param name="Characteristic"> A
              <see cref="T:wclBluetooth.wclGattLocalCharacteristic" /> object represents the
              unsubscribed characteristic. </param>
            <remarks> A derived class may override this method to provide additional
              finalization after client unsubscribed from the
              characteristic. </remarks>
            <seealso cref="T:wclBluetooth.wclGattLocalCharacteristic" />
        </member>
        <member name="M:wclBluetooth.wclGattServerClient.HalDisconnect">
            <summary> Provide a driver specific code to disconnect the client from a
              server. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide a driver
              specific code. </remarks>
        </member>
        <member name="M:wclBluetooth.wclGattServerClient.HalGetConnectionParams(wclBluetooth.wclBluetoothLeConnectionParameters@)">
            <summary> Implements a hardware-dependent code to get the current
              connection parameters. </summary>
            <param name="Params"> If the function completed with success on output
              contains the current connection parameters. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeConnectionParameters" />
        </member>
        <member name="M:wclBluetooth.wclGattServerClient.HalSetConnectionParams(wclBluetooth.wclBluetoothLeConnectionParametersType)">
            <summary> Implements a hardware-dependent code to request the connection
              parameters change to the specified preferred connection
              parameters. </summary>
            <param name="Params"> The preferred Bluetooth LE connection parameters
              type. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeConnectionParametersType" />
        </member>
        <member name="M:wclBluetooth.wclGattServerClient.HalSetConnectionParams(wclBluetooth.wclBluetoothLeConnectionParametersValue)">
            <summary> Implements a hardware-dependent code to request the connection
              parameters change to the specified preferred connection
              parameters. </summary>
            <param name="Params"> The preferred Bluetooth LE connection parameters
              value. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeConnectionParametersValue" />
        </member>
        <member name="M:wclBluetooth.wclGattServerClient.HalGetMaxNotificationSize(System.UInt16@)">
            <summary> Provides a driver specific code to read the maximum
              notification size. </summary>
            <param name="Size"> If the method completed with success on output
              contains the maximum notification size. If the method failed the
              value is undefined. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide a driver
              specific code. </remarks>
        </member>
        <member name="M:wclBluetooth.wclGattServerClient.HalGetMaxPduSize(System.UInt16@)">
            <summary> Implements a hardware-dependent code to read the maximum PDU
              size for the current connection. </summary>
            <param name="Size"> If the method completed with success on output
              contains the maximum PDU size. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method. </remarks>
        </member>
        <member name="M:wclBluetooth.wclGattServerClient.HalGetConnectionPhyInfo(wclBluetooth.wclBluetoothLeConnectionPhy@)">
            <summary> Implements a hardware-dependent code to reads the Bluetooth LE
              physical layer (PHY) information. </summary>
            <param name="Info"> If the method completed with success on output
              contains the connection PHY information. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeConnectionPhy" />
        </member>
        <member name="M:wclBluetooth.wclGattServerClient.#ctor(System.Int64,wclBluetooth.wclGattServerConnection)">
            <summary> Creates new client object. </summary>
            <param name="Address"> The client's address. If the <c>Address</c> is
              <c>0</c> the <see cref="T:wclCommon.wclEInvalidArgument" /> raises. </param>
            <param name="Connection"> The <see cref="T:wclBluetooth.wclGattServerConnection" />
              object that owns the client. If the <c>Connection</c> is <c>nil</c>
              the <see cref="T:wclCommon.wclEInvalidArgument" /> exception raises. </param>
            <remarks> An application must not create the objects of this class
              directly. </remarks>
            <seealso cref="T:wclBluetooth.wclGattServerConnection" />
            <exception cref="T:wclCommon.wclEInvalidArgument" />
        </member>
        <member name="M:wclBluetooth.wclGattServerClient.Disconnect">
            <summary> Disconnects the client from a server. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclGattServerClient.GetConnectionParams(wclBluetooth.wclBluetoothLeConnectionParameters@)">
            <summary> Gets the current connection parameters. </summary>
            <param name="Params"> If the function completed with success on output
              contains the current connection parameters. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> This feature is supported with <c>Microsoft</c> Bluetooth
              drivers on <c>Windows 11</c> and above. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeConnectionParameters" />
        </member>
        <member name="M:wclBluetooth.wclGattServerClient.SetConnectionParams(wclBluetooth.wclBluetoothLeConnectionParametersType)">
            <summary> Request the connection parameters change to the specified
              preferred connection parameters. </summary>
            <param name="Params"> The preferred Bluetooth LE connection parameters
              type. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> <para> When performing firmware updates, higher throughput is
              necessary to complete the operation swiftly for the user. In those
              scenarios, you should request <c>ppThroughputOptimized</c> connection
              parameters for the duration of the firmware update. That will reduce
              the number of concurrent connections to other Bluetooth peripherals,
              and should be used sparingly. </para>
              <para> Conversely, when connecting to multiple LE devices
              concurrently, you should use <c>ppPowerOptimized</c>. That will
              increase the acceptable peripheral latency for the connection,
              reducing the interval at which the LE device must respond to the
              host OS. That allows the local Bluetooth radio to schedule more
              connections concurrently, and reduces power usage on both the host OS
              and on the peripheral device. </para>
              <para> If the connection parameters were changed successfully the
              <c>OnConnectionParamsChanged</c> even fires. </para>
              <para> This feature is supported with <c>Microsoft</c> Bluetooth
              drivers on <c>Windows 11</c> and above. </para> </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeConnectionParametersType" />
        </member>
        <member name="M:wclBluetooth.wclGattServerClient.SetConnectionParams(wclBluetooth.wclBluetoothLeConnectionParametersValue)">
            <summary> Request the connection parameters change to the specified
              preferred connection parameters. </summary>
            <param name="Params"> The preferred Bluetooth LE connection parameters
              value. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks><para> If the connection parameters were changed successfully
              the <c>OnConnectionParamsChanged</c> even fires. </para>
              <para> This feature is supported with <c>Microsoft</c> Bluetooth
              drivers on <c>Windows 11</c> and above. </para> </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeConnectionParametersValue" />
        </member>
        <member name="M:wclBluetooth.wclGattServerClient.GetMaxNotificationSize(System.UInt16@)">
            <summary> Reads the maximum notification size. </summary>
            <param name="Size"> If the method completed with success on output
              contains the maximum notification size. If the method failed the
              value is undefined. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclGattServerClient.GetMaxPduSize(System.UInt16@)">
            <summary> Reads the maximum PDU size for the current
              connection. </summary>
            <param name="Size"> If the method completed with success on output
              contains the maximum PDU size. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> The PDU size includes header and payload. For example if
              PDU size is 23 bytes the allowed payload is 20 bytes. </remarks>
        </member>
        <member name="M:wclBluetooth.wclGattServerClient.GetConnectionPhyInfo(wclBluetooth.wclBluetoothLeConnectionPhy@)">
            <summary> Reads the Bluetooth LE physical layer (PHY)
              information. </summary>
            <param name="Info"> If the method completed with success on output
              contains the connection PHY information. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> This feature is supported on Windows 11 and above. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeConnectionPhy" />
        </member>
        <member name="P:wclBluetooth.wclGattServerClient.Address">
            <summary> Gets the client's address. </summary>
            <value> The client's address. </value>
        </member>
        <member name="P:wclBluetooth.wclGattServerClient.Item(System.Int32)">
            <summary> Gets the subscribed characteristic by its index. </summary>
            <param name="Index"> The characteristic's index. The <c>Index</c>
              parameter must be in range between <c>0</c> and <c>Count - 1</c>.
              If the <c>Index</c> is out of range the
              <see cref="T:wclCommon.wclEInvalidArgument" /> exception raises. </param>
            <value> The <see cref="T:wclBluetooth.wclGattLocalCharacteristic" /> object. </value>
            <seealso cref="T:wclBluetooth.wclGattLocalCharacteristic" />
            <exception cref="T:wclCommon.wclEInvalidArgument" />
        </member>
        <member name="P:wclBluetooth.wclGattServerClient.Connection">
            <summary> Gets the <see cref="T:wclBluetooth.wclGattServerConnection" /> object that
              owns the client. </summary>
            <value> The <see cref="T:wclBluetooth.wclGattServerConnection" /> object. </value>
            <seealso cref="T:wclBluetooth.wclGattServerConnection" />
        </member>
        <member name="P:wclBluetooth.wclGattServerClient.Count">
            <summary> Gets the subscribed characteristics count. </summary>
            <value> The subscribed characteristics count. </value>
        </member>
        <member name="P:wclBluetooth.wclGattServerClient.Subscribed">
            <summary> Gets the client subscribed status. </summary>
            <value> <c>True</c> if the client is subscribed to at least one
              characteristic. <c>False</c> otherwise. </value>
        </member>
        <member name="T:wclBluetooth.wclGattLocalCharacteristicRequest">
            <summary> The base class for local GATT characteristic operation
              requests. </summary>
            <remarks> An application must never create or destroy this class.
              The class is created and released internally when needed. </remarks>
        </member>
        <member name="M:wclBluetooth.wclGattLocalCharacteristicRequest.SetProcessed(System.Int32)">
            <summary> Sets the processed flag. </summary>
            <param name="Error"> The operation result code. </param>
        </member>
        <member name="M:wclBluetooth.wclGattLocalCharacteristicRequest.CheckProcessed">
            <summary> Checks if the request has already been processed. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclGattLocalCharacteristicRequest.HalRespondWithError(System.Int32)">
            <summary> Responds to the request with an error. </summary>
            <param name="Error"> The GATT operation error code. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> <para> A derived class must override this method to provide
              hardware dependent code that sends a error respond. </para>
              <para> An application must call this method in case if there
              is an error appeared during request processing. The <c>Error</c> is
              one of the Wireless Communication Library GATT error. </para>
              <para> The <see cref="F:wclCommon.wclErrors.WCL_E_INVALID_ARGUMENT" /> result indicates that
              the error code passed to the method is not one from the GATT errors
              list. </para>
              <para> Valid error codes are: </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_INVALID_HANDLE" /> </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_READ_NOT_PERMITTED" /> </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_WRITE_NOT_PERMITTED" /> </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_INVALID_PDU" /> </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_INSUFFICIENT_AUTHENTICATION" /> </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_REQUEST_NOT_SUPPORTED" /> </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_INVALID_OFFSET" /> </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_INSUFFICIENT_AUTHORIZATION" /> </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_PREPARE_QUEUE_FULL" /> </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_ATTRIBUTE_NOT_FOUND" /> </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_ATTRIBUTE_NOT_LONG" /> </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_INSUFFICIENT_ENCRYPTION_KEYSIZE" /> </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_INVALID_ATTRIBUTE_VALUE_LENGTH" /> </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_UNLIKELY" /> </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_INSUFFICIENT_ENCRYPTION" /> </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_UNSUPPORTED_GROUP_TYPE" /> </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_INSUFFICIENT_RESOURCES" /> </para>
            </remarks>
        </member>
        <member name="M:wclBluetooth.wclGattLocalCharacteristicRequest.#ctor(System.UInt32)">
            <summary> Creates new object. </summary>
            <param name="Offset"> A data offset. </param>
            <remarks> An application must not create this class. It is created
              internally when needed. </remarks>
        </member>
        <member name="M:wclBluetooth.wclGattLocalCharacteristicRequest.Finalize">
            <exclude />
        </member>
        <member name="M:wclBluetooth.wclGattLocalCharacteristicRequest.Destroy">
            <summary> Frees the object. </summary>
            <remarks> An application must not destroy this class. Instead of
              calling destructor an application must call the <c>Release</c>
              method. </remarks>
        </member>
        <member name="M:wclBluetooth.wclGattLocalCharacteristicRequest.RespondWithError(System.Int32)">
            <summary> Responds to the request with an error. </summary>
            <param name="Error"> The GATT operation error code. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> <para> An application must call this method in case if there
              is an error appeared during request processing. The <c>Error</c> is
              one of the Wireless Communication Library GATT error. </para>
              <para> The <see cref="F:wclCommon.wclErrors.WCL_E_INVALID_ARGUMENT" /> result indicates that
              the error code passed to the method is not one from the GATT errors
              list. </para>
              <para> Valid error codes are: </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_INVALID_HANDLE" /> </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_READ_NOT_PERMITTED" /> </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_WRITE_NOT_PERMITTED" /> </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_INVALID_PDU" /> </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_INSUFFICIENT_AUTHENTICATION" /> </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_REQUEST_NOT_SUPPORTED" /> </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_INVALID_OFFSET" /> </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_INSUFFICIENT_AUTHORIZATION" /> </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_PREPARE_QUEUE_FULL" /> </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_ATTRIBUTE_NOT_FOUND" /> </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_ATTRIBUTE_NOT_LONG" /> </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_INSUFFICIENT_ENCRYPTION_KEYSIZE" /> </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_INVALID_ATTRIBUTE_VALUE_LENGTH" /> </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_UNLIKELY" /> </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_INSUFFICIENT_ENCRYPTION" /> </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_UNSUPPORTED_GROUP_TYPE" /> </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_INSUFFICIENT_RESOURCES" /> </para>
            </remarks>
        </member>
        <member name="P:wclBluetooth.wclGattLocalCharacteristicRequest.Offset">
            <summary> Gets the data offset. </summary>
            <value> The data offset. </value>
        </member>
        <member name="T:wclBluetooth.wclGattLocalCharacteristicReadRequest">
            <summary> The class represents a GATT characteristic read
              requests. </summary>
            <remarks> An application must never create or destroy this class.
              The class is created and released internally when needed. </remarks>
            <seealso cref="T:wclBluetooth.wclGattLocalCharacteristicRequest" />
        </member>
        <member name="M:wclBluetooth.wclGattLocalCharacteristicReadRequest.HalRespond(System.Byte[])">
            <summary> Sends the specified data to the connected client in respond to
              a read request. </summary>
            <param name="Data"> The data bytes array. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide hardware
              dependent code that sends a data to a remote connected GATT
              client. </remarks>
        </member>
        <member name="M:wclBluetooth.wclGattLocalCharacteristicReadRequest.#ctor(System.UInt32,System.UInt32)">
            <summary> Creates new object. </summary>
            <param name="Offset"> A data offset. </param>
            <param name="Size"> A read buffer size. </param>
            <remarks> An application must not create this class. It is created
              internally when needed. </remarks>
        </member>
        <member name="M:wclBluetooth.wclGattLocalCharacteristicReadRequest.Respond(System.Byte[])">
            <summary> Sends the specified data to the connected client in respond to
              a read request. </summary>
            <param name="Data"> The data bytes array. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="P:wclBluetooth.wclGattLocalCharacteristicReadRequest.Size">
            <summary> Gets the read buffer size. </summary>
            <value> The read buffer size. </value>
        </member>
        <member name="T:wclBluetooth.wclGattLocalCharacteristicWriteRequest">
            <summary> The class represents a GATT characteristic write
              requests. </summary>
            <remarks> An application must never create or destroy this class.
              The class is created and released internally when needed. </remarks>
            <seealso cref="T:wclBluetooth.wclGattLocalCharacteristicRequest" />
        </member>
        <member name="M:wclBluetooth.wclGattLocalCharacteristicWriteRequest.HalRespond">
            <summary> Sends a response to the connected client in respond to a write
              request. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide hardware
              dependent code that sends a data to a remote connected GATT
              client. </remarks>
        </member>
        <member name="M:wclBluetooth.wclGattLocalCharacteristicWriteRequest.#ctor(System.UInt32,System.Byte[],System.Boolean)">
            <summary> Creates new object. </summary>
            <param name="Offset"> A data offset. </param>
            <param name="Data"> The data bytes array. </param>
            <param name="WithResponse"> The GATT write operation flag. </param>
            <remarks> An application must not create this class. It is created
              internally when needed. </remarks>
        </member>
        <member name="M:wclBluetooth.wclGattLocalCharacteristicWriteRequest.Respond">
            <summary> Sends a response to the connected client in respond to a write
              request. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> This method must be called only in case the write operation
              was made with required response (the <c>WithResponse</c> property is
              <c>True</c>. </remarks>
        </member>
        <member name="M:wclBluetooth.wclGattLocalCharacteristicWriteRequest.RespondWithError(System.Int32)">
            <summary> Responds to the request with an error. </summary>
            <param name="Error"> The GATT operation error code. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> <para> An application must call this method in case if there
              is an error appeared during request processing. The <c>Error</c> is
              one of the Wireless Communication Library GATT error. </para>
              <para> The <see cref="F:wclCommon.wclErrors.WCL_E_INVALID_ARGUMENT" /> result indicates that
              the error code passed to the method is not one from the GATT errors
              list. </para>
              <para> Valid error codes are: </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_INVALID_HANDLE" /> </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_READ_NOT_PERMITTED" /> </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_WRITE_NOT_PERMITTED" /> </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_INVALID_PDU" /> </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_INSUFFICIENT_AUTHENTICATION" /> </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_REQUEST_NOT_SUPPORTED" /> </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_INVALID_OFFSET" /> </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_INSUFFICIENT_AUTHORIZATION" /> </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_PREPARE_QUEUE_FULL" /> </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_ATTRIBUTE_NOT_FOUND" /> </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_ATTRIBUTE_NOT_LONG" /> </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_INSUFFICIENT_ENCRYPTION_KEYSIZE" /> </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_INVALID_ATTRIBUTE_VALUE_LENGTH" /> </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_UNLIKELY" /> </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_INSUFFICIENT_ENCRYPTION" /> </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_UNSUPPORTED_GROUP_TYPE" /> </para>
              <para> <see cref="F:wclBluetooth.wclBluetoothErrors.WCL_E_BLUETOOTH_LE_INSUFFICIENT_RESOURCES" /> </para>
            </remarks>
        </member>
        <member name="P:wclBluetooth.wclGattLocalCharacteristicWriteRequest.Data">
            <summary> Gets the pointer to the data. </summary>
            <value> The data bytes array. </value>
            <remarks> This array is valid only inside an event handler. If an
              application needs to process the data outside the event handler it must
              copy the data. </remarks>
        </member>
        <member name="P:wclBluetooth.wclGattLocalCharacteristicWriteRequest.WithResponse">
            <summary> Gets the write operation flag. </summary>
            <value> The GATT write operation flag. </value>
            <remarks> If this property is <c>True</c> an application must response
              to the write request with <c>Respond</c> or <c>RespondWithError</c>
              method. </remarks>
        </member>
        <member name="M:wclBluetooth.Hal.Bled112.GetPort(System.String,System.String@)">
            <summary> Gets the BLED112 device COM port name. </summary>
            <param name="Instance"> The device instance string. </param>
            <param name="Port"> If the function completed with success on output
               contains the BLED112 device COM port name. </param>
            <returns> Returns <c>True</c> if the device represented with the
              <c>Instance</c> parameter is a BLED112 device. </returns>
        </member>
        <member name="T:wclBluetooth.Hal.Microsoft.LeAddrTypeReader">
            Helper class used to read remote LE device's address type.
        </member>
        <member name="T:wclBluetooth.wclBluetoothLeAdvertiser">
            <summary> The Bluetooth LE advertiser components. </summary>
            <remarks> The feature is supported only on Windows 10 platform with
              <c>Microsoft</c> Bluetooth drivers or on any Windows platform with
              <c>BLED112</c> Bluetooth dongle. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothComponent" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeAdvertiser.DoStarted">
            <summary> Fires the <c>OnStarted</c> event. </summary>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeAdvertiser.DoStopped">
            <summary> Fires the <c>OnStopped</c> event. </summary>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeAdvertiser.#ctor">
            <summary> Creates new component. </summary>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeAdvertiser.Finalize">
            <summary> Frees the component. </summary>
            <remarks> The component must always be destroyed in the same thread it
              was created. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeAdvertiser.Add(wclBluetooth.wclBluetoothLeAdvertisement)">
            <summary> Adds Bluetooth LE advertisement to the advertisements
              list. </summary>
            <param name="Advertisement"> The Bluetooth LE advertisement
              object. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisement" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeAdvertiser.Clear">
            <summary> Clears the advertisements list. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeAdvertiser.Delete(System.Int32)">
            <summary> Deletes the Bluetooth LE advertisement from the advertisements
              list. </summary>
            <param name="Index"> The advertisement index. The <c>Index</c> must be
              in range between <c>0</c> and <c>Count - 1</c>. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeAdvertiser.Start(wclBluetooth.wclBluetoothRadio,System.UInt16)">
            <summary> Starts advertising. </summary>
            <param name="Radio"> The <see cref="T:wclBluetooth.wclBluetoothRadio" /> object used
              to communicate with a remote Bluetooth device. </param>
            <param name="Interval"> An advertising interval in 0.625 ms
              units. The value must be in range between
              <see cref="F:wclBluetooth.wclBluetoothConstants.WCL_BLE_MIN_ADVERTISING_INTERVAL" /> and
              <see cref="F:wclBluetooth.wclBluetoothConstants.WCL_BLE_MAX_ADVERTISING_INTERVAL" />. The default value is
              <see cref="F:wclBluetooth.wclBluetoothConstants.WCL_BLE_DEFAULT_ADVERTISING_INTERVAL" />. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> This feature is supported on Windows 10 with the Microsoft
              Bluetooth drivers only. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
            <seealso cref="F:wclBluetooth.wclBluetoothConstants.WCL_BLE_MIN_ADVERTISING_INTERVAL" />
            <seealso cref="F:wclBluetooth.wclBluetoothConstants.WCL_BLE_MAX_ADVERTISING_INTERVAL" />
            <seealso cref="F:wclBluetooth.wclBluetoothConstants.WCL_BLE_DEFAULT_ADVERTISING_INTERVAL" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeAdvertiser.Stop">
            <summary> Stops advertising. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> This feature is supported on Windows 10 with the Microsoft
              Bluetooth drivers only. </remarks>
        </member>
        <member name="P:wclBluetooth.wclBluetoothLeAdvertiser.Item(System.Int32)">
            <summary> Gets the Bluetooth LE advertisement object by its
              index. </summary>
            <param name="Index"> The advertisement index. The <c>Index</c> must be
              in range between <c>0</c> and <c>Count - 1</c>. </param>
            <value> The Bluetooth LE advertisement object. </value>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisement" />
            <exception cref="T:wclCommon.wclEInvalidArgument" />
        </member>
        <member name="P:wclBluetooth.wclBluetoothLeAdvertiser.Advertising">
            <summary> Gets Advertiser state. </summary>
            <value> <c>True</c> if the Bluetooth LE advertising is running. </value>
        </member>
        <member name="P:wclBluetooth.wclBluetoothLeAdvertiser.Count">
            <summary> Gets the advertisements count. </summary>
            <value> The number of the Bluetooth LE advertisements. </value>
        </member>
        <member name="P:wclBluetooth.wclBluetoothLeAdvertiser.Interval">
            <summary> Gets the advertising interval. </summary>
            <value> The advertising interval in 0.625ms units. </value>
        </member>
        <member name="P:wclBluetooth.wclBluetoothLeAdvertiser.Radio">
            <summary> Gets the advertiser owner. </summary>
            <value> The <see cref="T:wclBluetooth.wclBluetoothRadio" /> object owns the
              connection. </value>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
        </member>
        <member name="P:wclBluetooth.wclBluetoothLeAdvertiser.Anonymous">
            <summary> Specifies whether or not the device address is included in the
              advertisement header. By default, the address is included. </summary>
            <value> Indicates whether the device address is hidden. The default
              value is <c>False</c>, indicating that the address is
              included. </value>
            <remarks> <para> The Extended Advertising format must be enabled by
              setting the <c>UseExtendedAdvertisement</c> to <c>True</c> to use this
              property. If the <c>UseExtendedAdvertisement</c> is <c>False</c> the
              value of this property is ignored. </para>
              <para> If the advertiser is running and an application changes the
              property the <see cref="T:wclBluetooth.wclEBluetoothLeBeacon" /> exception
              raises. </para> </remarks>
            <exception cref="T:wclBluetooth.wclEBluetoothLeBeacon" />
        </member>
        <member name="P:wclBluetooth.wclBluetoothLeAdvertiser.IncludeTxRssi">
            <summary> Specifies whether the transmit power level is included in
              the advertisement header. </summary>
            <value> Indicates whether the transmit power level is included. The
              default value is <c>False</c>. </value>
            <remarks> <para> The Extended Advertising format must be enabled by
              setting the <c>UseExtendedAdvertisement</c> to <c>True</c> to use this
              property. If the <c>UseExtendedAdvertisement</c> is <c>False</c> the
              value of this property is ignored. </para>
              <para> If the advertiser is running and an application changes the
              property the <see cref="T:wclBluetooth.wclEBluetoothLeBeacon" /> exception
              raises. </para> </remarks>
            <exception cref="T:wclBluetooth.wclEBluetoothLeBeacon" />
        </member>
        <member name="P:wclBluetooth.wclBluetoothLeAdvertiser.PreferredTxRssi">
            <summary> If specified, requests that the radio use the indicated
              transmit power level for the advertisement. </summary>
            <value> The requested power level in dDm at range between -100
              dBm and +20 for the radio transmission. The default is -127 indicating
              that this feature is disabled. If the parameter is out of range the
              <see cref="T:wclCommon.wclEInvalidArgument" /> exception raises.</value>
            <remarks> <para> Enabling the Extended Advertising format is necessary
              to enable several other related properties. </para>
             <para> If the advertiser is running and an application changes the
              property the <see cref="T:wclBluetooth.wclEBluetoothLeBeacon" /> exception
              raises. </para> </remarks>
            <exception cref="T:wclCommon.wclEInvalidArgument" />
            <exception cref="T:wclBluetooth.wclEBluetoothLeBeacon" />
        </member>
        <member name="P:wclBluetooth.wclBluetoothLeAdvertiser.UseExtendedAdvertisement">
            <summary> Specifies that the advertisement publisher should use the
              Extended Advertising format. </summary>
            <value> Indicates whether or not the Extended Advertising format should
              be used. The default value is <c>False</c>. </value>
            <remarks> <para> Enabling the Extended Advertising format is necessary
              to enable several other related properties. </para>
             <para> If the advertiser is running and an application changes the
              property the <see cref="T:wclBluetooth.wclEBluetoothLeBeacon" /> exception
              raises. </para> </remarks>
            <exception cref="T:wclBluetooth.wclEBluetoothLeBeacon" />
        </member>
        <member name="E:wclBluetooth.wclBluetoothLeAdvertiser.OnStarted">
            <summary> The event fires when the advertising started. </summary>
        </member>
        <member name="E:wclBluetooth.wclBluetoothLeAdvertiser.OnStopped">
            <summary> The event fires when the advertising stopped. </summary>
        </member>
        <member name="T:wclBluetooth.wclBluetoothLeAdvertisement">
            <summary> The base class for Bluetooth LE advertisement. </summary>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeAdvertisement.Enter">
            <summary> Enters the advertisement data protection critical
              section. </summary>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeAdvertisement.Leave">
            <summary> Leaves the advertisement data protection critical
              section. </summary>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeAdvertisement.#ctor">
            <summary> Creates new Bluetooth LE advertisement object. </summary>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeAdvertisement.GetFrames(wclBluetooth.wclBluetoothLeAdvertisementFrame[]@)">
            <summary> Builds the Bluetooth LE advertisement frames array that
              contains raw data of the Bluetooth LE advertisement. </summary>
            <param name="Frames"> On output contains the Bluetooth LE advertisement
              frames array representing the current advertisement data. </param>
            <remarks> A derived class must override this method. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisementFrame" />
        </member>
        <member name="T:wclBluetooth.wclBluetoothLeTxRssiAdvertisement">
            <summary> The base class for Bluetooth LE advertisements that include
              calibrated RSSI value. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisement" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeTxRssiAdvertisement.#ctor(System.SByte)">
            <summary> Creates new Bluetooth LE advertisement object. </summary>
            <param name="TxRssi"> The calibrated RSSI value in dBm at range between
              -100 dBm and +20 dBm at 1 dBm resolution measured at 1 meter
              distance. </param>
            <exception cref="T:wclCommon.wclEInvalidArgument" />
        </member>
        <member name="P:wclBluetooth.wclBluetoothLeTxRssiAdvertisement.TxRssi">
            <summary> Gets the calibrated RSSI value. </summary>
            <value> The calibrated RSSI value in dBm. </value>
            <exception cref="T:wclCommon.wclEInvalidArgument" />
        </member>
        <member name="T:wclBluetooth.wclBluetoothLeIdAdvertisement">
            <summary> The base class for Bluetooth LE advertisements that include
              IDs. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLeTxRssiAdvertisement" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeIdAdvertisement.#ctor(System.SByte,System.UInt16,System.UInt16,System.Guid)">
            <summary> Creates new Bluetooth LE advertisement object. </summary>
            <param name="TxRssi"> The calibrated RSSI value in dBm at range between
              -100 dBm and +20 dBm at 1 dBm resolution measured at 1 meter
              distance. </param>
            <param name="Major"> The major value. </param>
            <param name="Minor"> The minor value. </param>
            <param name="Uuid"> The UUID. </param>
            <exception cref="T:wclCommon.wclEInvalidArgument" />
        </member>
        <member name="P:wclBluetooth.wclBluetoothLeIdAdvertisement.Major">
            <summary> Gets the major value. </summary>
            <value> The major value. </value>
        </member>
        <member name="P:wclBluetooth.wclBluetoothLeIdAdvertisement.Minor">
            <summary> Gets the minor value. </summary>
            <value> The minor value. </value>
        </member>
        <member name="P:wclBluetooth.wclBluetoothLeIdAdvertisement.Uuid">
            <summary> Gets the UUID. </summary>
            <value> The UUID. </value>
        </member>
        <member name="T:wclBluetooth.wclBluetoothLeiBeaconAdvertisement">
            <summary> The Bluetooth LE iBeacon advertisement. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLeIdAdvertisement" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeiBeaconAdvertisement.#ctor(System.SByte,System.UInt16,System.UInt16,System.Guid)">
            <summary> Creates new Bluetooth LE advertisement object. </summary>
            <param name="TxRssi"> The calibrated RSSI value in dBm at range between
              -100 dBm and +20 dBm at 1 dBm resolution measured at 1 meter
              distance. </param>
            <param name="Major"> The major value. </param>
            <param name="Minor"> The minor value. </param>
            <param name="Uuid"> The UUID. </param>
            <exception cref="T:wclCommon.wclEInvalidArgument" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeiBeaconAdvertisement.GetFrames(wclBluetooth.wclBluetoothLeAdvertisementFrame[]@)">
            <summary> Builds the Bluetooth LE advertisement frames array that
              contains raw data of the Bluetooth LE advertisement. </summary>
            <param name="Frames"> On output contains the Bluetooth LE advertisement
              frames array representing the current advertisement data. </param>
            <remarks> A derived class must override this method. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisementFrame" />
        </member>
        <member name="T:wclBluetooth.wclBluetoothLeCompanyIdAdvertisement">
            <summary> The base class for Bluetooth LE advertisements that include
              company (manufacturer) ID. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLeIdAdvertisement" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeCompanyIdAdvertisement.#ctor(System.SByte,System.UInt16,System.UInt16,System.Guid,System.UInt16)">
            <summary> Creates new Bluetooth LE advertisement object. </summary>
            <param name="TxRssi"> The calibrated RSSI value in dBm at range between
              -100 dBm and +20 dBm at 1 dBm resolution measured at 1 meter
              distance. </param>
            <param name="Major"> The major value. </param>
            <param name="Minor"> The minor value. </param>
            <param name="Uuid"> The UUID. </param>
            <param name="CompanyId"> The manufacturer ID as defined in the Bluetooth
              SIG Assigned Numbers. </param>
            <exception cref="T:wclCommon.wclEInvalidArgument" />
        </member>
        <member name="P:wclBluetooth.wclBluetoothLeCompanyIdAdvertisement.CompanyId">
            <summary> Gets the manufacturer ID. </summary>
            <value> The manufacturer ID as defined in the Bluetooth SIG
              Assigned Numbers. </value>
        </member>
        <member name="T:wclBluetooth.wclBluetoothLeProximityBeaconAdvertisement">
            <summary> The Bluetooth LE proximity beacon advertisement. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLeCompanyIdAdvertisement" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeProximityBeaconAdvertisement.#ctor(System.SByte,System.UInt16,System.UInt16,System.Guid,System.UInt16)">
            <summary> Creates new Bluetooth LE advertisement object. </summary>
            <param name="TxRssi"> The calibrated RSSI value in dBm at range between
              -100 dBm and +20 dBm at 1 dBm resolution measured at 1 meter
              distance. </param>
            <param name="Major"> The major value. </param>
            <param name="Minor"> The minor value. </param>
            <param name="Uuid"> The UUID. </param>
            <param name="CompanyId"> The manufacturer ID as defined in the Bluetooth
              SIG Assigned Numbers. </param>
            <exception cref="T:wclCommon.wclEInvalidArgument" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeProximityBeaconAdvertisement.GetFrames(wclBluetooth.wclBluetoothLeAdvertisementFrame[]@)">
            <summary> Builds the Bluetooth LE advertisement frames array that
              contains raw data of the Bluetooth LE advertisement. </summary>
            <param name="Frames"> On output contains the Bluetooth LE advertisement
              frames array representing the current advertisement data. </param>
            <remarks> A derived class must override this method. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisementFrame" />
        </member>
        <member name="T:wclBluetooth.wclBluetoothLeAltBeaconAdvertisement">
            <summary> The Bluetooth LE Alt beacon advertisement. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLeCompanyIdAdvertisement" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeAltBeaconAdvertisement.#ctor(System.SByte,System.UInt16,System.UInt16,System.Guid,System.UInt16,System.Byte)">
            <summary> Creates new Bluetooth LE advertisement object. </summary>
            <param name="TxRssi"> The calibrated RSSI value in dBm at range between
              -100 dBm and +20 dBm at 1 dBm resolution measured at 1 meter
              distance. </param>
            <param name="Major"> The major value. </param>
            <param name="Minor"> The minor value. </param>
            <param name="Uuid"> The UUID. </param>
            <param name="CompanyId"> The manufacturer ID as defined in the Bluetooth
              SIG Assigned Numbers. </param>
            <param name="Reserved"> The beacon's manufacturer reserved
              value. </param>
            <exception cref="T:wclCommon.wclEInvalidArgument" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeAltBeaconAdvertisement.GetFrames(wclBluetooth.wclBluetoothLeAdvertisementFrame[]@)">
            <summary> Builds the Bluetooth LE advertisement frames array that
              contains raw data of the Bluetooth LE advertisement. </summary>
            <param name="Frames"> On output contains the Bluetooth LE advertisement
              frames array representing the current advertisement data. </param>
            <remarks> A derived class must override this method. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisementFrame" />
        </member>
        <member name="P:wclBluetooth.wclBluetoothLeAltBeaconAdvertisement.Reserved">
            <summary> Gets the beacon's manufacturer reserved value. </summary>
            <value> A 1-byte value from 0x00 to 0xFF. Interpretation of this value
              is to be defined by the manufacturer and is to be evaluated based on
              the <c>CompanyId</c> value. </value>
        </member>
        <member name="T:wclBluetooth.wclBluetoothLeEddystoneUidBeaconAdvertisement">
            <summary> The Bluetooth LE Eddystone UID beacon advertisement. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLeTxRssiAdvertisement" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeEddystoneUidBeaconAdvertisement.#ctor(System.SByte,System.Guid)">
            <summary> Creates new Bluetooth LE advertisement object. </summary>
            <param name="TxRssi"> The calibrated RSSI value in dBm at range between
              -100 dBm and +20 dBm at 1 dBm resolution measured at 1 meter
              distance. </param>
            <param name="Uuid"> The beacon's UUID. </param>
            <exception cref="T:wclCommon.wclEInvalidArgument" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeEddystoneUidBeaconAdvertisement.GetFrames(wclBluetooth.wclBluetoothLeAdvertisementFrame[]@)">
            <summary> Builds the Bluetooth LE advertisement frames array that
              contains raw data of the Bluetooth LE advertisement. </summary>
            <param name="Frames"> On output contains the Bluetooth LE advertisement
              frames array representing the current advertisement data. </param>
            <remarks> A derived class must override this method. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisementFrame" />
        </member>
        <member name="P:wclBluetooth.wclBluetoothLeEddystoneUidBeaconAdvertisement.Uuid">
            <summary> Gets the beacon's UUID. </summary>
            <value> The beacon's UUID. </value>
        </member>
        <member name="T:wclBluetooth.wclBluetoothLeEddystoneUrlBeaconAdvertisement">
            <summary> The Bluetooth LE Eddystone URL beacon advertisement. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLeTxRssiAdvertisement" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeEddystoneUrlBeaconAdvertisement.#ctor(System.SByte,System.String)">
            <summary> Creates new Bluetooth LE advertisement object. </summary>
            <param name="TxRssi"> The calibrated RSSI value in dBm at range between
              -100 dBm and +20 dBm at 1 dBm resolution measured at 1 meter
              distance. </param>
            <param name="Url"> The beacon's URL. </param>
            <exception cref="T:wclCommon.wclEInvalidArgument" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeEddystoneUrlBeaconAdvertisement.GetFrames(wclBluetooth.wclBluetoothLeAdvertisementFrame[]@)">
            <summary> Builds the Bluetooth LE advertisement frames array that
              contains raw data of the Bluetooth LE advertisement. </summary>
            <param name="Frames"> On output contains the Bluetooth LE advertisement
              frames array representing the current advertisement data. </param>
            <remarks> A derived class must override this method. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisementFrame" />
        </member>
        <member name="P:wclBluetooth.wclBluetoothLeEddystoneUrlBeaconAdvertisement.Url">
            <summary> Gets the beacon's URL. </summary>
            <value> The beacon's URL. </value>
        </member>
        <member name="T:wclBluetooth.wclBluetoothLe16ServiceAdvertisement">
            <summary> The Bluetooth LE 16 bit UUID service advertisement. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisement" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothLe16ServiceAdvertisement.#ctor(System.UInt16)">
            <summary> Creates new Bluetooth LE advertisement object. </summary>
            <param name="Uuid"> The 16 bit service's UUID. </param>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLe16ServiceAdvertisement.GetFrames(wclBluetooth.wclBluetoothLeAdvertisementFrame[]@)">
            <summary> Builds the Bluetooth LE advertisement frames array that
              contains raw data of the Bluetooth LE advertisement. </summary>
            <param name="Frames"> On output contains the Bluetooth LE advertisement
              frames array representing the current advertisement data. </param>
            <remarks> A derived class must override this method. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisementFrame" />
        </member>
        <member name="P:wclBluetooth.wclBluetoothLe16ServiceAdvertisement.Uuid">
            <summary> Gets the service's UUID. </summary>
            <value> The 16 bit UUID. </value>
        </member>
        <member name="T:wclBluetooth.wclBluetoothLe32ServiceAdvertisement">
            <summary> The Bluetooth LE 32 bit UUID service advertisement. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisement" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothLe32ServiceAdvertisement.#ctor(System.UInt32)">
            <summary> Creates new Bluetooth LE advertisement object. </summary>
            <param name="Uuid"> The 32 bit service's UUID. </param>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLe32ServiceAdvertisement.GetFrames(wclBluetooth.wclBluetoothLeAdvertisementFrame[]@)">
            <summary> Builds the Bluetooth LE advertisement frames array that
              contains raw data of the Bluetooth LE advertisement. </summary>
            <param name="Frames"> On output contains the Bluetooth LE advertisement
              frames array representing the current advertisement data. </param>
            <remarks> A derived class must override this method. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisementFrame" />
        </member>
        <member name="P:wclBluetooth.wclBluetoothLe32ServiceAdvertisement.Uuid">
            <summary> Gets the service's UUID. </summary>
            <value> The 32 bit UUID. </value>
        </member>
        <member name="T:wclBluetooth.wclBluetoothLe128ServiceAdvertisement">
            <summary> The Bluetooth LE 128 bit UUID service advertisement. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisement" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothLe128ServiceAdvertisement.#ctor(System.Guid)">
            <summary> Creates new Bluetooth LE advertisement object. </summary>
            <param name="Uuid"> The 128 bit service's UUID. </param>
        </member>
        <member name="M:wclBluetooth.wclBluetoothLe128ServiceAdvertisement.GetFrames(wclBluetooth.wclBluetoothLeAdvertisementFrame[]@)">
            <summary> Builds the Bluetooth LE advertisement frames array that
              contains raw data of the Bluetooth LE advertisement. </summary>
            <param name="Frames"> On output contains the Bluetooth LE advertisement
              frames array representing the current advertisement data. </param>
            <remarks> A derived class must override this method. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisementFrame" />
        </member>
        <member name="P:wclBluetooth.wclBluetoothLe128ServiceAdvertisement.Uuid">
            <summary> Gets the service's UUID. </summary>
            <value> The 128 bit UUID. </value>
        </member>
        <member name="T:wclBluetooth.wclBluetoothLe16ServiceDataAdvertisement">
            <summary> The Bluetooth LE 16 bit UUID service advertisement. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLe16ServiceAdvertisement" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothLe16ServiceDataAdvertisement.#ctor(System.UInt16,System.Byte[])">
            <summary> Creates new Bluetooth LE advertisement object. </summary>
            <param name="Uuid"> The 16 bit service's UUID. </param>
            <param name="Data"> The service's data. </param>
            <exception cref="T:wclCommon.wclEInvalidArgument" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothLe16ServiceDataAdvertisement.GetFrames(wclBluetooth.wclBluetoothLeAdvertisementFrame[]@)">
            <summary> Builds the Bluetooth LE advertisement frames array that
              contains raw data of the Bluetooth LE advertisement. </summary>
            <param name="Frames"> On output contains the Bluetooth LE advertisement
              frames array representing the current advertisement data. </param>
            <remarks> A derived class must override this method. </remarks>
        </member>
        <member name="P:wclBluetooth.wclBluetoothLe16ServiceDataAdvertisement.Data">
            <summary> Gets the service's data. </summary>
            <value> The service's data. </value>
        </member>
        <member name="T:wclBluetooth.wclBluetoothLe32ServiceDataAdvertisement">
            <summary> The Bluetooth LE 32 bit UUID service advertisement. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLe32ServiceAdvertisement" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothLe32ServiceDataAdvertisement.#ctor(System.UInt32,System.Byte[])">
            <summary> Creates new Bluetooth LE advertisement object. </summary>
            <param name="Uuid"> The 32 bit service's UUID. </param>
            <param name="Data"> The service's data. </param>
            <exception cref="T:wclCommon.wclEInvalidArgument" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothLe32ServiceDataAdvertisement.GetFrames(wclBluetooth.wclBluetoothLeAdvertisementFrame[]@)">
            <summary> Builds the Bluetooth LE advertisement frames array that
              contains raw data of the Bluetooth LE advertisement. </summary>
            <param name="Frames"> On output contains the Bluetooth LE advertisement
              frames array representing the current advertisement data. </param>
            <remarks> A derived class must override this method. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisementFrame" />
        </member>
        <member name="P:wclBluetooth.wclBluetoothLe32ServiceDataAdvertisement.Data">
            <summary> Gets the service's data. </summary>
            <value> The service's data. </value>
        </member>
        <member name="T:wclBluetooth.wclBluetoothLe128ServiceDataAdvertisement">
            <summary> The Bluetooth LE 128 bit UUID service advertisement. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLe32ServiceAdvertisement" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothLe128ServiceDataAdvertisement.#ctor(System.Guid,System.Byte[])">
            <summary> Creates new Bluetooth LE advertisement object. </summary>
            <param name="Uuid"> The 128 bit service's UUID. </param>
            <param name="Data"> The service's data. </param>
            <exception cref="T:wclCommon.wclEInvalidArgument" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothLe128ServiceDataAdvertisement.GetFrames(wclBluetooth.wclBluetoothLeAdvertisementFrame[]@)">
            <summary> Builds the Bluetooth LE advertisement frames array that
              contains raw data of the Bluetooth LE advertisement. </summary>
            <param name="Frames"> On output contains the Bluetooth LE advertisement
              frames array representing the current advertisement data. </param>
            <remarks> A derived class must override this method. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisementFrame" />
        </member>
        <member name="P:wclBluetooth.wclBluetoothLe128ServiceDataAdvertisement.Data">
            <summary> Gets the service's data. </summary>
            <value> The service's data. </value>
        </member>
        <member name="T:wclBluetooth.wclBluetoothLeCustomAdvertisement">
            <summary> The Bluetooth LE custom advertisement. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisement" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeCustomAdvertisement.#ctor(System.Byte,System.Byte[])">
            <summary> Creates new Bluetooth LE advertisement object. </summary>
            <param name="DataType"> <para> The Bluetooth LE advertisement data type.
              This is one of the data type defined in the wclUUIDs. </para>
              <para> The following advertisement types <c>are reserved and
              are not allowed</c>: </para>
              <para> * Empty flags (LE_GAP_AD_TYPE_NONE [0x00]) </para>
              <para> * Flags (LE_GAP_AD_TYPE_FLAGS [0x01]) </para>
              <para> * Shortened Local Name
                       (LE_GAP_AD_TYPE_LOCAL_NAME_SHORT [0x08]) </para>
              <para> * Complete Local Name
                       (LE_GAP_AD_TYPE_LOCAL_NAME_COMPLETE [0x09]) </para>
              <para> * LE Bluetooth Device Address
                       (LE_GAP_AD_TYPE_ADDRESS [0x1B]) </para>
              <para> * LE Role (LE_GAP_AD_TYPE_ROLE [0x1C]) </para>
              <para> * Manufacturer Specific Information
                       (LE_GAP_AD_TYPE_MANUFACTURER [0xFF]) </para>
              <para> The following advertisement types <c>are system-reserved and
              are not allowed</c> if the advertisement is used with <c>Microsoft</c>
              Bluetooth driver: </para>
              <para> * Incomplete List of 16-bit Service UUIDs
                       (LE_GAP_AD_TYPE_SERVICES_16_MORE [0x02]) </para>
              <para> * Complete List of 16-bit Service Class UUIDs
                     * (LE_GAP_AD_TYPE_SERVICES_16_ALL [0x03]) </para>
              <para> * Incomplete List of 32-bit Service UUIDs
                       (LE_GAP_AD_TYPE_SERVICES_32_MORE [0x04]) </para>
              <para> * Complete List of 32-bit Service Class UUIDs
                       (LE_GAP_AD_TYPE_SERVICES_32_ALL [0x05]) </para>
              <para> * Incomplete List of 128-bit Service UUIDs
                       (LE_GAP_AD_TYPE_SERVICES_128_MORE [0x06]) </para>
              <para> * Complete List of 128-bit Service Class UUIDs
                       (LE_GAP_AD_TYPE_SERVICES_128_ALL [0x07]) </para>
              <para> * Tx Power Level (LE_GAP_AD_TYPE_TXPOWER [0x0A]) </para>
              <para> * Class of Device (LE_GAP_AD_TYPE_COD [0x0D]) </para>
              <para> * Simple Pairing Hash C192
                       (LE_GAP_AD_TYPE_PAIRING_HASH_C [0x0E]) </para>
              <para> * Simple Pairing Randomizer R192
                       (LE_GAP_AD_TYPE_PAIRING_RAND_R [0x0F]) </para>
              <para> * Security Manager TK Values
                       (LE_GAP_AD_TYPE_DEVICE_ID [0x10]) </para>
              <para> * Security Manager Out-of-Band Flags
                       (LE_GAP_AD_TYPE_SM_OOB_FLAGS [0x11]) </para>
              <para> * Slave Connection Interval Range
                       (LE_GAP_AD_TYPE_CON_INTERVALS [0x12]) </para>
              <para> * Public Target Address
                       (LE_GAP_AD_TYPE_PUBLIC_TARGET_ADDRESS [0x17]) </para>
              <para> * Random Target Address
                       (LE_GAP_AD_TYPE_RANDOM_TARGET_ADDRESS [0x18]) </para>
              <para> * Appearance (LE_GAP_AD_TYPE_APPEARANCE [0x19]) </para>
              <para> * Advertising Interval
                       (LE_GAP_AD_TYPE_ADV_INTERVAL [0x1A]) </para>
              <para> * Simple Pairing Hash C256
                       (LE_GAP_AD_TYPE_PAIRING_HASH_C_256 [0x1D]) </para>
              <para> * Simple Pairing Randomizer R256
                       (LE_GAP_AD_TYPE_PAIRING_RAND_R_256 [0x1E]) </para>
              <para> * 3D Information Data
                       (LE_GAP_AD_TYPE_3D_INFO [0x3D]) </para> </param>
            <param name="Data"> The Bluetooth LE advertisement raw data. </param>
            <exception cref="T:wclCommon.wclEInvalidArgument" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeCustomAdvertisement.GetFrames(wclBluetooth.wclBluetoothLeAdvertisementFrame[]@)">
            <summary> Builds the Bluetooth LE advertisement frames array that
              contains raw data of the Bluetooth LE advertisement. </summary>
            <param name="Frames"> On output contains the Bluetooth LE advertisement
              frames array representing the current advertisement data. </param>
            <remarks> A derived class must override this method. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisementFrame" />
        </member>
        <member name="P:wclBluetooth.wclBluetoothLeCustomAdvertisement.Data">
            <summary> Gets the advertisement raw data. </summary>
            <value> The Bluetooth LE advertisement raw data. </value>
        </member>
        <member name="P:wclBluetooth.wclBluetoothLeCustomAdvertisement.DataType">
            <summary> Gets the advertisement data type. </summary>
            <value> The Bluetooth LE advertisement data type as defined in
              wclUUIDs. </value>
        </member>
        <member name="T:wclBluetooth.wclBluetoothLeManufacturerAdvertisement">
            <summary> The Bluetooth LE custom manufacturer specific
              advertisement. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisement" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeManufacturerAdvertisement.#ctor(System.UInt16,System.Byte[])">
            <summary> Creates new Bluetooth LE advertisement object. </summary>
            <param name="CompanyId"> The manufacturer company ID. </param>
            <param name="Data"> The Bluetooth LE advertisement raw data. </param>
            <exception cref="T:wclCommon.wclEInvalidArgument" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeManufacturerAdvertisement.GetFrames(wclBluetooth.wclBluetoothLeAdvertisementFrame[]@)">
            <summary> Builds the Bluetooth LE advertisement frames array that
              contains raw data of the Bluetooth LE advertisement. </summary>
            <param name="Frames"> On output contains the Bluetooth LE advertisement
              frames array representing the current advertisement data. </param>
            <remarks> A derived class must override this method. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisementFrame" />
        </member>
        <member name="P:wclBluetooth.wclBluetoothLeManufacturerAdvertisement.CompanyId">
            <summary> Gets the manufacturer company ID. </summary>
            <value> The manufacturer company ID. </value>
        </member>
        <member name="P:wclBluetooth.wclBluetoothLeManufacturerAdvertisement.Data">
            <summary> Gets the advertisement raw data. </summary>
            <value> The Bluetooth LE advertisement raw data. </value>
        </member>
        <member name="T:wclBluetooth.wclBluetoothLeRawAdvertisement">
            <summary> The Bluetooth LE custom raw advertisement. </summary>
            <remarks> This class allows to build a Bluetooth LE advertisement from raw
              data bytes stream. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisement" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeRawAdvertisement.#ctor(System.Byte[])">
            <summary> Creates new Bluetooth LE advertisement object. </summary>
            <param name="Data"> The Bluetooth LE advertisement raw data. </param>
            <remarks> <para> The following advertisement data types <c>are reserved
              and are not allowed</c>: </para>
              <para> * Empty flags (LE_GAP_AD_TYPE_NONE [0x00]) </para>
              <para> * Flags (LE_GAP_AD_TYPE_FLAGS [0x01]) </para>
              <para> * Shortened Local Name
                       (LE_GAP_AD_TYPE_LOCAL_NAME_SHORT [0x08]) </para>
              <para> * Complete Local Name
                       (LE_GAP_AD_TYPE_LOCAL_NAME_COMPLETE [0x09]) </para>
              <para> * LE Bluetooth Device Address
                       (LE_GAP_AD_TYPE_ADDRESS [0x1B]) </para>
              <para> * LE Role (LE_GAP_AD_TYPE_ROLE [0x1C]) </para>
              <para> * Incomplete List of 16-bit Service UUIDs
                       (LE_GAP_AD_TYPE_SERVICES_16_MORE [0x02]) </para>
              <para> * Complete List of 16-bit Service Class UUIDs
                     * (LE_GAP_AD_TYPE_SERVICES_16_ALL [0x03]) </para>
              <para> * Incomplete List of 32-bit Service UUIDs
                       (LE_GAP_AD_TYPE_SERVICES_32_MORE [0x04]) </para>
              <para> * Complete List of 32-bit Service Class UUIDs
                       (LE_GAP_AD_TYPE_SERVICES_32_ALL [0x05]) </para>
              <para> * Incomplete List of 128-bit Service UUIDs
                       (LE_GAP_AD_TYPE_SERVICES_128_MORE [0x06]) </para>
              <para> * Complete List of 128-bit Service Class UUIDs
                       (LE_GAP_AD_TYPE_SERVICES_128_ALL [0x07]) </para>
              <para> * Tx Power Level (LE_GAP_AD_TYPE_TXPOWER [0x0A]) </para>
              <para> * Class of Device (LE_GAP_AD_TYPE_COD [0x0D]) </para>
              <para> * Simple Pairing Hash C192
                       (LE_GAP_AD_TYPE_PAIRING_HASH_C [0x0E]) </para>
              <para> * Simple Pairing Randomizer R192
                       (LE_GAP_AD_TYPE_PAIRING_RAND_R [0x0F]) </para>
              <para> * Security Manager TK Values
                       (LE_GAP_AD_TYPE_DEVICE_ID [0x10]) </para>
              <para> * Security Manager Out-of-Band Flags
                       (LE_GAP_AD_TYPE_SM_OOB_FLAGS [0x11]) </para>
              <para> * Slave Connection Interval Range
                       (LE_GAP_AD_TYPE_CON_INTERVALS [0x12]) </para>
              <para> * Public Target Address
                       (LE_GAP_AD_TYPE_PUBLIC_TARGET_ADDRESS [0x17]) </para>
              <para> * Random Target Address
                       (LE_GAP_AD_TYPE_RANDOM_TARGET_ADDRESS [0x18]) </para>
              <para> * Appearance (LE_GAP_AD_TYPE_APPEARANCE [0x19]) </para>
              <para> * Advertising Interval
                       (LE_GAP_AD_TYPE_ADV_INTERVAL [0x1A]) </para>
              <para> * Simple Pairing Hash C256
                       (LE_GAP_AD_TYPE_PAIRING_HASH_C_256 [0x1D]) </para>
              <para> * Simple Pairing Randomizer R256
                       (LE_GAP_AD_TYPE_PAIRING_RAND_R_256 [0x1E]) </para>
              <para> * 3D Information Data
                       (LE_GAP_AD_TYPE_3D_INFO [0x3D]) </para> </remarks>
            <exception cref="T:wclCommon.wclEInvalidArgument" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothLeRawAdvertisement.GetFrames(wclBluetooth.wclBluetoothLeAdvertisementFrame[]@)">
            <summary> Builds the Bluetooth LE advertisement frames array that
              contains raw data of the Bluetooth LE advertisement. </summary>
            <param name="Frames"> On output contains the Bluetooth LE advertisement
              frames array representing the current advertisement data. </param>
            <remarks> A derived class must override this method. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisementFrame" />
        </member>
        <member name="P:wclBluetooth.wclBluetoothLeRawAdvertisement.Data">
            <summary> Gets the advertisement raw data. </summary>
            <value> The Bluetooth LE advertisement raw data. </value>
        </member>
        <member name="T:wclBluetooth.wclBluetoothManager">
            <summary> The Bluetooth Manager component. </summary>
            <remarks> <para> The <c>TwclBluetoothManager</c> is the main component of
              the Bluetooth Framework. Each application that uses the Bluetooth
              Framework must have one and only one active instance of the
              Bluetooth Manager. </para>
              <para> This component must be created and opened in an application's
              main thread only. </para> </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothManager.DoAfterOpen">
            <summary> Fires the <c>AfterOpen</c> event. </summary>
        </member>
        <member name="M:wclBluetooth.wclBluetoothManager.DoAuthenticationCompleted(wclBluetooth.wclBluetoothRadio,System.Int64,System.Int32)">
            <summary> Fires the <c>OnAuthenticationCompleted</c> event. </summary>
            <param name="Radio"> A <see cref="T:wclBluetooth.wclBluetoothRadio" /> object
              represents a Bluetooth driver that fired the event. </param>
            <param name="Address"> A remote device's MAC address. </param>
            <param name="Error"> An operation result code. </param>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothManager.DoBeforeClose">
            <summary> Fires the <c>BeforeClose</c> event. </summary>
        </member>
        <member name="M:wclBluetooth.wclBluetoothManager.DoClosed">
            <summary> Fires the <c>OnClosed</c> event. </summary>
        </member>
        <member name="M:wclBluetooth.wclBluetoothManager.DoConfirm(wclBluetooth.wclBluetoothRadio,System.Int64,System.Boolean@)">
            <summary> Fires the <c>OnConfirm</c> event. </summary>
            <param name="Radio"> A <see cref="T:wclBluetooth.wclBluetoothRadio" /> object
              represents a Bluetooth driver that fired the event. </param>
            <param name="Address"> A remote device's MAC address. </param>
            <param name="Confirm"> An application must set this parameter to
              <c>True</c> to confirm a pairing. Set it to <c>False</c> to reject
              pairing. </param>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothManager.DoDeviceFound(wclBluetooth.wclBluetoothRadio,System.Int64)">
            <summary> Fires the <c>OnDeviceFound</c> event. </summary>
            <param name="Radio"> A <see cref="T:wclBluetooth.wclBluetoothRadio" /> object
              represents a Bluetooth driver that fired the event. </param>
            <param name="Address"> A remote device's MAC address. </param>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothManager.DoDiscoveringCompleted(wclBluetooth.wclBluetoothRadio,System.Int32)">
            <summary> Fires the <c>OnDiscoveringCompleted</c> event. </summary>
            <param name="Radio"> A <see cref="T:wclBluetooth.wclBluetoothRadio" /> object
              represents a Bluetooth driver that fired the event. </param>
            <param name="Error"> An operation result code. </param>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothManager.DoDiscoveringStarted(wclBluetooth.wclBluetoothRadio)">
            <summary> Fires the <c>OnDiscoveringStarted</c> event. </summary>
            <param name="Radio"> A <see cref="T:wclBluetooth.wclBluetoothRadio" /> object
              represents a Bluetooth driver that fired the event. </param>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothManager.DoIoCapabilityRequest(wclBluetooth.wclBluetoothRadio,System.Int64,wclBluetooth.wclBluetoothMitmProtection@,wclBluetooth.wclBluetoothIoCapability@,System.Boolean@)">
            <summary> Fires the <c>OnIoCapabilityRequest</c> event. </summary>
            <param name="Radio"> A <see cref="T:wclBluetooth.wclBluetoothRadio" /> object
              represents a Bluetooth driver that fired the event. </param>
            <param name="Address"> A remote device's MAC address. </param>
            <param name="Mitm"> An application sets this parameter to specify the
              "Man in the Middle" protection required for authentication. </param>
            <param name="IoCapability"> An application sets this parameter to define
              the input/output capabilities of a Bluetooth Device. </param>
            <param name="OobPresent"> An application sets this parameter to
              <c>True</c> to force Out Of Band authentication. </param>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
            <seealso cref="T:wclBluetooth.wclBluetoothMitmProtection" />
            <seealso cref="T:wclBluetooth.wclBluetoothIoCapability" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothManager.DoNumericComparison(wclBluetooth.wclBluetoothRadio,System.Int64,System.UInt32,System.Boolean@)">
            <summary> Fires the <c>OnNumericComparison</c> event. </summary>
            <param name="Radio"> A <see cref="T:wclBluetooth.wclBluetoothRadio" /> object
              represents a Bluetooth driver that fired the event. </param>
            <param name="Address"> A remote device's MAC address. </param>
            <param name="Number"> A number sent by a remote device to display and
              compare. </param>
            <param name="Confirm"> An application must set this parameter to
              <c>True</c> to confirm a pairing. Set it to <c>False</c> to reject
              pairing. </param>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothManager.DoOobDataRequest(wclBluetooth.wclBluetoothRadio,System.Int64,wclBluetooth.wclBluetoothOobData@)">
            <summary> Fires the <c>OnOobDataRequest</c> event. </summary>
            <param name="Radio"> A <see cref="T:wclBluetooth.wclBluetoothRadio" /> object
              represents a Bluetooth driver that fired the event. </param>
            <param name="Address"> A remote device's MAC address. </param>
            <param name="OobData"> An application must set this parameter to
              the Out Of Band data received from peer device. </param>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
            <seealso cref="T:wclBluetooth.wclBluetoothOobData" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothManager.DoPasskeyNotification(wclBluetooth.wclBluetoothRadio,System.Int64,System.UInt32)">
            <summary> Fores the <c>OnPasskeyNotification</c> event. </summary>
            <param name="Radio"> A <see cref="T:wclBluetooth.wclBluetoothRadio" /> object
              represents a Bluetooth driver that fired the event. </param>
            <param name="Address"> A remote device's MAC address. </param>
            <param name="Passkey"> A Passkey provided by a remote
              Bluetooth device. </param>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothManager.DoPasskeyRequest(wclBluetooth.wclBluetoothRadio,System.Int64,System.UInt32@)">
            <summary> Fires the <c>OnPasskeyRequest</c> event. </summary>
            <param name="Radio"> A <see cref="T:wclBluetooth.wclBluetoothRadio" /> object
              represents a Bluetooth driver that fired the event. </param>
            <param name="Address"> A remote device's MAC address. </param>
            <param name="Passkey"> A passkey provided by an application. </param>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothManager.DoPinRequest(wclBluetooth.wclBluetoothRadio,System.Int64,System.String@)">
            <summary> Fires the <c>OnPinRequest</c> event. </summary>
            <param name="Radio"> A <see cref="T:wclBluetooth.wclBluetoothRadio" /> object
              represents a Bluetooth driver that fired the event. </param>
            <param name="Address"> A remote device's MAC address. </param>
            <param name="Pin"> A PIN code provided by an application. </param>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothManager.DoProtectionLevelRequest(wclBluetooth.wclBluetoothRadio,System.Int64,wclBluetooth.wclBluetoothLeProtectionLevel@)">
            <summary> Fires the <c>OnProtectionLevelRequest</c> event. </summary>
            <param name="Radio"> A <see cref="T:wclBluetooth.wclBluetoothRadio" /> object
              represents a Bluetooth driver that fired the event. </param>
            <param name="Address"> A remote device's MAC address. </param>
            <param name="Protection"> Describes the required protection
              level provided by an application. </param>
            <remarks> This method is used only during BLE pairing. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
            <seealso cref="T:wclBluetooth.wclBluetoothLeProtectionLevel" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothManager.DoStatusChanged(wclBluetooth.wclBluetoothRadio)">
            <summary> Fires the <c>OnStatusChanged</c> event. </summary>
            <param name="Radio"> A <see cref="T:wclBluetooth.wclBluetoothRadio" /> object
              represents a Bluetooth driver that fired the event. </param>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothManager.#ctor">
            <summary> Creates a new Bluetooth Manager component. </summary>
            <remarks> The component must always be created in an application's
              main thread. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothManager.Finalize">
            <summary> Free the Bluetooth Manager </summary>
        </member>
        <member name="M:wclBluetooth.wclBluetoothManager.Close">
            <summary> Closes the Bluetooth Manager and releases all allocated
              resources. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> <para> After calling this method an application should not use
              any of the Bluetooth Framework features. All instances of the
              <see cref="T:wclBluetooth.wclBluetoothRadio" /> class are not valid after
              calling this method. </para>
              <para> An application must call this method from its main thread
              only. </para>
              <para> The call to this method may take some time because it requires
              to release all allocated resources and terminate all the running
              threads. The common case when the delay may appear is when your
              application started discovering for remote devices and right after
              that the Close was called. In this case Bluetooth Manager has to wait
              for discovering thread completion. </para> </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothManager.Open(wclBluetooth.wclBluetoothApi,System.Boolean)">
            <summary> Opens the Bluetooth Manager and allocated required
              hardware resources. </summary>
            <param name="Apis"> The set of APIs the should be used by Bluetooth
              Framework. </param>
            <param name="HandlePairing"> Allows to disable pairing handling by
              Bluetooth Framework. Set this to <c>false</c> to disable Bluetooth
              Framework pairing. Set to <c>true</c> (the default value) to enable
              Bluetooth Framework pairing. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> <para> An application must call this method before using any
              of the Bluetooth Framework features. </para>
              <para> An application must call this method from its main thread
              only. </para> </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothApi" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothManager.Open(System.Boolean)">
            <summary> Opens the Bluetooth Manager and allocated required
              hardware resources. </summary>
            <param name="HandlePairing"> Allows to disable pairing handling by
              Bluetooth Framework. Set this to <c>false</c> to disable Bluetooth
              Framework pairing. Set to <c>true</c> (the default value) to enable
              Bluetooth Framework pairing. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> <para> An application must call this method before using any
              of the Bluetooth Framework features. </para>
              <para> An application must call this method from its main thread
              only. </para> </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothManager.GetRadio(wclBluetooth.wclBluetoothRadio@)">
            <summary> Gets the first available Radio object. </summary>
            <param name="Radio"> If the function completed with success on output
              contains the first found available Bluetooth Radio object. Otherwise
              the parameter contains <c>null</c>. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothManager.GetLeRadio(wclBluetooth.wclBluetoothRadio@)">
            <summary> Gets the first available Radio object that supports Bluetooth
              Low Energy features. </summary>
            <param name="Radio"> If the function completed with success on output
              contains the first found available Bluetooth Radio object. Otherwise
              the parameter contains <c>null</c>. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothManager.GetClassicRadio(wclBluetooth.wclBluetoothRadio@)">
            <summary> Gets the first available Radio object that supports Classic
              Bluetooth features. </summary>
            <param name="Radio"> If the function completed with success on output
              contains the first found available Bluetooth Radio object. Otherwise
              the parameter contains <c>null</c>. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
        </member>
        <member name="P:wclBluetooth.wclBluetoothManager.Active">
            <summary> Gets the Bluetooth Manager state. </summary>
            <value> <c>True</c> if the Bluetooth Manager is active
              (opened). </value>
        </member>
        <member name="P:wclBluetooth.wclBluetoothManager.Count">
            <summary> Gets the number of available Bluetooth Radios. </summary>
            <value> The number of available Bluetooth Radios. </value>
        </member>
        <member name="P:wclBluetooth.wclBluetoothManager.Discovering">
            <summary> Gets the discovering state. </summary>
            <value> <c>True</c> if at least one radio is in discovering state.
              <c>False</c> otherwise. </value>
        </member>
        <member name="P:wclBluetooth.wclBluetoothManager.HandlePairing">
            <summary> Gets the pairing handling flag. </summary>
            <value> The pairing handling state. <c>True</c> if the pairing is
              handled by Bluetooth Framework. <c>False</c> if the pairing is handled
              by the system. </value>
            <remarks> This flag doe snot affect <c>Bled112</c> USB dongle because
              it does not have any support from the OS. </remarks>
        </member>
        <member name="P:wclBluetooth.wclBluetoothManager.Item(System.Int32)">
            <summary> Gets the Bluetooth Radio by its index. </summary>
            <value> The <see cref="T:wclBluetooth.wclBluetoothRadio" /> object. </value>
        </member>
        <member name="E:wclBluetooth.wclBluetoothManager.AfterOpen">
            <summary> The event fires after the Bluetooth Manager has been
              successfully opened. </summary>
        </member>
        <member name="E:wclBluetooth.wclBluetoothManager.BeforeClose">
            <summary> The event fires before the Bluetooth Manager will be
              closed. </summary>
        </member>
        <member name="E:wclBluetooth.wclBluetoothManager.OnAuthenticationCompleted">
            <summary> The event fires when authentication (pairing) with a remote
              Bluetooth device has completed. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothDeviceResultEvent" />
        </member>
        <member name="E:wclBluetooth.wclBluetoothManager.OnClosed">
            <summary> The event fires when the Bluetooth Manager has completely
              been closed. </summary>
        </member>
        <member name="E:wclBluetooth.wclBluetoothManager.OnConfirm">
            <summary> The event fires when a remote Bluetooth device requires
              a pairing confirmation. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothConfirmEvent" />
        </member>
        <member name="E:wclBluetooth.wclBluetoothManager.OnDeviceFound">
            <summary> The event fires when a new remote Bluetooth device found
              during discovering. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothDeviceEvent" />
        </member>
        <member name="E:wclBluetooth.wclBluetoothManager.OnDiscoveringCompleted">
            <summary> The event fires when discovering for remote Bluetooth
              devices has been completed. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothResultEvent" />
        </member>
        <member name="E:wclBluetooth.wclBluetoothManager.OnDiscoveringStarted">
            <summary> The event fires when discovering for remote Bluetooth
              devices has been started. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothEvent" />
        </member>
        <member name="E:wclBluetooth.wclBluetoothManager.OnIoCapabilityRequest">
            <summary> The event fires when a remote device requests an IO capability
              of the local Bluetooth device. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothIoCapabilityRequestEvent" />
        </member>
        <member name="E:wclBluetooth.wclBluetoothManager.OnNumericComparison">
            <summary> The event fires when a remote Bluetooth device requires
              a numeric comparison pairing. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothNumericComparisonEvent" />
        </member>
        <member name="E:wclBluetooth.wclBluetoothManager.OnOobDataRequest">
            <summary> The event fires when a remote device requests an Out Of Band
              pairing data. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothOobDataRequestEvent" />
        </member>
        <member name="E:wclBluetooth.wclBluetoothManager.OnPasskeyNotification">
            <summary> The event fires when a remote Bluetooth device notifies
              an application about its passkey. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothPasskeyNotificationEvent" />
        </member>
        <member name="E:wclBluetooth.wclBluetoothManager.OnPasskeyRequest">
            <summary> The event fires when a remote Bluetooth device requires
              a passkey for pairing. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothPasskeyRequestEvent" />
        </member>
        <member name="E:wclBluetooth.wclBluetoothManager.OnPinRequest">
            <summary> The event fires when a remote Bluetooth device requires
              a legacy PIN pairing. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothPinRequestEvent" />
        </member>
        <member name="E:wclBluetooth.wclBluetoothManager.OnProtectionLevelRequest">
            <summary> The event fires during BLE pairing to request required
              pairing protection level. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothProtectionLevelRequestEvent" />
        </member>
        <member name="E:wclBluetooth.wclBluetoothManager.OnStatusChanged">
            <summary> The event fires when a status of a Bluetooth hardware or
              driver has been changed. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothEvent" />
        </member>
        <member name="T:wclBluetooth.wclBluetoothRadio">
            <summary> The class represents a local Bluetooth radio module. </summary>
            <remarks> <para> An application must never create or destroy this class
              directly. Instead of that an application must use methods of the
              <see cref="T:wclBluetooth.wclBluetoothManager" /> component. </para>
              <para> The class is thread safe. </para>
              <para> The only single instance of the class for each supported
              Bluetooth driver can be created. </para> </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothManager" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.MessageReceived(wclCommon.wclMessage)">
            <summary> The method called when a new notification message
              received. </summary>
            <param name="Message"> A <see cref="T:wclCommon.wclMessage" /> object
              represents a notification message. </param>
            <remarks> <para> This method is for internal use only. </para>
              <para> If a derived class overrides this method it must always call
              the inherited implementation first. </para> </remarks>
            <seealso cref="T:wclCommon.wclMessage" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.DoAuthenticationCompleted(System.Int64,System.Int32)">
            <summary> Fires the <c>OnAuthenticationCompleted</c> event. </summary>
            <param name="Address"> A remote device's MAC address. </param>
            <param name="Error"> An operation result code. </param>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.DoConfirm(System.Int64,System.Boolean@)">
            <summary> Fires the <c>OnConfirm</c> event. </summary>
            <param name="Address"> A remote device's MAC address. </param>
            <param name="Confirm"> An application must set this parameter to
              <c>True</c> to confirm pairing. Set it to <c>False</c> to reject
              pairing. </param>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.DoDeviceFound(System.Int64)">
            <summary> Fires the <c>OnDeviceFound</c> event. </summary>
            <param name="Address"> A remote device's MAC address. </param>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.DoDiscoveringCompleted(System.Int32)">
            <summary> Fires the <c>OnDiscoveringCompleted</c> event. </summary>
            <param name="Error"> An operation result code. </param>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.DoDiscoveringStarted">
            <summary> Fires the <c>OnDiscoveringStarted</c> event. </summary>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.DoIoCapabilityRequest(System.Int64,wclBluetooth.wclBluetoothMitmProtection@,wclBluetooth.wclBluetoothIoCapability@,System.Boolean@)">
            <summary> Fires the <c>OnIoCapabilityRequest</c> event. </summary>
            <param name="Address"> A remote device's MAC address. </param>
            <param name="Mitm"> An application sets this parameter to specify the
              "Man in the Middle" protection required for authentication. </param>
            <param name="IoCapability"> An application sets this parameter to define
              the input/output capabilities of a Bluetooth Device. </param>
            <param name="OobPresent"> An application sets this parameter to
              <c>True</c> to force Out Of Band authentication. </param>
            <seealso cref="T:wclBluetooth.wclBluetoothMitmProtection" />
            <seealso cref="T:wclBluetooth.wclBluetoothIoCapability" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.DoNumericComparison(System.Int64,System.UInt32,System.Boolean@)">
            <summary> Fires the <c>OnNumericComparison</c> event. </summary>
            <param name="Address"> A remote device's MAC address. </param>
            <param name="Number"> A number sent by a remote device to display and
              compare. </param>
            <param name="Confirm"> An application must set this parameter to
              <c>True</c> to confirm pairing. Set it to <c>False</c> to reject
              pairing. </param>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.DoOobDataRequest(System.Int64,wclBluetooth.wclBluetoothOobData@)">
            <summary> Fires the <c>OnOobDataRequest</c> event. </summary>
            <param name="Address"> A remote device's MAC address. </param>
            <param name="OobData"> An application must set this parameter to
              the Out Of Band data received from peer device. </param>
            <seealso cref="T:wclBluetooth.wclBluetoothOobData" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.DoPasskeyNotification(System.Int64,System.UInt32)">
            <summary> Fores the <c>OnPasskeyNotification</c> event. </summary>
            <param name="Address"> A remote device's MAC address. </param>
            <param name="Passkey"> A Passkey provided by a remote
              Bluetooth device. </param>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.DoPasskeyRequest(System.Int64,System.UInt32@)">
            <summary> Fires the <c>OnPasskeyRequest</c> event. </summary>
            <param name="Address"> A remote device's MAC address. </param>
            <param name="Passkey"> A passkey provided by an application. </param>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.DoPinRequest(System.Int64,System.String@)">
            <summary> Fires the <c>OnPinRequest</c> event. </summary>
            <param name="Address"> A remote device's MAC address. </param>
            <param name="Pin"> A PIN code provided by an application. </param>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.DoProtectionLevelRequest(System.Int64,wclBluetooth.wclBluetoothLeProtectionLevel@)">
            <summary> Fires the <c>OnProtectionLevelRequest</c> event. </summary>
            <param name="Address"> A remote device's MAC address. </param>
            <param name="Protection"> Describes the required protection
              level provided by an application. </param>
            <remarks> This method is used only during BLE pairing. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeProtectionLevel" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.DoStatusChanged">
            <summary> Fires the <c>OnStatusChanged</c> event. </summary>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalGetFunctions">
            <summary> Implements a driver-dependent code for getting API
              functions pointers. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalInitialize">
            <summary> Implements a driver-dependent code for API
              initialization. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalLoadApi">
            <summary> Implements a driver-dependent code for loading API
              DLLs. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalRegisterCallbacks">
            <summary> Implements a driver-dependent code for callback
              registration. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalSetGlobalInstance">
            <summary> Implements a driver-dependent code for setting the Radio object
              global instance variable. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalClearFunctions">
            <summary> Implements a driver-dependent code for API functions
              clearing. </summary>
            <remarks> A derived class must override this method. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalClearGlobalInstance">
            <summary> Implements a driver-dependent code for clearing the
              global instance of the Radio object. </summary>
            <remarks> A derived class must override this method. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalTerminateOperations">
            <summary> Implements a driver-dependent code for pending operation
              termination. </summary>
            <remarks> A derived class must override this method. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalUninitialize">
            <summary> Implements a driver-dependent code for driver
              initialization. </summary>
            <remarks> A derived class must override this method. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalUnloadApi">
            <summary> Implements a driver-dependent code for API
              unloading. </summary>
            <remarks> A derived class must override this method. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalUnregisterCallbacks">
            <summary> Implements a driver-dependent code for callbacks
              unregistering. </summary>
            <remarks> A derived class must override this method. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalGetAddress(System.Int64@)">
            <summary> Implements a hardware-dependent code for Local Bluetooth
              Radio module MAC address reading. </summary>
            <param name="Address"> On output the local Bluetooth Radio
              address. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              driver-dependent code. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalGetCod(System.UInt32@)">
            <summary> Implements a hardware-dependent code for Local Bluetooth
              Radio module Class Of Device (COD) reading. </summary>
            <param name="Cod"> On output the local Bluetooth Radio COD. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              driver-dependent code. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalGetConnectable(System.Boolean@)">
            <summary> Implements a hardware-dependent code for reading the local
              Bluetooth Radio connectable state. </summary>
            <param name="Connectable"> On output the local Bluetooth Radio
              connectable state. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              driver-dependent code. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalGetDiscoverable(System.Boolean@)">
            <summary> Implements a hardware-dependent code to read the local
              Bluetooth Radio discoverable state. </summary>
            <param name="Discoverable"> On output the local Bluetooth Radio
              discoverable state. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              driver-dependent code. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalGetHciVersion(System.Byte@,System.UInt16@)">
            <summary> Implements a hardware-dependent code to reads the HCI version
              of the local Radio module. </summary>
            <param name="Version"> On output the HCI version number. </param>
            <param name="Revision"> On output the HCI revision number. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              driver-dependent code. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalGetLmpVersion(System.Byte@,System.UInt16@)">
            <summary> Implements a hardware-dependent code to reading the LMP version
              of the local Radio module. </summary>
            <param name="Version"> On output the LMP version number. </param>
            <param name="Subversion"> On output the LMP subversion number. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              driver-dependent code. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalGetManufacturer(System.UInt16@)">
            <summary> Implements a hardware-dependent code to read the Bluetooth
              Radio manufacturer ID. </summary>
            <param name="Manu"> On output the manufacturer ID. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              driver-dependent code. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalGetName(System.String@)">
            <summary> Implements a hardware-dependent code for reading the local
              Radio name. </summary>
            <param name="Name"> On output the local Bluetooth Radio
              name. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              driver-dependent code. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalSetCod(System.UInt32)">
            <summary> Implements a hardware-dependent code to changing the
              local Bluetooth Radio Class Of Device (COD). </summary>
            <param name="Cod"> The new local Bluetooth Radio COD. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              driver-dependent code. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalSetConnectable(System.Boolean)">
            <summary> Implements a hardware-dependent code to changing the
              connectable state of the local Bluetooth Radio. </summary>
            <param name="Connectable"> The new connectable state for the
              Radio. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              driver-dependent code. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalSetDiscoverable(System.Boolean)">
            <summary> Implements a hardware-dependent code for changing the
              discoverable state of the local Bluetooth Radio. </summary>
            <param name="Discoverable"> The new discoverable state for the
              Radio. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              driver-dependent code. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalSetName(System.String)">
            <summary> Implements a hardware-dependent code for changing the local
              Bluetooth Radio module name. </summary>
            <param name="Name"> The new Radio name. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              driver-dependent code. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalTurnOn">
            <summary> The method turns the local Bluetooth radio ON. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              driver-dependent code. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalTurnOff">
            <summary> The method turns the local Bluetooth radio OFF. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              driver-dependent code. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalDiscoverClassic(System.Byte)">
            <summary> Implements a hardware-dependent code to start discovering for a
              remote Classic Bluetooth devices. </summary>
            <param name="Timeout"> Specifies the maximum amount of time before
              the inquiry is halted (in seconds). </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              driver-dependent code. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalDiscoverBle(System.Byte)">
            <summary> Implements a hardware-dependent code to start discovering for a
              remote Low Energy Bluetooth devices. </summary>
            <param name="Timeout"> Specifies the maximum amount of time before
              the inquiry is halted (in seconds). </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              driver-dependent code. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalTerminate">
            <summary> Implements a hardware-dependent code for discovering
              termination. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              driver-dependent code. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalEnumPairedDevices(System.Int64[]@)">
            <summary> Implements a hardware-dependent code for paired devices
              enumerating. </summary>
            <param name="Devices"> On output the dynamic array will be filled with
              pared devices MACs. A caller is responsible to free the memory
              allocated (if was) for this parameter. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              driver-dependent code. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalEnumConnectedDevices(System.Int64[]@)">
            <summary> Implements a hardware-dependent code for connected devices
              enumerating. </summary>
            <param name="Devices"> On output the dynamic array will be filled with
              connected devices MACs. A caller is responsible to free the memory
              allocated (if was) for this parameter. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              driver-dependent code. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalEnumRemoteServices(System.Int64,System.Guid,wclBluetooth.wclBluetoothService[]@)">
            <summary> Implements a hardware-dependent code for reading the available
              services from a remote Bluetooth device. </summary>
            <param name="Address"> The remote Bluetooth device's MAC
              address. </param>
            <param name="Uuid"> The pointer to a service's UUID. If an application
              need to get information about specific service it set this
              parameter to a valid pointer to the required service's UUID.
              If this parameter is <c>null</c> the information about all available
              services will be returned. </param>
            <param name="Services"> On output the remote Bluetooth device
              services list. An application is responsible to free a memory
              allocated for the array. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              driver-dependent code. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalIsRemoteDeviceInRange(System.Int64,System.Boolean@)">
            <summary> Implements a hardware-dependent code to check if a remote
              device is in range. </summary>
            <param name="Address"> The remote Bluetooth device's MAC
              address. </param>
            <param name="InRange"> If the function completed with success
              indicates if a remote device is in range. <c>True</c> if a remote
              device is in range. <c>False</c> otherwise. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              driver-dependent code. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalRemoteDisconnect(System.Int64)">
            <summary> Implements a hardware-dependent code to disconnect a remote
              device. </summary>
            <param name="Address"> The remote Bluetooth device's MAC
              address. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              driver-dependent code. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalGetRemoteAddressType(System.Int64,wclBluetooth.wclBluetoothAddressType@)">
            <summary> Implements a hardware-dependent code for reading a remote
              device address type. </summary>
            <param name="Address"> A remote Bluetooth enabled device's MAC
              address. </param>
            <param name="AddrType"> On output a remote device's Address
              type. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              driver-dependent code. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothAddressType" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalGetRemoteCod(System.Int64,System.UInt32@)">
            <summary> Implements a hardware-dependent code for reading a remote
              device COD (Class Of Device). </summary>
            <param name="Address"> A remote Bluetooth enabled device's MAC
              address. </param>
            <param name="Cod"> On output a remote device's COD. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              driver-dependent code. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalGetRemoteDeviceType(System.Int64,wclBluetooth.wclBluetoothDeviceType@)">
            <summary> Implements a hardware-dependent code to reading a remote
              Bluetooth device type. </summary>
            <param name="Address"> The remote Bluetooth device's MAC
              address. </param>
            <param name="DevType"> On output a remote Bluetooth device
              type. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              driver-dependent code. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothDeviceType" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalGetRemoteName(System.Int64,System.String@)">
            <summary> Implements a hardware-dependent code for querying a remote
              device's name. </summary>
            <param name="Address"> The remote Bluetooth device's MAC
              address. </param>
            <param name="Name"> On output a remote device's name. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              driver-dependent code. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalGetRemotePaired(System.Int64,System.Boolean@)">
            <summary> Implements a hardware-dependent code for reading a remote
              Bluetooth device paired status. </summary>
            <param name="Address"> The remote Bluetooth device's MAC
              address. </param>
            <param name="Paired"> On output a remote Bluetooth device paired status.
              if <c>True</c> a remote device has been paired with this
              Radio. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              driver-dependent code. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalGetRemoteConnectedStatus(System.Int64,System.Boolean@)">
            <summary> The function checks if the specified remote device is
              currently connected. </summary>
            <param name="Address"> The remote Bluetooth device's MAC
              address. </param>
            <param name="Connected"> On output the connected status of the
              remote device. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              driver-dependent code. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalGetRemoteRssi(System.Int64,System.SByte@)">
            <summary> Reads RSSI value from a remote device. </summary>
            <param name="Address"> The remote Bluetooth device's MAC
              address. </param>
            <param name="Rssi"> On output contains the RSSI value in dBm. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              driver-dependent code. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalConfirmReply(System.Int64,System.Boolean)">
            <summary> Implements a hardware-dependent code to reply on a
              confirm only pairing request. </summary>
            <param name="Address"> A remote device's MAC address. </param>
            <param name="Confirm"> An application must set this parameter to
              <c>True</c> to confirm pairing. Set it to <c>False</c> to reject
              pairing. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              driver-dependent code. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalIoCapabilityReply(System.Int64,wclBluetooth.wclBluetoothMitmProtection,wclBluetooth.wclBluetoothIoCapability,System.Boolean)">
            <summary> Implements a hardware-dependent code to reply on an
              IO capability request. </summary>
            <param name="Address"> A remote device's MAC address. </param>
            <param name="Mitm"> Specifies the "Man in the Middle" protection
              required for authentication. </param>
            <param name="IoCapability"> Defines the input/output capabilities of a
              Bluetooth Device. </param>
            <param name="OobPresent"> If this parameter is <c>True</c> the Out Of
              Band authentication will be executed. </param>
            <seealso cref="T:wclBluetooth.wclBluetoothMitmProtection" />
            <seealso cref="T:wclBluetooth.wclBluetoothIoCapability" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalNumericComparisonReply(System.Int64,System.UInt32,System.Boolean)">
            <summary> Implements a hardware-dependent code to reply on a
              numeric comparison request. </summary>
            <param name="Address"> A remote device's MAC address. </param>
            <param name="Value"> The numeric value reply. </param>
            <param name="Confirm"> An application must set this parameter to
              <c>True</c> to confirm pairing. Set it to <c>False</c> to reject
              pairing. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              driver-dependent code. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalOobDataReply(System.Int64,wclBluetooth.wclBluetoothOobData)">
            <summary> Implements a hardware-dependent code to reply on a
              Out Of Band pairing request. </summary>
            <param name="Address"> A remote device's MAC address. </param>
            <param name="OobData"> An Out Of Band pairing data. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              driver-dependent code. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothOobData" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalPasskeyReply(System.Int64,System.UInt32)">
            <summary> Implements a hardware-dependent code to reply for a
              passkey request event. </summary>
            <param name="Address"> The remote Bluetooth device's MAC
              address. </param>
            <param name="Passkey"> A Passkey provided by an application. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              driver-dependent code. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalPinReply(System.Int64,System.String)">
            <summary> Implements a hardware-dependent code to reply for a
              PIN request event. </summary>
            <param name="Address"> The remote Bluetooth device's MAC
              address. </param>
            <param name="Pin"> A PIN code provided by an application. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              driver-dependent code. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalProtectionLevelReply(System.Int64,wclBluetooth.wclBluetoothLeProtectionLevel)">
            <summary> Implements a hardware-dependent code to reply for a
              pairing protection level request event. </summary>
            <param name="Address"> The remote Bluetooth device's MAC
              address. </param>
            <param name="Protection"> A pairing protection level. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              driver-dependent code. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeProtectionLevel" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalRemotePair(System.Int64,wclBluetooth.wclBluetoothPairingMethod)">
            <summary> Implements a hardware-dependent code for pairing with a remote
              Bluetooth device. </summary>
            <param name="Address"> The remote Bluetooth device's MAC
              address. </param>
            <param name="Method"> The pairing method. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              driver-dependent code. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothPairingMethod" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalRemoteUnpair(System.Int64,wclBluetooth.wclBluetoothPairingMethod)">
            <summary> Implements a hardware-dependent code to unpair a remote
              Bluetooth device. </summary>
            <param name="Address"> The remote Bluetooth device's MAC
              address. </param>
            <param name="Method"> The unpairing method. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              driver-dependent code. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothPairingMethod" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalGetSimplePairingMode(System.Boolean@)">
            <summary> Implements a hardware-dependent code that reads a radio
              Secure Simple Pairing mode. </summary>
            <param name="Enabled"> If the function completed with success on output
              contains a boolean that indicates the current Secure Simple Pairing
              (SSP) mode. <c>True</c> if SSP is enabled. <c>False</c> if SSP is
              disabled. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              driver-dependent code. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalSetSimplePairingMode(System.Boolean)">
            <summary> Implements a hardware-dependent code that writes a radio
              Secure Simple Pairing mode. </summary>
            <param name="Enable"> A boolean that indicates the new Secure Simple
              Pairing (SSP) mode. Set this parameter to <c>True</c> to enable SSP.
              Set this parameter to <c>False</c> to disable SSP. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              driver-dependent code. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalCreateConnection(wclBluetooth.wclBluetoothConnectionType,wclCommunication.wclCustomConnection@)">
            <summary> Creates a hardware-dependent connection object based on
              connection type. </summary>
            <param name="ConnectionType"> A type of the required connection
              object. </param>
            <param name="Connection"> If the function completed with success on
              output contains the connection object. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclBluetooth.wclBluetoothConnectionType" />
            <seealso cref="T:wclCommunication.wclCustomConnection" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalCreateComPort(System.Int64,System.Guid,System.UInt16@)">
            <summary> Creates new virtual COM port. </summary>
            <param name="Address"> Remote device address. </param>
            <param name="Service"> A service's UUID. </param>
            <param name="Number"> If function completed with success the
              <c>Number</c> parameter contains a just created virtual COM port
              number. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              information about supported Bluetooth driver (API). </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalDestroyComPort(System.UInt16)">
            <summary> Destroys the virtual COM port. </summary>
            <param name="Number"> The virtual COM port number. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              information about supported Bluetooth driver (API). </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalEnumComPorts(wclBluetooth.wclVirtualComPort[]@)">
            <summary> Enumerates already installed Bluetooth virtual COM
              ports. </summary>
            <param name="ComPorts"> If the function completed with success contains
              array of all installed Bluetooth virtual COM ports. If not one vCOM
              was found the value of the <c>ComPorts</c> parameter can be
              <c>null</c>. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> <para> The function enumerates all installed Bluetooth virtual
              COM ports. The list includes vCOMs created by the application and
              vCOMs created by an user outside the application. </para>
              <para> A derived class must override this method to provide
              information about supported Bluetooth driver (API). </para> </remarks>
              /// <seealso cref="T:wclBluetooth.wclVirtualComPort" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalEnumInstalledServices(System.Int64,System.Guid[]@)">
            <summary> Enumerates services installed for specified Bluetooth
              device. </summary>
            <param name="Address"> Remote device address. </param>
            <param name="Services"> If the method completed with success on output
              contains GUID array of the installed services. If there is no services
              installed for the specified device the <c>Services</c> parameter is
              <c>nil</c> (an empty array). </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              hardware dependent code that enumerates installed services. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalInstallDevice(System.Int64,System.Guid)">
            <summary> Install drivers for specified Bluetooth device. </summary>
            <param name="Address"> Remote device address. </param>
            <param name="Service"> A service's UUID. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              hardware dependent code that installs driver. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalUninstallDevice(System.Int64,System.Guid)">
            <summary> Uninstall drivers for specified Bluetooth device. </summary>
            <param name="Address"> Remote device address. </param>
            <param name="Service"> A service's UUID. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> A derived class must override this method to provide
              hardware dependent code that uninstall driver. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalGetApi">
            <summary> Returns a Bluetooth API supported by the Radio
              object. </summary>
            <returns> The <see cref="T:wclBluetooth.wclBluetoothApi" /> describes a Bluetooth
              driver supported by this object. </returns>
            <remarks> A derived class must override this method to provide
              information about supported Bluetooth driver (API). </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothApi" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalGetApiName">
            <summary> Returns a supported Bluetooth API name. </summary>
            <returns> A name of the supported Bluetooth API. </returns>
            <remarks> A derived class must override this method to provide
              information about supported Bluetooth driver (API) name. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalGetAvailable">
            <summary> Implements a hardware-dependent code to check a Bluetooth
              hardware state. </summary>
            <returns> Returns <c>True</c> if a Bluetooth hardware is available.
              <c>False</c> otherwise. </returns>
            <remarks> A derived class must override this method to provide
              information about supported Bluetooth driver. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.HalGetPlugged">
            <summary> Implements a hardware-dependent code to check a Bluetooth
              hardware physical state. </summary>
            <returns> Returns <c>True</c> if a Bluetooth hardware is physically
              available. <c>False</c> otherwise. </returns>
            <remarks> A derived class must override this method to provide
              information about supported Bluetooth driver. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.CheckAvailable">
            <summary> The method checks that a Bluetooth driver and a hardware is
              available. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> Any call to this method must be protected by
              the local radio Critical Section. </remarks>
        </member>
        <member name="P:wclBluetooth.wclBluetoothRadio.IncludePaired">
            <summary> Gets the devices discovering modification flag. </summary>
            <value> The <c>Boolean</c> value indicates if paired devices must be
              returned as found during devices discovering even if they are not
              available. <c>true</c> if paired devices must be returned.
              <c>false</c> if only available devices must be returned. </value>
        </member>
        <member name="P:wclBluetooth.wclBluetoothRadio.LeDiscovering">
            <summary> Gets the discovering type flag. </summary>
            <value> <c>True</c> if LE discovering is executing. <c>False</c> if
              classic discovering is executing. </value>
        </member>
        <member name="P:wclBluetooth.wclBluetoothRadio.Receiver">
            <summary> Gets the message receiver object. </summary>
            <value> A <see cref="T:wclCommon.wclMessageReceiver" /> object used in
              radio. </value>
            <remarks> For internal use only. </remarks>
            <seealso cref="T:wclCommon.wclMessageReceiver" />
        </member>
        <member name="P:wclBluetooth.wclBluetoothRadio.PairAddress">
            <summary> Gets the pairing device address for manual pairing. </summary>
            <value> A pairing device address. </value>
            <remarks> For internal use only. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.#ctor(wclBluetooth.wclBluetoothManager)">
            <summary> Creates a new radio object. </summary>
            <param name="Manager"> The <see cref="T:wclBluetooth.wclBluetoothManager" /> object
              that creates and owns the Radio. If the <c>Manager</c> parameter is
              <c>null</c> the <see cref="T:wclCommon.wclECritical" /> exception raises. </param>
            <remarks> An application must never create the Radio objects directly.
              Instead of that an application must use methods of the
              <c>wclBluetoothManager</c> component. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothManager" />
            <exception cref="T:wclCommon.wclECritical" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.Finalize">
            <summary> Frees the radio object</summary>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.GetAddress(System.Int64@)">
            <summary> Reads the local Bluetooth Radio MAC address. </summary>
            <param name="Address"> On output the local Bluetooth Radio
              address. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.GetCod(System.UInt32@)">
            <summary> Reads the local Bluetooth Radio Class Of Device
              (COD). </summary>
            <param name="Cod"> On output the local Bluetooth Radio COD. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.GetConnectable(System.Boolean@)">
            <summary> Read the local Bluetooth Radio connectable state. </summary>
            <param name="Connectable"> On output the local Bluetooth Radio
              connectable state. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> <para> If the returned <c>Connectable</c> parameter value
              is <c>True</c> remote Bluetooth enabled devices can connect to
              this Radio. </para>
              <para> If the value of the <c>Connectable</c> parameter is
              <c>False</c> remote Bluetooth enabled devices can not connect to the
              Radio. </para> </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.GetDiscoverable(System.Boolean@)">
            <summary> Read the local Bluetooth Radio discoverable state. </summary>
            <param name="Discoverable"> On output the local Bluetooth Radio
              discoverable state. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> <para> If the returned <c>Discoverable</c> parameter value
              is <c>True</c> remote Bluetooth enabled devices can discover this
              Radio. </para>
              <para> If the value of the <c>Discoverable</c> parameter is
              <c>False</c> remote Bluetooth enabled devices can not discover the
              Radio. </para> </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.GetHciVersion(System.Byte@,System.UInt16@)">
            <summary> Reads the HCI version of the local Radio module. </summary>
            <param name="Version"> On output the HCI version number. </param>
            <param name="Revision"> On output the HCI revision number. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> <para> The HCI version assignment numbers: </para>
                      <para> 0 - Bluetooth Core Specification 1.0b </para>
                      <para> 1 - Bluetooth Core Specification 1.1 </para>
                      <para> 2 - Bluetooth Core Specification 1.2 </para>
                      <para> 3 - Bluetooth Core Specification 2.0 + EDR </para>
                      <para> 4 - Bluetooth Core Specification 2.1 + EDR </para>
                      <para> 5 - Bluetooth Core Specification 3.0 + HS </para>
                      <para> 6 - Bluetooth Core Specification 4.0 </para>
                      <para> 7 - Bluetooth Core Specification 4.1 </para>
                      <para> 8 - Bluetooth Core Specification 4.2 </para>
                      <para> 9 - Bluetooth Core Specification 5.0 </para>
                      <para> 10 - Bluetooth Core Specification 5.1 </para>
                      <para> 11 - Bluetooth Core Specification 5.2 </para>
                      <para> 12-255 - Reserved </para> </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.GetLmpVersion(System.Byte@,System.UInt16@)">
            <summary> Reads the LMP version of the local Radio module. </summary>
            <param name="Version"> On output the LMP version number. </param>
            <param name="Subversion"> On output the LMP subversion number. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> <para> The LMP version assignment numbers: </para>
                      <para> 0 - Bluetooth Core Specification 1.0b </para>
                      <para> 1 - Bluetooth Core Specification 1.1 </para>
                      <para> 2 - Bluetooth Core Specification 1.2 </para>
                      <para> 3 - Bluetooth Core Specification 2.0 + EDR </para>
                      <para> 4 - Bluetooth Core Specification 2.1 + EDR </para>
                      <para> 5 - Bluetooth Core Specification 3.0 + HS </para>
                      <para> 6 - Bluetooth Core Specification 4.0 </para>
                      <para> 7 - Bluetooth Core Specification 4.1 </para>
                      <para> 8 - Bluetooth Core Specification 4.2 </para>
                      <para> 9 - Bluetooth Core Specification 5.0 </para>
                      <para> 10 - Bluetooth Core Specification 5.1 </para>
                      <para> 11 - Bluetooth Core Specification 5.2 </para>
                      <para> 12–255 - Reserved </para> </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.GetManufacturer(System.UInt16@)">
            <summary> Reads the Bluetooth Radio manufacturer ID. </summary>
            <param name="Manu"> On output the manufacturer ID. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> The full list of the manufacturers ID can be found on the
              Bluetooth SIG website by this link
              https://www.bluetooth.com/specifications/assigned-numbers/company-Identifiers </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.GetName(System.String@)">
            <summary> Reads the local Radio name. </summary>
            <param name="Name"> On output the local Bluetooth Radio
              name. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.SetCod(System.UInt32)">
            <summary> Changes the local Bluetooth Radio Class Of Device
              (COD). </summary>
            <param name="Cod"> The new local Bluetooth Radio COD. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.SetConnectable(System.Boolean)">
            <summary> Changes the connectable state of the local Bluetooth
              Radio. </summary>
            <param name="Connectable"> The new connectable state for the
              Radio. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> <para> Setting the <c>Conenctable</c> parameter to <c>True</c>
              allows remote Bluetooth enabled devices to connect to this
              Radio. </para>
              <para> Setting the <c>Conenctable</c> parameter to <c>False</c>
              blocks the Radio from remote Bluetooth enabled devices
              connecting. </para>
              <para> <c>Microsoft</c>: A radio that is non-connectable is
              non-discoverable. The radio must be made non-discoverable prior to
              making a radio non-connectable. Failure to make a radio
              non-discoverable prior to making it non-connectable will result in
              failure of this method call. </para> </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.SetDiscoverable(System.Boolean)">
            <summary> Changes the discoverable state of the local Bluetooth
              Radio. </summary>
            <param name="Discoverable"> The new discoverable state for the
              Radio. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> <para> Setting the <c>Discoverable</c> parameter to
              <c>True</c> allows remote Bluetooth enabled devices to discover this
              Radio. </para>
              <para> Setting the <c>Discoverable</c> parameter to <c>False</c>
              blocks the Radio from discovering by remote Bluetooth enabled
              devices. </para>
              <para> <c>Microsoft</c>: Use the <c>GetDiscoverable</c> method to
              determine the current state of a Bluetooth radio. Windows ensures that
              a discoverable system is connectable, and as such, the radio must
              allow incoming connections prior to making a radio discoverable.
              Failure to allow incoming connections results in the
              <c>SetDiscoverable</c> method call failing. </para>
              <para> When <c>SetDiscoverable</c> changes the discovery state, the
              new state is valid for the lifetime of the calling application.
              Additionally, if a Bluetooth radio previously made discoverable with
              this function is disabled and re-enabled via the application,
              discoverability will not persist. Once the calling application
              terminates, the discovery state of the specified Bluetooth radio
              reverts to the state it was in before <c>SetDiscoverable</c> was
              called. </para> </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.SetName(System.String)">
            <summary> Sets a new name for the local Bluetooth Radio
              module. </summary>
            <param name="Name"> The new Radio name. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.TurnOn">
            <summary> The method turns the local Bluetooth radio ON. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.TurnOff">
            <summary> The method turns the local Bluetooth radio OFF. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.Discover(System.Byte,wclBluetooth.wclBluetoothDiscoverKind,System.Boolean)">
            <summary> Starts discovering for a remote Bluetooth enabled
              devices. </summary>
            <param name="Timeout"> Specifies the maximum amount of time before
              the inquiry is halted (in seconds). </param>
            <param name="Kind"> Specifies the discovered Bluetooth device
              types. </param>
              /// <param name="IncludePaired"> Set this parameter to <c>true</c> if you
              need to get paired devices reported as just found even such devices
              are not available. If this parameter is <c>false</c> only available
              devices will be returned. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> <para> If the discovering started the
              <c>OnDiscoveringStarted</c> event of the
              <see cref="T:wclBluetooth.wclBluetoothManager" /> component fires. </para>
              <para> When the discovering for the remote Bluetooth enabled devices
              completed (with or without success) the <c>OnDiscoveringCompleted</c>
              event of the <see cref="T:wclBluetooth.wclBluetoothManager" /> component
              fires. </para> </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothDiscoverKind" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.Terminate">
            <summary> Terminates the discovering of remote Bluetooth enabled
              devices. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> On legacy Windows (Windows XP, Vista, 7, 8 and 8.1) platforms
              with Microsoft Bluetooth drivers the Terminate method does not
              terminate discovering but simple indicates that the discovering result
              should be ignored and keeps discovering thread runs in background.
              If you call the <c>Close</c> method right after Terminate call and
              the discovering has not been completed yet you may get delay with the
              <c>Close</c> method return because it has to wait for the discovering
              thread completion. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.EnumPairedDevices(System.Int64[]@)">
            <summary> The method enumerates already paired devices. </summary>
            <param name="Devices"> On output the dynamic array will be filled with
              pared devices MACs. A caller is responsible to free the memory
              allocated (if was) for this parameter. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.EnumConnectedDevices(System.Int64[]@)">
            <summary> The method enumerates connected devices. </summary>
            <param name="Devices"> On output the dynamic array will be filled with
              connected devices MACs. A caller is responsible to free the memory
              allocated (if was) for this parameter. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.EnumRemoteServices(System.Int64,System.Guid,wclBluetooth.wclBluetoothService[]@)">
            <summary> Reads the available services from a remote Bluetooth
              device. </summary>
            <param name="Address"> The remote Bluetooth device's MAC
              address. </param>
            <param name="Uuid"> The pointer to a service's UUID. If an application
              need to get information about specific service it set this
              parameter to a valid pointer to the required service's UUID.
              If this parameter is <c>null</c> the information about all available
              services will be returned. </param>
            <param name="Services"> On output the remote Bluetooth device
              services list. An application is responsible to free a memory
              allocated for the array. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.IsRemoteDeviceInRange(System.Int64,System.Boolean@)">
            <summary> Checks if a remote device is in range. </summary>
            <param name="Address"> The remote Bluetooth device's MAC
              address. </param>
            <param name="InRange"> If the function completed with success
              indicates if a remote device is in range. <c>True</c> if a remote
              device is in range. <c>False</c> otherwise. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> This function supports Classic Bluetooth devices
              only. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.RemoteDisconnect(System.Int64)">
            <summary> Forces a remote device disconnection. </summary>
            <param name="Address"> The remote Bluetooth device's MAC
              address. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> This method can be used to disconnect a remote Bluetooth
              enabled device with the given MAC address. It can disconnect any
              Bluetooth enabled device even a connection was made by the system and
              outside Bluetooth Framework. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.GetRemoteAddressType(System.Int64,wclBluetooth.wclBluetoothAddressType@)">
            <summary> Reads a remote device address type. </summary>
            <param name="Address"> A remote Bluetooth enabled device's MAC
              address. </param>
            <param name="AddrType"> On output a remote device's Address
              type. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclBluetooth.wclBluetoothAddressType" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.GetRemoteCod(System.Int64,System.UInt32@)">
            <summary> Reads a remote device COD (Class Of Device). </summary>
            <param name="Address"> A remote Bluetooth enabled device's MAC
              address. </param>
            <param name="Cod"> On output a remote device's COD. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.GetRemoteDeviceType(System.Int64,wclBluetooth.wclBluetoothDeviceType@)">
            <summary> Read a remote Bluetooth device type. </summary>
            <param name="Address"> The remote Bluetooth device's MAC
              address. </param>
            <param name="DevType"> On output a remote Bluetooth device
              type. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclBluetooth.wclBluetoothDeviceType" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.GetRemoteName(System.Int64,System.String@)">
            <summary> Queries a remote device's name. </summary>
            <param name="Address"> The remote Bluetooth device's MAC
              address. </param>
            <param name="Name"> On output a remote device's name. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.GetRemotePaired(System.Int64,System.Boolean@)">
            <summary> Reads a remote Bluetooth device paired status. </summary>
            <param name="Address"> The remote Bluetooth device's MAC
              address. </param>
            <param name="Paired"> On output a remote Bluetooth device paired status.
              if <c>True</c> a remote device has been paired with this
              Radio. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.GetRemoteConnectedStatus(System.Int64,System.Boolean@)">
            <summary> The function checks if the specified remote device is
              currently connected. </summary>
            <param name="Address"> The remote Bluetooth device's MAC
              address. </param>
            <param name="Connected"> On output the connected status of the
              remote device. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.GetRemoteRssi(System.Int64,System.SByte@)">
            <summary> Reads RSSI value from a remote device. </summary>
            <param name="Address"> The remote Bluetooth device's MAC
              address. </param>
            <param name="Rssi"> On output contains the RSSI value in dBm. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> Some devices require active connection to measure RSSI. If the method
              returns error an application can try to enumerate a device's services
              and immediately after that query RSSI once again. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.RemotePair(System.Int64,wclBluetooth.wclBluetoothPairingMethod)">
            <summary> Starts pairing with a remote Bluetooth device. </summary>
            <param name="Address"> The remote Bluetooth device's MAC
              address. </param>
            <param name="Method"> The pairing method. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclBluetooth.wclBluetoothPairingMethod" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.RemoteUnpair(System.Int64,wclBluetooth.wclBluetoothPairingMethod,System.Boolean)">
            <summary> Unpair a remote Bluetooth device. </summary>
            <param name="Address"> The remote Bluetooth device's MAC
              address. </param>
            <param name="Method"> The unpairing method. </param>
            <param name="Force"> Set this parameter to <c>true</c> to disable device
              pairing state and force unpairing. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclBluetooth.wclBluetoothPairingMethod" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.GetSimplePairingMode(System.Boolean@)">
            <summary> Gets the radio Secure Simple Pairing mode. </summary>
            <param name="Enabled"> If the function completed with success on output
              contains a boolean that indicates the current Secure Simple Pairing
              (SSP) mode. <c>True</c> if SSP is enabled. <c>False</c> if SSP is
              disabled. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.SetSimplePairingMode(System.Boolean)">
            <summary> Sets the radio Secure Simple Pairing mode. </summary>
            <param name="Enable"> A boolean that indicates the new Secure Simple
              Pairing (SSP) mode. Set this parameter to <c>True</c> to enable SSP.
              Set this parameter to <c>False</c> to disable SSP. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.CreateComPort(System.Int64,System.Guid,System.UInt16@)">
            <summary> Creates new virtual COM port. </summary>
            <param name="Address"> Remote device address. </param>
            <param name="Service"> A service's UUID. </param>
            <param name="Number"> If function completed with success the
              <c>Number</c> parameter contains a just created virtual COM port
              number. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> <para> A created vCOM is valid only while radio object is
              available. </para>
              <para> The <c>Service</c> parameter can be Serial Port Profile or
              DialUp Networking Profile UUID. </para> </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.DestroyComPort(System.UInt16)">
            <summary> Destroys the virtual COM port. </summary>
            <param name="Number"> The virtual COM port number. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> The function can destroy a vCOM created by the application
              only. It can not destroy the vCOM created outside the
              application. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.EnumComPorts(wclBluetooth.wclVirtualComPort[]@)">
            <summary> Enumerates already installed Bluetooth virtual COM
              ports. </summary>
            <param name="ComPorts"> If the function completed with success contains
              array of all installed Bluetooth virtual COM ports. If not one vCOM
              was found the value of the <c>ComPorts</c> parameter can be
              <c>null</c>. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> The function enumerates all installed Bluetooth virtual COM
              ports. The list includes vCOMs created by the application and vCOMs
              created by an user outside the application. </remarks>
              /// <seealso cref="T:wclBluetooth.wclVirtualComPort" />
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.EnumInstalledServices(System.Int64,System.Guid[]@)">
            <summary> Enumerates services installed for specified Bluetooth
              device. </summary>
            <param name="Address"> Remote device address. </param>
            <param name="Services"> If the method completed with success on output
              contains GUID array of the installed services. If there is no services
              installed for the specified device the <c>Services</c> parameter is
              <c>nil</c> (an empty array). </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.InstallDevice(System.Int64,System.Guid)">
            <summary> Install drivers for specified Bluetooth device. </summary>
            <param name="Address"> Remote device address. </param>
            <param name="Service"> A service's UUID. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> This feature is supported with Microsoft Bluetooth
              drivers only. </remarks>
        </member>
        <member name="M:wclBluetooth.wclBluetoothRadio.UninstallDevice(System.Int64,System.Guid)">
            <summary> Uninstall drivers for specified Bluetooth device. </summary>
            <param name="Address"> Remote device address. </param>
            <param name="Service"> A service's UUID. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> This feature is supported with Microsoft Bluetooth
              drivers only. </remarks>
        </member>
        <member name="P:wclBluetooth.wclBluetoothRadio.Api">
            <summary> Gets a Bluetooth driver (API) supported by this Bluetooth
              object. </summary>
            <value> The Bluetooth API value. </value>
            <seealso cref="T:wclBluetooth.wclBluetoothApi" />
        </member>
        <member name="P:wclBluetooth.wclBluetoothRadio.ApiName">
            <summary> Gets a supported Bluetooth API name. </summary>
            <value> A string representation of the supported Bluetooth API. </value>
        </member>
        <member name="P:wclBluetooth.wclBluetoothRadio.Available">
            <summary> Gets a Radio hardware state. </summary>
            <value> <c>True</c> if a Bluetooth hardware represented by this Radio
              is available. <c>False</c> otherwise. </value>
        </member>
        <member name="P:wclBluetooth.wclBluetoothRadio.ClassicSupported">
            <summary> Gets the Classic Bluetooth support status. </summary>
            <value> Returns <c>true</c> if the Radio is available and supports
              Classic Bluetooth. Returns <c>galse</c> otherwise. </value>
            <remarks> If the Radio supports Classic Bluetooth but is not available a
              returning value is <c>false</c>. </remarks>
        </member>
        <member name="P:wclBluetooth.wclBluetoothRadio.ComPorts">
            <summary> Gets the array of the created virtual COM ports. </summary>
            <value> The virtual COM ports array. </value>
            <seealso cref="T:wclBluetooth.wclVirtualComPort" />
        </member>
        <member name="P:wclBluetooth.wclBluetoothRadio.Discovering">
            <summary> Gets discovering state. </summary>
            <value> <c>True</c> if discovering is executing on this Radio. </value>
        </member>
        <member name="P:wclBluetooth.wclBluetoothRadio.LeSupported">
            <summary> Gets the Bluetooth Low Energy support status. </summary>
            <value> Returns <c>true</c> if the Radio is available and supports
              Bluetooth Low Energy. Returns <c>false</c> otherwise. </value>
            <remarks> If the Radio supports BLE but is not available a returning
              value is <c>false</c>. </remarks>
        </member>
        <member name="P:wclBluetooth.wclBluetoothRadio.Manager">
            <summary> Gets the <see cref="T:wclBluetooth.wclBluetoothManager" /> object that owns
              the Radio. </summary>
            <value> The <see cref="T:wclBluetooth.wclBluetoothManager" /> object. </value>
            <seealso cref="T:wclBluetooth.wclBluetoothManager" />
        </member>
        <member name="P:wclBluetooth.wclBluetoothRadio.Pairing">
            <summary> Gets a manual pairing state. </summary>
            <value> <c>True</c> if manual remote device pairing operation is
              executing. <c>False</c> otherwise. </value>
        </member>
        <member name="P:wclBluetooth.wclBluetoothRadio.Plugged">
            <summary> Gets a Radio hardware physical state. </summary>
            <value> <c>True</c> if a Bluetooth hardware represented by this Radio
              is physically connected. <c>False</c> otherwise. </value>
        </member>
        <member name="T:wclBluetooth.wclRfCommClient">
            <summary> The Bluetooth RFCOMM Client component. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothComponent" />
        </member>
        <member name="M:wclBluetooth.wclRfCommClient.DoConnect(System.Int32)">
            <summary> Fires the <c>OnConnect</c> event. </summary>
            <param name="Error"> The connection operation result code. If the
              parameter is <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" /> the connection to a remote
              device was established and the remote device is connected. Otherwise
              the connection was not established and the remote device is
              not connected. </param>
        </member>
        <member name="M:wclBluetooth.wclRfCommClient.DoCreateProcessor(wclCommunication.wclClientDataConnection)">
            <summary> Fires the <c>OnCreateProcessor</c> event. </summary>
            <param name="Connection"> The <see cref="T:wclCommunication.wclClientDataConnection" />
              object that requires a data processor. </param>
            <seealso cref="T:wclCommunication.wclClientDataConnection" />
        </member>
        <member name="M:wclBluetooth.wclRfCommClient.DoData(System.Byte[])">
            <summary> Fires the <c>OnData</c> event. </summary>
            <param name="Data"> The pointer to the received data buffer.
              It is guaranteed that the parameter points to a valid data buffer.
              The data buffer is valid only inside the event handler. If an
              application needs to use the data outside the event handle it must
              allocate own buffer and copy data into it. </param>
        </member>
        <member name="M:wclBluetooth.wclRfCommClient.DoDestroyProcessor(wclCommunication.wclClientDataConnection)">
            <summary> Fires the <c>OnDestroyProcessor</c> event. </summary>
            <param name="Connection"> The <see cref="T:wclCommunication.wclClientDataConnection" />
              object that requires a data processor. </param>
            <seealso cref="T:wclCommunication.wclClientDataConnection" />
        </member>
        <member name="M:wclBluetooth.wclRfCommClient.DoDisconnect(System.Int32)">
            <summary> Fires the <c>OnDisconnect</c> event. </summary>
            <param name="Reason"> The disconnection code. If the
              parameter is <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" /> the connection was closed
              by the <c>Disconnect</c> call. Otherwise indicates the disconnection
              reason. </param>
        </member>
        <member name="M:wclBluetooth.wclRfCommClient.#ctor">
            <summary> Creates new RFCOMM client component. </summary>
        </member>
        <member name="M:wclBluetooth.wclRfCommClient.Connect(wclBluetooth.wclBluetoothRadio)">
            <summary> Starts connecting to a remote Bluetooth device. </summary>
            <param name="Radio"> The <see cref="T:wclBluetooth.wclBluetoothRadio" /> object
              that handles the connection. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
        </member>
        <member name="M:wclBluetooth.wclRfCommClient.Disconnect">
            <summary> Disconnects from the connection remote device. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclRfCommClient.GetReadBufferSize(System.UInt32@)">
            <summary> Reads the read buffer size. </summary>
            <param name="Size"> On output he read buffer size in bytes. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclRfCommClient.GetWriteBufferSize(System.UInt32@)">
            <summary> Reads the write buffer size. </summary>
            <param name="Size"> On output the write buffer size in bytes. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclRfCommClient.SetReadBufferSize(System.UInt32)">
            <summary> Sets the read buffer size. </summary>
            <param name="Size"> The new read buffer size in bytes. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclRfCommClient.SetWriteBufferSize(System.UInt32)">
            <summary> Sets the write buffer size. </summary>
            <param name="Size"> The new write buffer size in bytes. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclRfCommClient.Write(System.Byte[],System.UInt32@)">
            <summary> Sends data to the connected device. </summary>
            <param name="Data"> The pointer to the data buffer that should be sent
              to the connected device. </param>
            <param name="Written"> The amount of bytes actually written to the
              device. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> The write is synchronous operation. </remarks>
        </member>
        <member name="P:wclBluetooth.wclRfCommClient.Processor">
            <summary> Gets the Data Processor created for the connection. </summary>
            <value> The <see cref="T:wclCommunication.wclCustomClientDataProcessor" />
              object. </value>
            <seealso cref="T:wclCommunication.wclCustomClientDataProcessor" />
        </member>
        <member name="P:wclBluetooth.wclRfCommClient.Radio">
            <summary> Gets the radio object used for connection. </summary>
            <value> The <see cref="T:wclBluetooth.wclBluetoothRadio" /> object. </value>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
        </member>
        <member name="P:wclBluetooth.wclRfCommClient.Service">
            <summary> Gets and sets the service's UUID that should be used
              for connection. </summary>
            <value> The Bluetooth service's UUID. </value>
            <remarks> If an application changes the property when connection is
              active the <see cref="T:wclBluetooth.wclEBluetoothClient" /> exception
              raises. </remarks>
            <exception cref="T:wclBluetooth.wclEBluetoothClient" />
        </member>
        <member name="P:wclBluetooth.wclRfCommClient.State">
            <summary> Gets the current client state. </summary>
            <value> The client state. </value>
            <seealso cref="T:wclCommunication.wclClientState" />
        </member>
        <member name="P:wclBluetooth.wclRfCommClient.Address">
            <summary> Gets and sets a target Bluetooth device's MAC
              address. </summary>
            <value> The Bluetooth MAC address. </value>
            <remarks> If an application changes the property when connection is
              active the <see cref="T:wclBluetooth.wclEBluetoothClient" /> exception
              raises. </remarks>
            <exception cref="T:wclBluetooth.wclEBluetoothClient" />
        </member>
        <member name="P:wclBluetooth.wclRfCommClient.Authentication">
            <summary> Gets and sets the authentication property for the
              connection. </summary>
            <value> <c>True</c> if the authentication is enabled. </value>
            <remarks> <para> If an application changes the property when connection
              is active the <see cref="T:wclBluetooth.wclEBluetoothClient" /> exception
              raises. </para>
              <para> If the Authentication if switched off (<c>False</c>) the
              <c>Encryption</c> is also switched off. </para> </remarks>
            <exception cref="T:wclBluetooth.wclEBluetoothClient" />
        </member>
        <member name="P:wclBluetooth.wclRfCommClient.Channel">
            <summary> Gets and sets the RFCOMM channel number used for
              connection. </summary>
            <value> The RF COMM channel number. The value must be between 0 and 33
              (including 0 and 32). </value>
            <remarks> <para> If an application changes the property when connection
              is active the <see cref="T:wclBluetooth.wclEBluetoothClient" /> exception
              raises. </para>
              <para> If the <c>Channel</c> value is 0 a Bluetooth driver try to
              resolve required channel number by querying a target devices SDP
              using the service's UUID. In this case it will use the first found
              service that matches the UUID. </para> </remarks>
            <exception cref="T:wclBluetooth.wclEBluetoothClient" />
            <exception cref="T:wclCommon.wclEInvalidArgument" />
        </member>
        <member name="P:wclBluetooth.wclRfCommClient.Encryption">
            <summary> Gets and sets the Encryption property for the
              connection. </summary>
            <value> <c>True</c> if Encryption is enabled for the
              connection. </value>
            <remarks> <para> If an application changes the property when connection
              is active the <see cref="T:wclBluetooth.wclEBluetoothClient" /> exception
              raises. </para>
              <para> The Encryption can be set to <c>True</c> only if the <c>Authentication</c>
              property is also set to <c>True</c>. </para> </remarks>
            <exception cref="T:wclBluetooth.wclEBluetoothClient" />
            <exception cref="T:wclCommon.wclEInvalidArgument" />
        </member>
        <member name="P:wclBluetooth.wclRfCommClient.Timeout">
            <summary> Gets and sets the connect timeout value. </summary>
            <value> The connect timeout value in milliseconds. </value>
            <remarks> If an application changes the property when client is
              connected the <see cref="T:wclCommunication.wclEClientActive" /> exception
              raises. If new value of the <c>Timeout</c> is <c>0</c> the
              <see cref="T:wclCommon.wclEInvalidArgument" /> exception raises. </remarks>
            <exception cref="T:wclCommunication.wclEClientActive" />
            <exception cref="T:wclCommon.wclEInvalidArgument" />
        </member>
        <member name="E:wclBluetooth.wclRfCommClient.OnConnect">
            <summary> The event fires when a connection to a remote device
              has been completed (with or without success). </summary>
            <remarks> If the <c>Error</c> parameter of the event is not
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" /> an application may call <c>Connect</c>
              method again from inside the event handler. </remarks>
            <seealso cref="T:wclCommunication.wclClientConnectionConnectEvent" />
        </member>
        <member name="E:wclBluetooth.wclRfCommClient.OnCreateProcessor">
            <summary> The event fires when connection to a remote device has
              been established with success to allow application provide a
              data processor for the connection. </summary>
            <remarks> If an application needs an additional data processed it
              can use Data Processors. An application must create a Data Processor
              inside this event handler. If a Data Processor created for the
              connection the <c>OnData</c> event will NOT fire. </remarks>
            <seealso cref="T:wclCommunication.wclClientConnectionProcessorEvent" />
            <seealso cref="T:wclCommunication.wclCustomClientDataProcessor" />
        </member>
        <member name="E:wclBluetooth.wclRfCommClient.OnData">
            <summary> The event fires when new data is received from the
              connected remote device. </summary>
            <seealso cref="T:wclCommunication.wclConnectionDataEvent" />
        </member>
        <member name="E:wclBluetooth.wclRfCommClient.OnDestroyProcessor">
            <summary> The event fires when connection to a remote device has
              been terminated. An application must destroy the Data Processor
              created for the connection. </summary>
            <seealso cref="T:wclCommunication.wclClientConnectionProcessorEvent" />
            <seealso cref="T:wclCommunication.wclCustomClientDataProcessor" />
        </member>
        <member name="E:wclBluetooth.wclRfCommClient.OnDisconnect">
            <summary> The event fires when the remote connected device has been
              disconnected. </summary>
            <seealso cref="T:wclCommunication.wclClientConnectionDisconnectEvent" />
        </member>
        <member name="T:wclBluetooth.wclRfCommServer">
            <summary> Bluetooth RFCOMM server. </summary>
            <remarks> The <c>TwclRfCommClient</c> component enables an
              application to accept connections from Bluetooth devices through RFCOMM
              protocol and work with RFCOMM based profiles (SPP, OBEX,
              others). </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothComponent" />
        </member>
        <member name="M:wclBluetooth.wclRfCommServer.DoClosed(System.Int32)">
            <summary> Fires the <c>OnClosed</c> event. </summary>
            <param name="Reason"> Indicates closing reason. </param>
        </member>
        <member name="M:wclBluetooth.wclRfCommServer.DoConnect(wclBluetooth.wclRfCommServerClientConnection,System.Int32)">
            <summary> Fires the <c>OnConnect</c> event. </summary>
            <param name="Client"> The
              <see cref="T:wclCommunication.wclServerClientConnection" /> represents a remote
              connected client. </param>
            <param name="Error"> The connection operation result code. If the
              parameter is <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" /> the connection to a remote
              device was established and the remote device is connected. Otherwise
              the connection was not established and the remote device is
              not connected. </param>
            <seealso cref="T:wclBluetooth.wclRfCommServerClientConnection" />
        </member>
        <member name="M:wclBluetooth.wclRfCommServer.DoCreateProcessor(wclCommunication.wclServerClientDataConnection)">
            <summary> Fires the <c>OnCreateProcessor</c> event. </summary>
            <param name="Connection"> The
              <see cref="T:wclCommunication.wclServerClientDataConnection" /> object that requires a
              data processor. </param>
            <seealso cref="T:wclCommunication.wclServerClientDataConnection" />
        </member>
        <member name="M:wclBluetooth.wclRfCommServer.DoData(wclBluetooth.wclRfCommServerClientConnection,System.Byte[])">
            <summary> Fires the <c>OnData</c> event. </summary>
            <param name="Client"> A
              <see cref="T:wclBluetooth.wclRfCommServerClientConnection" /> object
              represents a remote client connection. </param>
            <param name="Data"> The pointer to the received data buffer.
              It is guaranteed that the parameter points to a valid data buffer.
              The data buffer is valid only inside the event handler. If an
              application needs to use the data outside the event handle it must
              allocate own buffer and copy data into it. </param>
            <seealso cref="T:wclBluetooth.wclRfCommServerClientConnection" />
        </member>
        <member name="M:wclBluetooth.wclRfCommServer.DoDestroyProcessor(wclCommunication.wclServerClientDataConnection)">
            <summary> Fires the <c>OnDestroyProcessor</c> event. </summary>
            <param name="Connection"> The
              <see cref="T:wclCommunication.wclServerClientDataConnection" /> object that requires a
              data processor. </param>
            <seealso cref="T:wclCommunication.wclServerClientDataConnection" />
        </member>
        <member name="M:wclBluetooth.wclRfCommServer.DoDisconnect(wclBluetooth.wclRfCommServerClientConnection,System.Int32)">
            <summary> Fires the <c>OnDisconnect</c> event. </summary>
            <param name="Client"> The
              <see cref="T:wclCommunication.wclServerClientConnection" /> represents a remote
              connected client. </param>
            <param name="Reason"> The disconnection code. If the
              parameter is <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" /> the connection was closed
              by the <c>Disconnect</c> call. Otherwise indicates the disconnection
              reason. </param>
            <seealso cref="T:wclBluetooth.wclRfCommServerClientConnection" />
        </member>
        <member name="M:wclBluetooth.wclRfCommServer.DoListen">
            <summary> Fires the <c>OnListen</c> event. </summary>
        </member>
        <member name="M:wclBluetooth.wclRfCommServer.DoGetSdpAttributes(System.UInt16[]@,wclBluetooth.wclBluetoothSdpProfile[]@,System.Byte[]@,System.UInt32@)">
            <summary> Fires the <c>GetSdpAttributes</c> event. </summary>
            <param name="Protocols"> The additional protocol descriptors array that
              should be added to SDP record. </param>
            <param name="Profiles"> The profile list that should be added to SDP
              record. </param>
            <param name="Formats"> Other attributes that should be added to SDP
              record. </param>
            <param name="Cod"> <para> Class of device (COD) information. A 32-bit
              parameter of COD_SERVICE_* class of device bits associated with this
              SDP record. The system combines these bits with COD bits from other
              service records and system characteristics. The resulting class of
              device for the local radio is advertised when the radio is found during
              device inquiry. When the last SDP record associated with a particular
              service bit is deleted, that service bit is no longer reported in
              responses to future device inquiries. </para>
              <para> The format and possible values for the COD field are defined in
              the Bluetooth Assigned Numbers 1.1 portion of the Bluetooth
              specification, Section 1.2. (This resource may not be available in some
              languages and countries.) </para> </param>
            <remarks> <para> The HAL Radio implementation calls this method when
              needs to add custom attributes into the SDP record. </para>
              <para> BlueSoleil driver does not support custom SDP records and this
              method does not work with BlueSoleil Bluetooth driver. </para>
              <para> A derived class must always call the inherited
              method.  </para> </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothSdpProfile" />
        </member>
        <member name="M:wclBluetooth.wclRfCommServer.#ctor">
            <summary> Creates a new component. </summary>
        </member>
        <member name="M:wclBluetooth.wclRfCommServer.Close">
            <summary> Closes the server. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclRfCommServer.Listen(wclBluetooth.wclBluetoothRadio)">
            <summary> The method starts listening for client connections. </summary>
            <param name="Radio"> The Bluetooth Radio that should handle the
              connection. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio"/>
        </member>
        <member name="P:wclBluetooth.wclRfCommServer.AssignedChannel">
            <summary> Gets the RFCOMM assigned channel number. </summary>
            <value> The RFCOMM assigned channel number. </value>
        </member>
        <member name="P:wclBluetooth.wclRfCommServer.Count">
            <summary> Gets the number of the connected clients. </summary>
            <value> The number of the connected clients. </value>
        </member>
        <member name="P:wclBluetooth.wclRfCommServer.Item(System.Int32)">
            <summary> Gets the connected client by its index. </summary>
            <value> The <see cref="T:wclBluetooth.wclRfCommServerClientConnection" /> represents
              the connected client. </value>
            <seealso cref="T:wclBluetooth.wclRfCommServerClientConnection" />
        </member>
        <member name="P:wclBluetooth.wclRfCommServer.Radio">
            <summary> Gets the connection radio object. </summary>
            <value> The <see cref="T:wclBluetooth.wclBluetoothRadio" /> object that handles
              the connection. </value>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
        </member>
        <member name="P:wclBluetooth.wclRfCommServer.Service">
            <summary> Gets and sets the Bluetooth service UUID used for
              connection. </summary>
            <value> A Bluetooth service UUID. </value>
            <remarks> <para> If an application changes the property when connection
              is active the <see cref="T:wclBluetooth.wclEBluetoothServer" /> exception
              raises. </para>
              <para> If the Authentication if switched off (<c>False</c>) the
              <c>Encryption</c> is also switched off. </para> </remarks>
            <exception cref="T:wclBluetooth.wclEBluetoothServer" />
        </member>
        <member name="P:wclBluetooth.wclRfCommServer.State">
            <summary> Gets the current connection state. </summary>
            <value> The client connection state. </value>
            <seealso cref="T:wclCommunication.wclServerState" />
        </member>
        <member name="P:wclBluetooth.wclRfCommServer.Authentication">
            <summary> Gets and sets the authentication value. </summary>
            <value> <c>True</c> if the connection required authentication.
              <c>False</c> otherwise. </value>
            <remarks> <para> If an application changes the property when connection
              is active the <see cref="T:wclBluetooth.wclEBluetoothServer" /> exception
              raises. </para>
              <para> If the Authentication if switched off (<c>False</c>) the
              <c>Encryption</c> is also switched off. </para> </remarks>
            <exception cref="T:wclBluetooth.wclEBluetoothServer" />
        </member>
        <member name="P:wclBluetooth.wclRfCommServer.Channel">
            <summary> Gets and sets the service RFCOMM channel number. <c>0</c> to
              auto detection. </summary>
            <value> The RFCOMM channel number used for connection. </value>
            <remarks> If an application changes the property when connection
              is active the <see cref="T:wclBluetooth.wclEBluetoothServer" /> exception
              raises. </remarks>
            <exception cref="T:wclBluetooth.wclEBluetoothServer" />
            <exception cref="T:wclCommon.wclEInvalidArgument" />
        </member>
        <member name="P:wclBluetooth.wclRfCommServer.Encryption">
            <summary> Gets and sets the encryption state of the connection. </summary>
            <value> <c>True</c> if the connection is encrypted. <c>False</c>
              otherwise. </value>
            <remarks> <para> If an application changes the property when connection
              is active the <see cref="T:wclBluetooth.wclEBluetoothServer" /> exception
              raises. </para>
              <para> The Encryption can be set to <c>True</c> only if
              the <c>Authentication</c> property is also set to
              <c>True</c>. </para> </remarks>
            <exception cref="T:wclBluetooth.wclEBluetoothServer" />
            <exception cref="T:wclCommon.wclEInvalidArgument" />
        </member>
        <member name="P:wclBluetooth.wclRfCommServer.ServiceName">
            <summary> Gets and sets the service name. </summary>
            <value> The service name. </value>
            <remarks> If an application changes the property when connection
              is active the <see cref="T:wclBluetooth.wclEBluetoothServer" /> exception
              raises. </remarks>
            <exception cref="T:wclBluetooth.wclEBluetoothServer" />
        </member>
        <member name="E:wclBluetooth.wclRfCommServer.GetSdpAttributes">
            <summary> The event fires when the server builds SDP record for
              the service it runs. If an application needs to provide
              additional attributes it should handle the event. By default no
              additional attributes is added for the SDP record. </summary>
            <remarks> This event will not fire with BlueSoleil Bluetooth
              driver. BlueSoleil does not support custom SDP records. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothGetSdpAttributesEvent" />
        </member>
        <member name="E:wclBluetooth.wclRfCommServer.OnClosed">
            <summary> The event fires when the server is closed. </summary>
            <seealso cref="T:wclCommunication.wclClientConnectionDisconnectEvent" />
        </member>
        <member name="E:wclBluetooth.wclRfCommServer.OnConnect">
            <summary> The event fires when a remote client is connected to
              the server. </summary>
            <seealso cref="T:wclBluetooth.wclRfCommServerConnectEvent" />
        </member>
        <member name="E:wclBluetooth.wclRfCommServer.OnCreateProcessor">
            <summary> The event fires when connection to a remote device has
              been established with success to allow application provide a
              data processor for the connection. </summary>
            <remarks> If an application needs an additional data processed it
              can use Data Processors. An application must create a Data Processor
              inside this event handler. If a Data Processor created for the
              connection the <c>OnData</c> event will NOT fire. </remarks>
            <seealso cref="T:wclCommunication.wclServerConnectionProcessorEvent" />
            <seealso cref="T:wclCommunication.wclCustomServerClientDataProcessor" />
        </member>
        <member name="E:wclBluetooth.wclRfCommServer.OnData">
            <summary> The event fires when new data is received from the
              connected remote device. </summary>
            <seealso cref="T:wclBluetooth.wclRfCommServerDataEvent" />
        </member>
        <member name="E:wclBluetooth.wclRfCommServer.OnDestroyProcessor">
            <summary> The event fires when connection to a remote device has
              been terminated. An application must destroy the Data Processor
              created for the connection. </summary>
            <seealso cref="T:wclCommunication.wclServerConnectionProcessorEvent" />
            <seealso cref="T:wclCommunication.wclCustomServerClientDataProcessor" />
        </member>
        <member name="E:wclBluetooth.wclRfCommServer.OnDisconnect">
            <summary> The event fires when a remote client has disconnected from the
              server. </summary>
            <seealso cref="T:wclBluetooth.wclRfCommServerDisconnectEvent" />
        </member>
        <member name="E:wclBluetooth.wclRfCommServer.OnListen">
            <summary> The event fires when the server is ready to accept incoming
              connections (is in listening state). </summary>
        </member>
        <member name="T:wclBluetooth.wclRfCommServerClientConnection">
            <summary> The Bluetooth RFCOMM server client connection base
              class. </summary>
            <seealso cref="T:wclCommunication.wclServerDataConnection" />
        </member>
        <member name="M:wclBluetooth.wclRfCommServerClientConnection.SetAddress(System.Int64)">
            <summary> Sets the connected device MAC address. </summary>
            <remarks> For internal use only. </remarks>
        </member>
        <member name="M:wclBluetooth.wclRfCommServerClientConnection.#ctor">
            <summary> Create the new RFCOMM server client connection. </summary>
        </member>
        <member name="P:wclBluetooth.wclRfCommServerClientConnection.Address">
            <summary> Gets the connected remote device's address. </summary>
            <value> The remote device's MAC address. </value>
        </member>
        <member name="T:wclBluetooth.wclBleSniffer">
            <summary> The Bluetooth LE packets sniffer. </summary>
        </member>
        <member name="M:wclBluetooth.wclBleSniffer.MessageReceived(wclCommon.wclMessage)">
            <summary> The method called when a new notification message
              received. </summary>
            <param name="Message"> A <see cref="T:wclCommon.wclMessage" /> object
              represents a notification message. </param>
            <remarks> <para> This method is for internal use only. </para>
              <para> If a derived class overrides this method it must always call
              the inherited implementation first. </para> </remarks>
            <seealso cref="T:wclCommon.wclMessage" />
        </member>
        <member name="M:wclBluetooth.wclBleSniffer.DoAdvDirectIndReceived(wclBluetooth.wclBluetoothLeAdvertisingPduHeader,System.Int64,System.Int64)">
            <summary> Fires the <c>OnAdvDirectIndReceived</c> event. </summary>
            <param name="PduHeader"> The PDU header. </param>
            <param name="AdvA"> The advertiser address. </param>
            <param name="TargetA"> The address of the device to which this PDU
              is addressed. </param>
            <remarks> The <c>TxAdd</c> field of the <c>PduHeader</c> parameter
              indicates whether the advertiser’s address in the <c>AdvA</c>
              parameter is public (TxAdd = False) or random (TxAdd = True).
              The <c>RxAdd</c> field of the <c>PduHeader</c> parameter indicates
              whether the target’s address in the <c>TargetA</c> parameter is
              public (RxAdd = False) or random (RxAdd = True). The <c>ChSel</c>
              field in the <c>PduHeader</c> parameter is <c>True</c> if the
              advertiser supports the LE Channel Selection Algorithm #2
              feature. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisingPduHeader" />
        </member>
        <member name="M:wclBluetooth.wclBleSniffer.DoAdvIndReceived(wclBluetooth.wclBluetoothLeAdvertisingPduHeader,System.Int64,System.Byte[])">
            <summary> Fires the <c>OnAdvIndReceived</c> event. </summary>
            <param name="PduHeader"> The PDU header. </param>
            <param name="AdvA"> The advertiser address. </param>
            <param name="AdvData"> The pointer to the advertisement data.
              Can be <c>null</c>. The pointer is valid only inside the event
              handler. </param>
            <remarks> The <c>TxAdd</c> field of the <c>PduHeader</c> parameter
              indicates whether the advertiser’s address in the <c>AdvA</c>
              parameter is public (TxAdd = False) or random (TxAdd = True). The
              <c>ChSel</c> field in the <c>PduHeader</c> parameter is <c>True</c>
              if the advertiser supports the LE Channel Selection Algorithm #2
              feature. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisingPduHeader" />
        </member>
        <member name="M:wclBluetooth.wclBleSniffer.DoAdvNonConnIndReceived(wclBluetooth.wclBluetoothLeAdvertisingPduHeader,System.Int64,System.Byte[])">
            <summary> Fires the <c>OnAdvNonConnIndReceived</c> event. </summary>
            <param name="PduHeader"> The PDU header. </param>
            <param name="AdvA"> The advertiser address. </param>
            <param name="AdvData"> The pointer to the advertisement data.
              Can be <c>null</c>. The pointer is valid only inside the event
              handler. </param>
            <remarks> The <c>TxAdd</c> field of the <c>PduHeader</c> parameter
              indicates whether the advertiser’s address in the <c>AdvA</c>
              parameter is public (TxAdd = False) or random (TxAdd = True). </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisingPduHeader" />
        </member>
        <member name="M:wclBluetooth.wclBleSniffer.DoAdvScanIndReceived(wclBluetooth.wclBluetoothLeAdvertisingPduHeader,System.Int64,System.Byte[])">
            <summary> Fires the <c>OnAdvScanIndReceived</c> event. </summary>
            <param name="PduHeader"> The PDU header. </param>
            <param name="AdvA"> The advertiser address. </param>
            <param name="AdvData"> The pointer to the advertisement data.
              Can be <c>null</c>. The pointer is valid only inside the event
              handler. </param>
            <remarks> The <c>TxAdd</c> field of the <c>PduHeader</c> parameter
              indicates whether the advertiser’s address in the <c>AdvA</c>
              parameter is public (TxAdd = False) or random (TxAdd = True). </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisingPduHeader" />
        </member>
        <member name="M:wclBluetooth.wclBleSniffer.DoConnectIndReceived(wclBluetooth.wclBluetoothLeAdvertisingPduHeader,System.Int64,System.Int64,wclBluetooth.wclBleSnifferLlData)">
            <summary> Fires the <c>OnConnectIndReceived</c> event. </summary>
            <param name="PduHeader"> The PDU header. </param>
            <param name="InitA"> The Initiator’s device address. </param>
            <param name="AdvA"> The advertiser’s device address. </param>
            <param name="LlData"> The Link Layer data. </param>
            <remarks> The <c>TxAdd</c> field of the <c>PduHeader</c> parameter
              indicates whether the advertiser’s address in the <c>InitA</c>
              parameter is public (TxAdd = False) or random (TxAdd = True). The
              <c>RxAdd</c> field of the <c>PduHeader</c> parameter indicates whether
              the advertiser’s device address in the <c>AdvA</c> parameter is public
              (RxAdd = False) or random (RxAdd = True). The <c>ChSel</c> field in
              the <c>PduHeader</c> parameter is <c>True</c> if the advertiser
              supports the LE Channel Selection Algorithm #2 feature. </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisingPduHeader" />
            <seealso cref="T:wclBluetooth.wclBleSnifferLlData" />
        </member>
        <member name="M:wclBluetooth.wclBleSniffer.DoScanReqReceived(wclBluetooth.wclBluetoothLeAdvertisingPduHeader,System.Int64,System.Int64)">
            <summary> Fires the <c>OnScanReqReceived</c> event. </summary>
            <param name="PduHeader"> The PDU header. </param>
            <param name="ScanA"> The scanner's address. </param>
            <param name="AdvA"> The address of the device to which this PDU
              is addressed. </param>
            <remarks> The <c>TxAdd</c> field of the <c>PduHeader</c> parameter
              indicates whether the scanner’s address in the <c>ScanA</c>
              parameter is public (TxAdd = False) or random (TxAdd = True).
              The <c>RxAdd</c> field of the <c>PduHeader</c> parameter indicates
              whether the target’s address in the <c>AdvA</c> parameter is
              public (RxAdd = False) or random (RxAdd = True). </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisingPduHeader" />
        </member>
        <member name="M:wclBluetooth.wclBleSniffer.DoScanRspReceived(wclBluetooth.wclBluetoothLeAdvertisingPduHeader,System.Int64,System.Byte[])">
            <summary> Fires the <c>OnScanRspReceived</c> event. </summary>
            <param name="PduHeader"> The PDU header. </param>
            <param name="AdvA"> The advertiser address. </param>
            <param name="ScanRspData"> The pointer to the advertisement data.
              Can be <c>null</c>. The pointer is valid only inside the event
              handler. </param>
            <remarks> The <c>TxAdd</c> field of the <c>PduHeader</c> parameter
              indicates whether the advertiser’s address in the <c>AdvA</c>
              parameter is public (TxAdd = False) or random
              (TxAdd = True). </remarks>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisingPduHeader" />
        </member>
        <member name="M:wclBluetooth.wclBleSniffer.DoRawPacketReceived(wclBluetooth.wclBluetoothLePacketHeader,System.Byte[])">
            <summary> Fires the <c>OnRawPacketReceived</c> event. </summary>
            <param name="Header"> The Bluetooth LE packet header. </param>
            <param name="Payload"> The pointer to the packet's payload raw bytes.
              The pointer is valid only inside an event handler. If an application
              needs to use the data outside the event handler it must copy the
              payload. </param>
            <seealso cref="T:wclBluetooth.wclBluetoothLePacketHeader" />
        </member>
        <member name="M:wclBluetooth.wclBleSniffer.DoStarted">
            <summary> Fires the <c>OnStarted</c> event. </summary>
        </member>
        <member name="M:wclBluetooth.wclBleSniffer.DoStopped">
            <summary> Fires the <c>OnStopped</c> event. </summary>
        </member>
        <member name="M:wclBluetooth.wclBleSniffer.#ctor">
            <summary> Creates new BLE sniffer component. </summary>
        </member>
        <member name="M:wclBluetooth.wclBleSniffer.Finalize">
            <summary> Frees the object. </summary>
        </member>
        <member name="M:wclBluetooth.wclBleSniffer.Start(System.String,System.Byte)">
            <summary> Starts capturing the BLE packets. </summary>
            <param name="DevicePath"> The device's path. If the parameter is an
              empty string first found device will be used. </param>
            <param name="Channel"> The channel number. Only channels 37, 38 and 39
              are supported. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclBleSniffer.Start(System.Byte)">
            <summary> Starts capturing the BLE packets. </summary>
            <param name="Channel"> The channel number. Only channels 37, 38 and 39
              are supported. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclBleSniffer.Stop">
            <summary> Stops capturing the BLE packets. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="P:wclBluetooth.wclBleSniffer.Active">
            <summary> Gets the sniffer's status. </summary>
            <value> <c>True</c> if the sniffer is running. <c>False</c>
              otherwise. </value>
        </member>
        <member name="P:wclBluetooth.wclBleSniffer.Channel">
            <summary> Gets the radio channel. </summary>
            <value> The channel number. </value>
        </member>
        <member name="P:wclBluetooth.wclBleSniffer.DevicePath">
            <summary> Gets the current device's path. </summary>
            <value> The device's path. </value>
        </member>
        <member name="E:wclBluetooth.wclBleSniffer.OnAdvDirectIndReceived">
            <summary> The event fires when the <c>ADV_DIRECT_IND</c> PDU
              received. </summary>
            <seealso cref="T:wclBluetooth.wclBleSnifferAdvIndReceivedEvent" />
        </member>
        <member name="E:wclBluetooth.wclBleSniffer.OnAdvIndReceived">
            <summary> The event fires when the <c>ADV_IND</c> PDU
              received. </summary>
            <seealso cref="T:wclBluetooth.wclBleSnifferAdvIndReceivedEvent" />
        </member>
        <member name="E:wclBluetooth.wclBleSniffer.OnAdvNonConnIndReceived">
            <summary> The event fires when the <c>ADV_NONCONN_IND</c> PDU
              received. </summary>
            <seealso cref="T:wclBluetooth.wclBleSnifferAdvNonConnIndReceivedEvent" />
        </member>
        <member name="E:wclBluetooth.wclBleSniffer.OnAdvScanIndReceived">
            <summary> The event fires when the <c>ADV_SCAN_IND</c> PDU
              received. </summary>
            <seealso cref="T:wclBluetooth.wclBleSnifferAdvScanIndReceivedEvent" />
        </member>
        <member name="E:wclBluetooth.wclBleSniffer.OnConnectIndReceived">
            <summary> The event fires when the <c>CONNECT_IND</c> PDU
              received. </summary>
            <seealso cref="T:wclBluetooth.wclBleSnifferConnectIndReceivedEvent" />
        </member>
        <member name="E:wclBluetooth.wclBleSniffer.OnScanReqReceived">
            <summary> The event fires when the <c>SCAN_REQ</c> PDU
              received. </summary>
            <seealso cref="T:wclBluetooth.wclBleSnifferScanReqReceivedEvent" />
        </member>
        <member name="E:wclBluetooth.wclBleSniffer.OnScanRspReceived">
            <summary> The event fires when the <c>SCAN_RSP</c> PDU
              received. </summary>
            <seealso cref="T:wclBluetooth.wclBleSnifferScanRspReceivedEvent" />
        </member>
        <member name="E:wclBluetooth.wclBleSniffer.OnRawPacketReceived">
            <summary> The event fires when a Bluetooth LE packet
              captured. </summary>
            <seealso cref="T:wclBluetooth.wclBleSnifferRawPacketReceivedEvent" />
        </member>
        <member name="E:wclBluetooth.wclBleSniffer.OnStarted">
            <summary> The event fires when the Sniffer was successfully
              started. </summary>
        </member>
        <member name="E:wclBluetooth.wclBleSniffer.OnStopped">
            <summary> The event fires when the Sniffer was successfully
              stopped. </summary>
        </member>
        <member name="T:wclBluetooth.wclBluetoothService">
            <summary> The structure represents a Bluetooth Service record. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothService.Handle">
            <summary> The service' handle. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothService.Uuid">
            <summary> The service's UUID. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothService.Channel">
            <summary> The service's RFCOMM channel number. For non-RFCOMM
              services this value is <c>0</c>. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothService.Name">
            <summary> The service's name. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothService.Comment">
            <summary> The service's comment. </summary>
        </member>
        <member name="T:wclBluetooth.wclVirtualComPort">
            <summary> The record describes created virtual COM port. </summary>
        </member>
        <member name="F:wclBluetooth.wclVirtualComPort.Address">
            <summary> Remote device MAC address. </summary>
        </member>
        <member name="F:wclBluetooth.wclVirtualComPort.Service">
            <summary> Service's UUID. </summary>
        </member>
        <member name="F:wclBluetooth.wclVirtualComPort.Number">
            <summary> Virtual COM port number. </summary>
        </member>
        <member name="F:wclBluetooth.wclVirtualComPort.Outgoing">
            <summary> Indicates outgoing vCOM. </summary>
            <remarks> If this member is <c>True</c> the vCOM is outgoing. If this
              member is <c>False</c> the vCOM is incoming. </remarks>
        </member>
        <member name="T:wclBluetooth.wclBluetoothSdpProfile">
            <summary> The structure describes the Bluetooth Profile for the server
              service record. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothSdpProfile.Uuid">
            <summary> The 16 buts profile's UUID. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothSdpProfile.Version">
            <summary> The profile's version number. </summary>
        </member>
        <member name="T:wclBluetooth.wclGattUuid">
            <summary> The structure contains information about a Bluetooth Low
              Energy (LE) Universally Unique Identifier (UUID). </summary>
        </member>
        <member name="F:wclBluetooth.wclGattUuid.IsShortUuid">
            <summary> Indicates if the Low Energy (LE) UUID a 16-bit shortened
              value, or if it is the long 128-bit value. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattUuid.ShortUuid">
            <summary> The short 16-bit value of the UUID. This member applies only
              if <c>IsShortUuid</c> is <c>True</c>. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattUuid.LongUuid">
            <summary> The long 128-bit value of the UUID. This member applies only
              if <c>IsShortUuid</c> is <c>False</c>. </summary>
        </member>
        <member name="T:wclBluetooth.wclGattService">
            <summary> The structure describes a Bluetooth Low Energy (LE) generic
              attribute (GATT) profile service. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattService.Uuid">
            <summary> The Universally Unique ID (UUID) of the Bluetooth LE GATT
              profile service. </summary>
            <seealso cref="T:wclBluetooth.wclGattUuid" />
        </member>
        <member name="F:wclBluetooth.wclGattService.Handle">
            <summary> The handle to the Bluetooth LE GATT profile
              attributes. </summary>
        </member>
        <member name="T:wclBluetooth.wclGattCharacteristic">
            <summary> The structure describes a Bluetooth Low Energy (LE) generic
              attribute (GATT) profile characteristic. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattCharacteristic.ServiceHandle">
            <summary> The handle to the Bluetooth LE GATT profile
              service. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattCharacteristic.Uuid">
            <summary> The Universally Unique ID (UUID) of the
              characteristic. </summary>
            <seealso cref="T:wclBluetooth.wclGattUuid" />
        </member>
        <member name="F:wclBluetooth.wclGattCharacteristic.Handle">
            <summary> The handle to the Bluetooth LE GATT profile
              attributes. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattCharacteristic.ValueHandle">
            <summary> The handle to the Bluetooth LE GATT profile
              characteristic value. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattCharacteristic.IsBroadcastable">
            <summary> The characteristic can be broadcast. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattCharacteristic.IsReadable">
            <summary> The characteristic can be read. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattCharacteristic.IsWritable">
            <summary> The characteristic can be written to. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattCharacteristic.IsWritableWithoutResponse">
            <summary> The characteristic can be written to without requiring
              a response. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattCharacteristic.IsSignedWritable">
            <summary> The characteristic can be signed writable. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattCharacteristic.IsNotifiable">
            <summary> The characteristic can be updated by the device through
              Handle Value Notifications, and the new value will be returned
              through the event. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattCharacteristic.IsIndicatable">
            <summary> The characteristic can be updated by the device through
              Handle Value Indications, and the new value will be returned through
              the event. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattCharacteristic.HasExtendedProperties">
            <summary> The characteristic has extended properties, which will be
              presented through a Characteristic Extended Properties
              descriptor. </summary>
        </member>
        <member name="T:wclBluetooth.wclGattDescriptor">
            <summary> The structure describes a Bluetooth Low Energy (LE) generic
              attribute (GATT) profile descriptor. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattDescriptor.ServiceHandle">
            <summary> The handle to the Bluetooth LE GATT profile
              service. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattDescriptor.CharacteristicHandle">
            <summary> The handle to the Bluetooth LE GATT profile
              characteristic. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattDescriptor.DescriptorType">
            <summary> The type of the Bluetooth LE GATT descriptor. </summary>
            <seealso cref="T:wclBluetooth.wclGattDescriptorType" />
        </member>
        <member name="F:wclBluetooth.wclGattDescriptor.Uuid">
            <summary> The Universally Unique ID (UUID) of the Bluetooth LE GATT
              descriptor. </summary>
            <seealso cref="T:wclBluetooth.wclGattUuid" />
        </member>
        <member name="F:wclBluetooth.wclGattDescriptor.Handle">
            <summary> The handle to the Bluetooth LE GATT profile
              attributes. </summary>
        </member>
        <member name="T:wclBluetooth.wclGattCharacteristicExtendedProperties">
            <summary> The structure contains of the different characteristic
              extended property members. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattCharacteristicExtendedProperties.IsReliableWriteEnabled">
            <summary> The parent characteristic value is reliable write
              enabled. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattCharacteristicExtendedProperties.IsAuxiliariesWritable">
            <summary> The characteristic user description descriptor
              is writable. </summary>
        </member>
        <member name="T:wclBluetooth.wclGattClientCharacteristicConfiguration">
            <summary> The structure describes the different client characteristic
              configuration members. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattClientCharacteristicConfiguration.IsSubscribeToNotification">
            <summary> Whether the characteristic has been registered with the device
              to receive Handle Value Notifications. <c>True</c> if the
              characteristic has been registered. Otherwise,
              <c>False</c>. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattClientCharacteristicConfiguration.IsSubscribeToIndication">
            <summary> Whether the characteristic has been registered with the device
              to receive Handle Value Indications. <c>true</c> if the characteristic
              has been registered. Otherwise, <c>False</c>. </summary>
        </member>
        <member name="T:wclBluetooth.wclGattServerCharacteristicConfiguration">
            <summary> The structure describes the different server characteristic
              configuration members. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattServerCharacteristicConfiguration.IsBroadcast">
            <summary> The parent characteristic value can be broadcast. </summary>
        </member>
        <member name="T:wclBluetooth.wclGattCharacteristicFormat">
            <summary> The structure describes the different characteristic format
              members. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattCharacteristicFormat.Format">
            <summary> The format of the parent characteristic value. </summary>
            <seealso cref="T:wclBluetooth.wclGattPresentationFormat" />
        </member>
        <member name="F:wclBluetooth.wclGattCharacteristicFormat.Exponent">
            <summary> The exponent value to use to determine how the value of the
              characteristic value is further formatted. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattCharacteristicFormat.AUnit">
            <summary> The unit of the characteristic value as defined in the
              Assigned Numbers specification. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattCharacteristicFormat.NameSpace">
            <summary> The name-space where the unit is defined in the Assigned
              Numbers specification. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattCharacteristicFormat.Description">
            <summary> The Universally Unique ID (UUID) that describes the format of
              the parent characteristic value. </summary>
        </member>
        <member name="T:wclBluetooth.wclGattCharactertisticUserDescription">
            <summary> The structure contains a GATT characteristic user description
              descriptor data. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattCharactertisticUserDescription.Description">
            <summary> The characteristic's user description. </summary>
        </member>
        <member name="T:wclBluetooth.wclGattCharacteristicAggregateFormat">
            <summary> The structure contains a GATT characteristic aggregate format
              data. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattCharacteristicAggregateFormat.Handles">
            <summary> The GATT characteristic presentation format descriptor
              handles array. </summary>
        </member>
        <member name="T:wclBluetooth.wclGattDescriptorValue">
            <summary> The structure contains a descriptor value. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattDescriptorValue.AType">
            <summary> The type of the descriptor value. </summary>
            <seealso cref="T:wclBluetooth.wclGattDescriptorType" />
        </member>
        <member name="F:wclBluetooth.wclGattDescriptorValue.Uuid">
            <summary> The Universally Unique ID (UUID) of the descriptor
              value. </summary>
            <seealso cref="T:wclBluetooth.wclGattUuid"/>
        </member>
        <member name="F:wclBluetooth.wclGattDescriptorValue.CharacteristicExtendedProperties">
            <summary> Container structure for the different characteristic
              extended property members. This member is valid only if <c>AType</c>
              is <c>dtCharacteristicExtendedProperties</c></summary>
            <seealso cref="T:wclBluetooth.wclGattCharacteristicExtendedProperties" />
        </member>
        <member name="F:wclBluetooth.wclGattDescriptorValue.ClientCharacteristicConfiguration">
            <summary> Container structure for the different client characteristic
              configuration members. This member is valid only if <c>AType</c> is
              <c>dtClientCharacteristicConfiguration</c>. </summary>
            <seealso cref="T:wclBluetooth.wclGattClientCharacteristicConfiguration" />
        </member>
        <member name="F:wclBluetooth.wclGattDescriptorValue.ServerCharacteristicConfiguration">
            <summary> Container structure for the different server characteristic
              configuration members. This member is valid only if <c>AType</c> is
              <c>dtServerCharacteristicConfiguration</c>. </summary>
            <seealso cref="T:wclBluetooth.wclGattServerCharacteristicConfiguration" />
        </member>
        <member name="F:wclBluetooth.wclGattDescriptorValue.CharacteristicFormat">
            <summary> Container structure for the different characteristic format
              members. This member is valid only if <c>AType</c> is
              <c>dtCharacteristicFormat</c>. </summary>
            <seealso cref="T:wclBluetooth.wclGattCharacteristicFormat" />
        </member>
        <member name="F:wclBluetooth.wclGattDescriptorValue.CharacteristicAggregateFormat">
            <summary> Contains data structure of a characteristic's aggregate
              format descriptor. This member is valid only if <c>AType</c> is
              <c>dtCharacteristicAggregateFormat</c> </summary>
            <seealso cref="T:wclBluetooth.wclGattCharacteristicAggregateFormat" />
        </member>
        <member name="F:wclBluetooth.wclGattDescriptorValue.UserDescription">
            <summary> Container structure for the characteristic's user description
              descriptor data. This member is valid only if <c>AType</c> is
              <c>dtCharacteristicUserDescription</c>. </summary>
            <seealso cref="T:wclBluetooth.wclGattCharactertisticUserDescription" />
        </member>
        <member name="F:wclBluetooth.wclGattDescriptorValue.Data">
            <summary> The descriptor value data. If there is no data the member is
              <c>null</c>. </summary>
        </member>
        <member name="T:wclBluetooth.wclGattLocalDescriptor">
            <summary> The structure describes the local GATT descriptor. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattLocalDescriptor.Uuid">
            <summary> The descriptor's UUID. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattLocalDescriptor.ReadProtectionLevel">
            <summary> The read protection level of the descriptor. </summary>
            <seealso cref="T:wclBluetooth.wclGattProtectionLevel" />
        </member>
        <member name="F:wclBluetooth.wclGattLocalDescriptor.WriteProtectionLevel">
            <summary> The write protection level of the descriptor. </summary>
            <seealso cref="T:wclBluetooth.wclGattProtectionLevel" />
        </member>
        <member name="F:wclBluetooth.wclGattLocalDescriptor.Data">
            <summary> The descriptor's data. </summary>
        </member>
        <member name="T:wclBluetooth.wclGattLocalCharacteristicParameters">
            <summary> The structure represents a GATT local characteristic
              parameters. </summary>
        </member>
        <member name="F:wclBluetooth.wclGattLocalCharacteristicParameters.Descriptors">
            <summary> Custom descriptors. </summary>
            <remarks> This array must not include Presentation Format, Aggregate
              Format, Client Configuration, Server Configuration and User
              Description descriptors. </remarks>
            <seealso cref="T:wclBluetooth.wclGattLocalDescriptor" />
        </member>
        <member name="F:wclBluetooth.wclGattLocalCharacteristicParameters.PresentationFormats">
            <summary> The characteristic's presentation formats. </summary>
            <remarks> If this field is set the Characteristic Presentation Format
              descriptor (one ore more) will be added. </remarks>
            <seealso cref="T:wclBluetooth.wclGattCharacteristicFormat" />
        </member>
        <member name="F:wclBluetooth.wclGattLocalCharacteristicParameters.Props">
            <summary> The characteristic's properties. </summary>
            <seealso cref="T:wclBluetooth.wclGattLocalCharacteristicProperty" />
        </member>
        <member name="F:wclBluetooth.wclGattLocalCharacteristicParameters.ReadProtectionLevel">
            <summary> The read protection level of a local
              characteristic. </summary>
            <seealso cref="T:wclBluetooth.wclGattProtectionLevel" />
        </member>
        <member name="F:wclBluetooth.wclGattLocalCharacteristicParameters.UserDescription">
            <summary> The characteristic's user-friendly description. </summary>
            <remarks> If this property is set the Characteristic User Description
              descriptor will be added. </remarks>
        </member>
        <member name="F:wclBluetooth.wclGattLocalCharacteristicParameters.WriteProtectionLevel">
            <summary> The write protection level of a local
              characteristic. </summary>
            <seealso cref="T:wclBluetooth.wclGattProtectionLevel" />
        </member>
        <member name="T:wclBluetooth.wclBluetoothLeAdvertisementFrame">
            <summary> The structure represents a single Bluetooth LE advertisement
              data section. </summary>
            <remarks> This structure is used internally by the Bluetooth LE
              advertiser. </remarks>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeAdvertisementFrame.CompanyId">
            <summary> The manufacturer ID as defined in the Bluetooth SIG
              Assigned Numbers. </summary>
            <remarks> This member is valid only when the advertisement data type is
              <c>LE_GAP_AD_TYPE_MANUFACTURER</c>. </remarks>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeAdvertisementFrame.DataType">
            <summary> The advertisement data type. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeAdvertisementFrame.Data">
            <summary> The advertisement data. </summary>
        </member>
        <member name="T:wclBluetooth.wclBluetoothLeConnectionParameters">
            <summary> The structure describes the current Bluetooth LE GATT connection
              parameters. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeConnectionParameters.Interval">
            <summary> The connection interval. </summary>
            <remarks> The connection interval is defined as 1.25ms increments,
              ranging from 6 to 3200. Time(ms) = Interval * 1.25ms. </remarks>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeConnectionParameters.Latency">
            <summary> The connection latency. </summary>
            <remarks> The connection latency is defined in connection events,
              ranging from 0 to 499. </remarks>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeConnectionParameters.LinkTimeout">
            <summary> The connection link supervision timeout. </summary>
            <remarks> The connection link supervision timeout is defined in 10ms
              increments, ranging from 10 to 3200.
              Time(ms) = LinkTimeout * 10ms. </remarks>
        </member>
        <member name="T:wclBluetooth.wclBluetoothLeConnectionParametersValue">
            <summary> The structure represents the Bluetooth LE GATT preferred connection
              parameters. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeConnectionParametersValue.MinInterval">
            <summary> The minimum connection interval. </summary>
            <remarks> The connection interval is defined as 1.25ms increments,
              ranging from 6 to 3200. Time(ms) = Interval * 1.25ms. </remarks>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeConnectionParametersValue.MaxInterval">
            <summary> The maximum connection interval. </summary>
            <remarks> The connection interval is defined as 1.25ms increments,
              ranging from 6 to 3200. Time(ms) = Interval * 1.25ms. </remarks>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeConnectionParametersValue.Latency">
            <summary> The connection latency. </summary>
            <remarks> The connection latency is defined in connection events,
              ranging from 0 to 499. </remarks>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeConnectionParametersValue.LinkTimeout">
            <summary> The connection link supervision timeout. </summary>
            <remarks> The connection link supervision timeout is defined in 10ms
              increments, ranging from 10 to 3200.
              Time(ms) = LinkTimeout * 10ms. </remarks>
        </member>
        <member name="T:wclBluetooth.wclBluetoothLeConnectionPhyInfo">
            <summary> Represents a LE connection PHY information. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeConnectionPhyInfo.IsCoded">
            <summary> Indicates whether or not the Bluetooth LE physical layer (PHY)
              is LE Coded. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeConnectionPhyInfo.IsUncoded1MPhy">
            <summary> Indicates whether or not the Bluetooth LE physical layer (PHY)
              is (uncoded) LE 1M. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeConnectionPhyInfo.IsUncoded2MPhy">
            <summary> Indicates whether or not the Bluetooth LE physical layer (PHY)
              is (uncoded) LE 2M. </summary>
        </member>
        <member name="T:wclBluetooth.wclBluetoothLeConnectionPhy">
            <summary> Represents the Bluetooth LE physical layer (PHY)
              information. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeConnectionPhy.Receive">
            <summary> The info about the Bluetooth LE physical layer (PHY) for
              receive. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLeConnectionPhyInfo" />
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeConnectionPhy.Transmit">
            <summary> The info about the Bluetooth LE physical layer (PHY) for
              transmit. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLeConnectionPhyInfo" />
        </member>
        <member name="T:wclBluetooth.wclWiiRemoteAccelCalibration">
            <summary> The structure represents a Wii Remote accelerometer calibration
              data. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteAccelCalibration.MinX">
            <summary> A minimum X value. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteAccelCalibration.MinY">
            <summary> A minimum Y value. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteAccelCalibration.MinZ">
            <summary> A minimum Z value. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteAccelCalibration.MaxX">
            <summary> A maximum X value. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteAccelCalibration.MaxY">
            <summary> A maximum Y value. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteAccelCalibration.MaxZ">
            <summary> A maximum Z value. </summary>
        </member>
        <member name="T:wclBluetooth.wclWiiRemoteLeds">
            <summary> The structure contains the Wii Remote LEDs states. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteLeds.Led1">
            <summary> <c>True</c> if the first LED is turned ON. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteLeds.Led2">
            <summary> <c>True</c> if the second LED is turned ON. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteLeds.Led3">
            <summary> <c>True</c> if the third LED is turned ON. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteLeds.Led4">
            <summary> <c>True</c> if the fourth LED is turned ON. </summary>
        </member>
        <member name="T:wclBluetooth.wclWiiRemoteButtons">
            <summary> The structure contains information about the Wii Remote
              buttons. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteButtons.A">
            <summary> <c>True</c> if the "A" button is pressed. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteButtons.B">
            <summary> <c>True</c> if the "B" button is pressed. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteButtons.Plus">
            <summary> <c>True</c> if the "+" button is pressed. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteButtons.Home">
            <summary> <c>True</c> if the "Home" button is pressed. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteButtons.Minus">
            <summary> <c>True</c> if the "-" button is pressed. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteButtons.One">
            <summary> The "1" button state. <c>True</c> if the button is
              pressed. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteButtons.Two">
            <summary> The "2" button state. <c>True</c> if the button is
              pressed. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteButtons.Up">
            <summary> The "Up" button state. <c>True</c> if the button is
              pressed. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteButtons.Down">
            <summary> The "Down" button state. <c>True</c> if the button is
              pressed. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteButtons.Left">
            <summary> The "Left" button state. <c>True</c> if the button is
              pressed. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteButtons.Right">
            <summary> The "Right" button state. <c>True</c> if the button is
              pressed. </summary>
        </member>
        <member name="T:wclBluetooth.wclWiiRemote3D">
            <summary> The structure represents a 3D coordinate. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemote3D.X">
            <summary> An X coordinate. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemote3D.Y">
            <summary> An Y coordinate. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemote3D.Z">
            <summary> A Z coordinate. </summary>
        </member>
        <member name="T:wclBluetooth.wclWiiRemoteAccel">
            <summary> The structure describes a Wii Remote accelerometer
              data. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteAccel.Calibration">
            <summary> Calibration data. </summary>
            <seealso cref="T:wclBluetooth.wclWiiRemoteAccelCalibration" />
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteAccel.Values">
            <summary> Values. </summary>
            <seealso cref="T:wclBluetooth.wclWiiRemote3D" />
        </member>
        <member name="T:wclBluetooth.wclWiiRemote2D">
            <summary> The structure represents a 2D coordinate </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemote2D.X">
            <summary> An X coordinate. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemote2D.Y">
            <summary> An Y coordinate. </summary>
        </member>
        <member name="T:wclBluetooth.wclWiiRemoteIrSensor">
            <summary> The structure contains a single IR sensor values. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteIrSensor.Position">
            <summary> The IR sensor coordinates. </summary>
            <seealso cref="T:wclBluetooth.wclWiiRemote2D" />
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteIrSensor.Size">
            <summary> Indicates the size of the detected object. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteIrSensor.Found">
            <summary> <c>True</c> is the object detected. </summary>
        </member>
        <member name="T:wclBluetooth.wclWiiRemoteIrSensors">
            <summary> The structure contains the Wii Remote IR sensors
              values. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteIrSensors.Mode">
            <summary> The IR sensor mode. </summary>
            <seealso cref="T:wclBluetooth.wclWiiRemoteIrMode" />
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteIrSensors.Sensitivity">
            <summary> The IR sensitivity. </summary>
            <seealso cref="T:wclBluetooth.wclWiiRemoteIrSensitivity" />
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteIrSensors.Sensors">
            <summary> The array of the IR sensors. </summary>
            <seealso cref="T:wclBluetooth.wclWiiRemoteIrSensor" />
        </member>
        <member name="T:wclBluetooth.wclWiiRemoteNunchukCalibration">
            <summary> The structure represents a Wii Remote Nunchuk extension
              accelerometer calibration data. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteNunchukCalibration.Accel">
            <summary> The nunchuk accelerometer calibration data. </summary>
            <seealso cref="T:wclBluetooth.wclWiiRemoteAccelCalibration" />
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteNunchukCalibration.MinX">
            <summary>The joystick minimum X value. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteNunchukCalibration.MidX">
            <summary>The joystick center X value. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteNunchukCalibration.MaxX">
            <summary>The joystick maximum X value. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteNunchukCalibration.MinY">
            <summary>The joystick minimum Y value. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteNunchukCalibration.MidY">
            <summary>The joystick center Y value. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteNunchukCalibration.MaxY">
            <summary>The joystick maximum Y value. </summary>
        </member>
        <member name="T:wclBluetooth.wclWiiRemoteNunchuk">
            <summary> The structure describes a Wii Remote Nunchuk
              extension. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteNunchuk.Calibration">
            <summary> The Nunchuk extension calibration values. </summary>
            <seealso cref="T:wclBluetooth.wclWiiRemoteNunchukCalibration" />
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteNunchuk.Accel">
            <summary> The Nunchuk extension accelerometer values. </summary>
            <seealso cref="T:wclBluetooth.wclWiiRemoteAccel" />
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteNunchuk.Joystick">
            <summary> The Nunchuk extension joystick calculated values. </summary>
            <seealso cref="T:wclBluetooth.wclWiiRemote2D" />
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteNunchuk.C">
            <summary> The Nunchuk extension "C" button state. <c>True</c> if
              button is pressed. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteNunchuk.Z">
            <summary> The Nunchuk extension "Z" button state. <c>True</c> if
              button is pressed. </summary>
        </member>
        <member name="T:wclBluetooth.wclWiiRemoteClassicControllerButtons">
            <summary> The structure contains information about the Wii Remote Classic
              Controller extension buttons. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteClassicControllerButtons.A">
            <summary> The "A" button state. <c>True</c> if the button is
              pressed. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteClassicControllerButtons.B">
            <summary> The "B" button state. <c>True</c> if the button is
              pressed. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteClassicControllerButtons.Plus">
            <summary> The "+" button state. <c>True</c> if the button is
              pressed. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteClassicControllerButtons.Home">
            <summary> The "Home" button state. <c>True</c> if the button is
              pressed. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteClassicControllerButtons.Minus">
            <summary> The "-" button state. <c>True</c> if the button is
              pressed. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteClassicControllerButtons.Up">
            <summary> The "Up" button state. <c>True</c> if the button is
              pressed. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteClassicControllerButtons.Down">
            <summary> The "Down" button state. <c>True</c> if the button is
              pressed. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteClassicControllerButtons.Left">
            <summary> The "Left" button state. <c>True</c> if the button is
              pressed. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteClassicControllerButtons.Right">
            <summary> The "Right" button state. <c>True</c> if the button is
              pressed. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteClassicControllerButtons.X">
            <summary> The "X" button state. <c>True</c> if the button is
              pressed. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteClassicControllerButtons.Y">
            <summary> The "Y" button state. <c>True</c> if the button is
              pressed. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteClassicControllerButtons.ZL">
            <summary> The "ZL" button state. <c>True</c> if the button is
              pressed. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteClassicControllerButtons.ZR">
            <summary> The "ZR" button state. <c>True</c> if the button is
              pressed. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteClassicControllerButtons.L">
            <summary> The "L" (Left Trigger) button state. <c>True</c> if the button
              is pressed. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteClassicControllerButtons.R">
            <summary> The "R" (Right Trigger) button state. <c>True</c> if the
              button is pressed. </summary>
        </member>
        <member name="T:wclBluetooth.wclWiiRemoteClassicControllerCalibration">
            <summary> The structure represents a Wii Remote Classic Controller
              accelerometer calibration data. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteClassicControllerCalibration.LeftMinX">
            <summary> The left joystick minimum X value. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteClassicControllerCalibration.LeftMidX">
            <summary> The left joystick center X value. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteClassicControllerCalibration.LeftMaxX">
            <summary> The left joystick maximum X value. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteClassicControllerCalibration.LeftMinY">
            <summary> The left joystick minimum Y value. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteClassicControllerCalibration.LeftMidY">
            <summary> The left joystick center Y value. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteClassicControllerCalibration.LeftMaxY">
            <summary> The left joystick maximum Y value. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteClassicControllerCalibration.RightMinX">
            <summary> The right joystick minimum X value. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteClassicControllerCalibration.RightMidX">
            <summary> The right joystick center X value. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteClassicControllerCalibration.RightMaxX">
            <summary> The right joystick maximum X value. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteClassicControllerCalibration.RightMinY">
            <summary> The right joystick minimum Y value. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteClassicControllerCalibration.RightMidY">
            <summary> The right joystick center Y value. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteClassicControllerCalibration.RightMaxY">
            <summary> The right joystick maximum Y value. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteClassicControllerCalibration.LeftTriggerMin">
            <summary> The left trigger minimum value. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteClassicControllerCalibration.LeftTriggerMax">
            <summary> The left trigger maximum value. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteClassicControllerCalibration.RightTriggerMin">
            <summary> The right trigger minimum value. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteClassicControllerCalibration.RightTriggerMax">
            <summary> The right trigger maximum value. </summary>
        </member>
        <member name="T:wclBluetooth.wclWiiRemoteClassicController">
            <summary> The structure describes a Wii Remote Classic controller
              extension. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteClassicController.Calibration">
            <summary> The Wii Remote Classic controller calibration data. </summary>
            <seealso cref="T:wclBluetooth.wclWiiRemoteClassicControllerCalibration" />
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteClassicController.Buttons">
            <summary> The Wii Remote Classic controller buttons states. </summary>
            <seealso cref="T:wclBluetooth.wclWiiRemoteClassicControllerButtons" />
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteClassicController.LeftJoystick">
            <summary> The Wii Remote Classic controller left joystick
              value. </summary>
            <seealso cref="T:wclBluetooth.wclWiiRemote2D" />
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteClassicController.RightJoystick">
            <summary> The Wii Remote Classic controller right joystick
              value. </summary>
            <seealso cref="T:wclBluetooth.wclWiiRemote2D" />
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteClassicController.LeftTrigger">
            <summary> The Wii Remote Classic controller left trigger
              value. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteClassicController.RightTrigger">
            <summary> The Wii Remote Classic controller right trigger
              value. </summary>
        </member>
        <member name="T:wclBluetooth.wclWiiRemoteGuitarButtons">
            <summary> The structure contains information about the Wii Remote Guitar
              extension buttons. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteGuitarButtons.StrumUp">
            <summary> The "Strum Up" button state. <c>True</c> if the button is
              pressed. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteGuitarButtons.StrumDown">
            <summary> The "Strum Down" button state. <c>True</c> if the button is
              pressed. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteGuitarButtons.Minus">
            <summary> The "-" button state. <c>True</c> if the button is
              pressed. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteGuitarButtons.Plus">
            <summary> The "+" button state. <c>True</c> if the button is
              pressed. </summary>
        </member>
        <member name="T:wclBluetooth.wclWiiRemoteGuitarFretButtons">
            <summary> The structure contains the Wii Remote Guitar extension fret
              buttons states. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteGuitarFretButtons.Green">
            <summary> The "Green" button state. <c>True</c> if the button is
              pressed. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteGuitarFretButtons.Red">
            <summary> The "Red" button state. <c>True</c> if the button is
              pressed. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteGuitarFretButtons.Yellow">
            <summary> The "Yellow" button state. <c>True</c> if the button is
              pressed. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteGuitarFretButtons.Blue">
            <summary> The "Blue" button state. <c>True</c> if the button is
              pressed. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteGuitarFretButtons.Orange">
            <summary> The "Orange" button state. <c>True</c> if the button is
              pressed. </summary>
        </member>
        <member name="T:wclBluetooth.wclWiiRemoteGuitar">
            <summary> The structure describes a Wii Remote Guitar extension
              data. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteGuitar.GuitarType">
            <summary> The Wii Remote Guitar extension type. </summary>
            <seealso cref="T:wclBluetooth.wclWiiRemoteGuitarType" />
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteGuitar.Buttons">
            <summary> The Wii Remote Guitar extension buttons data. </summary>
            <seealso cref="T:wclBluetooth.wclWiiRemoteGuitarButtons" />
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteGuitar.FretButtons">
            <summary> The Wii Remote Guitar extension fret buttons data. </summary>
            <seealso cref="T:wclBluetooth.wclWiiRemoteGuitarFretButtons" />
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteGuitar.Touchbar">
            <summary> The Wii Remote Guitar extension touchbar data. </summary>
            <seealso cref="T:wclBluetooth.wclWiiRemoteGuitarFretButtons" />
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteGuitar.Joystick">
            <summary> The Wii Remote Guitar extension joystick data. </summary>
            <seealso cref="T:wclBluetooth.wclWiiRemote2D" />
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteGuitar.WhammyBar">
            <summary> The Wii Remote Guitar extension whammy bar data. </summary>
        </member>
        <member name="T:wclBluetooth.wclWiiRemoteDrums">
            <summary> The structure describes the Wii Remote Drums
              extension </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteDrums.Red">
            <summary> <c>True</c> if the "Red" drum is touched. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteDrums.Green">
            <summary> <c>True</c> if the "Green" drum is touched. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteDrums.Blue">
            <summary> <c>True</c> if the "Blue" drum is touched. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteDrums.Orange">
            <summary> <c>True</c> if the "Orange" drum is touched. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteDrums.Yellow">
            <summary> <c>True</c> if the "Yellow" drum is touched. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteDrums.Pedal">
            <summary> <c>True</c> if the Pedal is pressed. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteDrums.RedVelocity">
            <summary> The "Red" drum velocity. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteDrums.GreenVelocity">
            <summary> The "Green" drum velocity. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteDrums.BlueVelocity">
            <summary> The "Blue" drum velocity. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteDrums.OrangeVelocity">
            <summary> The "Orange" drum velocity. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteDrums.YellowVelocity">
            <summary> The "Yellow" drum velocity. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteDrums.PedalVelocity">
            <summary> The Pedal velocity. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteDrums.Plus">
            <summary> <c>True</c> if the "+" button is pressed. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteDrums.Minus">
            <summary> <c>True</c> if the "-" button is pressed. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteDrums.Joystick">
            <summary> The drum joystick data. </summary>
            <seealso cref="T:wclBluetooth.wclWiiRemote2D" />
        </member>
        <member name="T:wclBluetooth.wclWiiRemoteBalanceBoardSensors">
            <summary> The structure describes the Wii Remote Balance Board extension
              sensors data. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteBalanceBoardSensors.TopRight">
            <summary> Top right sensor value. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteBalanceBoardSensors.TopLeft">
            <summary> Top left sensor value. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteBalanceBoardSensors.BottomRight">
            <summary> Bottom right sensor value. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteBalanceBoardSensors.BottomLeft">
            <summary> Bottom left sensor value. </summary>
        </member>
        <member name="T:wclBluetooth.wclWiiRemoteBalanceBoardSensorsWeight">
            <summary> The structure describes the Wii Remote Balance Board extension
              sensors weight. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteBalanceBoardSensorsWeight.TopRight">
            <summary> Top right sensor value. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteBalanceBoardSensorsWeight.TopLeft">
            <summary> Top left sensor value. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteBalanceBoardSensorsWeight.BottomRight">
            <summary> Bottom right sensor value. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteBalanceBoardSensorsWeight.BottomLeft">
            <summary> Bottom left sensor value. </summary>
        </member>
        <member name="T:wclBluetooth.wclWiiRemoteBalanceBoardCalibration">
            <summary> The structure describes the Wii Remote Balance Board extension
              sensors calibration data. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteBalanceBoardCalibration.Kg0">
            <summary> The 0-17 KG calibration data. </summary>
            <seealso cref="T:wclBluetooth.wclWiiRemoteBalanceBoardSensors" />
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteBalanceBoardCalibration.Kg17">
            <summary> The 17-34 KG calibration data. </summary>
            <seealso cref="T:wclBluetooth.wclWiiRemoteBalanceBoardSensors" />
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteBalanceBoardCalibration.Kg34">
            <summary> The 34 and above KG calibration data. </summary>
            <seealso cref="T:wclBluetooth.wclWiiRemoteBalanceBoardSensors" />
        </member>
        <member name="T:wclBluetooth.wclWiiRemoteBalanceBoardGC">
            <summary> The structure represents the Balance Board extension center of
              gravity. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteBalanceBoardGC.X">
            <summary> An X coordinate. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteBalanceBoardGC.Y">
            <summary> An Y coordinate. </summary>
        </member>
        <member name="T:wclBluetooth.wclWiiRemoteBalanceBoard">
            <summary> The structure describes the Wii Remote Balance Board
              extension. </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteBalanceBoard.Calibration">
            <summary> The Wii Remote Balance Board extension calibration
              data. </summary>
            <seealso cref="T:wclBluetooth.wclWiiRemoteBalanceBoardCalibration" />
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteBalanceBoard.Sensors">
            <summary> The Wii Remote Balance Board extension sensors
              values. </summary>
            <seealso cref="T:wclBluetooth.wclWiiRemoteBalanceBoardSensors" />
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteBalanceBoard.SensorsKg">
            <summary> The Wii Remote Balance Board extension sensors values
              (KG). </summary>
            <seealso cref="T:wclBluetooth.wclWiiRemoteBalanceBoardSensorsWeight" />
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteBalanceBoard.SensorsLb">
            <summary> The Wii Remote Balance Board extension sensors values
              (Lb). </summary>
            <seealso cref="T:wclBluetooth.wclWiiRemoteBalanceBoardSensorsWeight" />
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteBalanceBoard.WeightKg">
            <summary> The Wii Remote Balance Board extension detected weight
              (KG). </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteBalanceBoard.WeightLb">
            <summary> The Wii Remote Balance Board extension detected weight
              (Lb). </summary>
        </member>
        <member name="F:wclBluetooth.wclWiiRemoteBalanceBoard.CenterOfGravity">
            <summary> The center of gravity coordinate. </summary>
            <seealso cref="T:wclBluetooth.wclWiiRemoteBalanceBoardGC" />
        </member>
        <member name="T:wclBluetooth.wclBluetoothLePacketHeader">
            <summary> The Bluetooth LE packet header. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLePacketHeader.AccessAddress">
            <summary> The access address. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLePacketHeader.Channel">
            <summary> The channel number. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLePacketHeader.Crc">
            <summary> The CRC value. The CRC is 3 bytes long so hight byte is
              always 0x00. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLePacketHeader.Rssi">
            <summary> The RSSI value in dBm. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLePacketHeader.Timestamp">
            <summary> The time stamp value. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLePacketHeader.Valid">
            <summary> The packed valid status (<c>True</c> if the packet
              is valid. <c>False</c> otherwise. </summary>
        </member>
        <member name="T:wclBluetooth.wclBluetoothLeAdvertisingPduHeader">
            <summary> The record describes the Bluetooth LE advertising packet PDU
              header. </summary>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeAdvertisingPduHeader.Header">
            <summary> The Bluetooth LE captured packet header. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLePacketHeader" />
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeAdvertisingPduHeader.PduType">
            <summary> The Bluetooth LE advertising PDU type. </summary>
            <seealso cref="T:wclBluetooth.wclBluetoothLeAdvertisingPduType" />
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeAdvertisingPduHeader.ChSel">
            <summary> The <c>ChSel</c> header's bit state. </summary>
            <remarks> The meaning of this field (bit) depends on the PDU type.
              If the value of this field is <c>True</c> the <c>ChSel</c> bit is
              <c>1</c>. If the value of this field is <c>Flase</c> the <c>ChSel</c>
              bit is <c>0</c>. </remarks>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeAdvertisingPduHeader.TxAdd">
            <summary> The <c>TxAdd</c> header's bit state. </summary>
            <remarks> The meaning of this field (bit) depends on the PDU type.
              If the value of this field is <c>True</c> the <c>TxAdd</c> bit is
              <c>1</c>. If the value of this field is <c>Flase</c> the <c>TxAdd</c>
              bit is <c>0</c>. </remarks>
        </member>
        <member name="F:wclBluetooth.wclBluetoothLeAdvertisingPduHeader.RxAdd">
            <summary> The <c>RxAdd</c> header's bit state. </summary>
            <remarks> The meaning of this field (bit) depends on the PDU type.
              If the value of this field is <c>True</c> the <c>RxAdd</c> bit is
              <c>1</c>. If the value of this field is <c>Flase</c> the <c>RxAdd</c>
              bit is <c>0</c>. </remarks>
        </member>
        <member name="T:wclBluetooth.wclBleSnifferLlData">
            <summary> The record contains the Link Layer data captured by the
              Bluetooth LE sniffer and used in the <c>CONNECT_IND</c>
             advertisement packet. </summary>
        </member>
        <member name="F:wclBluetooth.wclBleSnifferLlData.Aa">
            <summary> The field contains the ACL connection’s Access Address
              determined by the Link Layer. </summary>
        </member>
        <member name="F:wclBluetooth.wclBleSnifferLlData.CrcInit">
            <summary> The field contains the initialization value for the CRC
              calculation for the ACL connection. It shall be a random value,
              generated by the Link Layer. The seed for the random number
              generator is from a physical source of entropy and has at least 20
              bits of entropy. </summary>
        </member>
        <member name="F:wclBluetooth.wclBleSnifferLlData.WinSize">
            <summary> The field indicates the transmit window size value in the
              following manner: <c>WindowSize = WinSize * 1.25ms</c>. </summary>
        </member>
        <member name="F:wclBluetooth.wclBleSnifferLlData.WinOffset">
            <summary> The field indicates the transmit window offset value in the
              following manner: <c>WindowOffset = WinOffset * 1.25ms</c>. </summary>
        </member>
        <member name="F:wclBluetooth.wclBleSnifferLlData.Interval">
            <summary> The field indicates the connection interval in the following
              manner: <c>ConnectionInterval = Interval * 1.25ms</c>. </summary>
        </member>
        <member name="F:wclBluetooth.wclBleSnifferLlData.Latency">
            <summary> The field indicates the peripheral latency value. </summary>
        </member>
        <member name="F:wclBluetooth.wclBleSnifferLlData.Timeout">
            <summary> The field indicates the connection supervision timeout value
              in the following manner:
              <c>SupervisionTimeout = Timeout * 10ms</c>. </summary>
        </member>
        <member name="F:wclBluetooth.wclBleSnifferLlData.ChM">
            <summary> The field contains the channel map indicating Used and Unused
              data channels. Every channel is represented with a bit positioned as
              per the data channel index. The <c>LSB</c> represents data channel
              index 0 and the bit in position 36 represents data channel index 36.
              A bit value of 0 indicates that the channel is Unused. A bit value of
              1 indicates that the channel is Used. The bits in positions 37, 38 and
              39 are reserved for future use. </summary>
            <remarks> The <c>ChM</c> value is 5 bytes long. The high 3 bytes are not
              used. </remarks>
        </member>
        <member name="F:wclBluetooth.wclBleSnifferLlData.Hop">
            <summary> The field indicates the hop increment used in the data
              channel selection algorithm. It has a random value in the range 5 to
              16. </summary>
        </member>
        <member name="F:wclBluetooth.wclBleSnifferLlData.Sca">
            <summary> <p>The field indicates the central SCA used to determine the
              Central's worst case sleep clock accuracy. The value of the SCA
              are:</p>
              <p>0 - 251ppm to 500ppm</p>
              <p>1 - 151ppm to 250ppm</p>
              <p>2 - 101ppm to 150ppm</p>
              <p>3 - 76ppm to 100ppm</p>
              <p>4 - 51ppm to 75ppm</p>
              <p>5 - 31ppm to 50ppm</p>
              <p>6 - 21ppm to 30ppm</p>
              <p>7 - 0ppm to 20ppm</p> </summary>
        </member>
        <member name="T:wclBluetooth.wclBluetoothOobData">
            <summary> The structure contains data used to authenticate prior to
               establishing an Out-of-Band device pairing. </summary>
        </member>
        <member name="M:wclBluetooth.wclBluetoothOobData.#ctor">
            <summary> Creates new object. </summary>
        </member>
        <member name="P:wclBluetooth.wclBluetoothOobData.C">
            <summary> Gets and sets a 128-bit cryptographic key used for two-way
              authentication. </summary>
            <value> A 128-bit cryptographic key used for two-way authentication. </value>
        </member>
        <member name="P:wclBluetooth.wclBluetoothOobData.R">
            <summary> Gets and sets a randomly generated number used for one-way
              authentication. </summary>
            <value> A randomly generated number used for one-way authentication.
              If this number is not provided by the device initiating the OOB
              session, this value is 0. </value>
        </member>
        <member name="T:wclBluetooth.wclAudioDevice">
            <summary> Contains information about audio device. </summary>
        </member>
        <member name="F:wclBluetooth.wclAudioDevice.Id">
            <summary> Device's ID. </summary>
        </member>
        <member name="F:wclBluetooth.wclAudioDevice.FriendlyName">
            <summary> Device friendly name. </summary>
        </member>
        <member name="F:wclBluetooth.wclAudioDevice.Description">
            <summary> Device description. </summary>
        </member>
        <member name="F:wclBluetooth.wclAudioDevice.Flow">
            <summary> The data flow. </summary>
            <seealso cref="T:wclBluetooth.wclAudioDeviceDataFlow" />
        </member>
        <member name="F:wclBluetooth.wclAudioDevice.Roles">
            <summary> The device default roles. </summary>
            <seealso cref="T:wclBluetooth.wclAudioDeviceRole" />
        </member>
        <member name="F:wclBluetooth.wclAudioDevice.State">
            <summary> The device state. </summary>
            <seealso cref="T:wclBluetooth.wclAudioDeviceState" />
        </member>
        <member name="F:wclBluetooth.wclAudioDevice.IsBluetooth">
            <summary> <c>True</c> if the audio device is connected by
              Bluetooth. </summary>
        </member>
        <member name="F:wclBluetooth.wclAudioDevice.Mac">
            <summary> The device's MAC address if device is Bluetooth. Valid only if
              <c>IsBluetooth</c> is <c>True</c>.</summary>
        </member>
        <member name="F:wclBluetooth.wclAudioDevice.Service">
            <summary> Bluetooth service UUID. Valid only if <c>IsBluetooth</c> is
              <c>True</c>. </summary>
        </member>
        <member name="T:wclBluetooth.wclWiiRemoteClient">
            <summary> The class provides methods to communicate with Wii Remote
              controller. </summary>
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClient.DoAccelChanged(wclBluetooth.wclWiiRemoteAccel)">
            <summary> Fire the <c>OnAccelChanged</c> event. </summary>
            <param name="Accel"> The current accelerometer data. </param>
            <seealso cref="T:wclBluetooth.wclWiiRemoteAccel" />
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClient.DoBalanceBoardChanged(wclBluetooth.wclWiiRemoteBalanceBoard)">
            <summary> Fires the <c>OnBalanceBoardChanged</c> event </summary>
            <param name="Board"> The new Balance Board extension
              state. </param>
            <seealso cref="T:wclBluetooth.wclWiiRemoteBalanceBoard" />
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClient.DoButtonsChanged(wclBluetooth.wclWiiRemoteButtons)">
            <summary> Fires the <c>OnButtonsChanged</c> event. </summary>
            <param name="Buttons"> The new buttons state. </param>
            <seealso cref="T:wclBluetooth.wclWiiRemoteButtons" />
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClient.DoClassicControllerChanged(wclBluetooth.wclWiiRemoteClassicController)">
            <summary> Fires the <c>OnClassicControllerChanged</c> event. </summary>
            <param name="Controller"> The current state of the Wii Remote Classic
              Controller extension. </param>
            <seealso cref="T:wclBluetooth.wclWiiRemoteClassicController" />
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClient.DoConnect(System.Int32)">
            <summary> Fires the <c>OnConnect</c> event. </summary>
            <param name="Error"> The connection operation result code. If the
              parameter is <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" /> the connection to a remote
              device was established and the remote device is connected. Otherwise
              the connection was not established and the remote device is
              not connected. </param>
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClient.DoDisconnect(System.Int32)">
            <summary> Fires the <c>OnDisconnect</c> event. </summary>
            <param name="Reason"> The disconnection code. If the
              parameter is <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" /> the connection was closed
              by the <c>Disconnect</c> call. Otherwise indicates the disconnection
              reason. </param>
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClient.DoDrumsChanged(wclBluetooth.wclWiiRemoteDrums)">
            <summary> Fires the <c>OnDrumsChanged</c> event. </summary>
            <param name="Drums"> The current state of the Drums extension. </param>
            <seealso cref="T:wclBluetooth.wclWiiRemoteDrums" />
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClient.DoExtensionAttached">
            <summary> Fires the <c>OnExtensionAttached</c> event. </summary>
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClient.DoExtensionDetached">
            <summary> Fires the <c>OnExtensionDetached</c> event. </summary>
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClient.DoGuitarChanged(wclBluetooth.wclWiiRemoteGuitar)">
            <summary> Fires the <c>OnGuitarChanged</c> event. </summary>
            <param name="Guitar"> The current Guitar extension state. </param>
            <seealso cref="T:wclBluetooth.wclWiiRemoteGuitar" />
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClient.DoIrChanged(wclBluetooth.wclWiiRemoteIrSensors)">
            <summary> Fires the <c>OnIrChanged</c> event. </summary>
            <param name="Ir"> The IR sensor data. </param>
            <seealso cref="T:wclBluetooth.wclWiiRemoteIrSensors" />
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClient.DoNunchukChanged(wclBluetooth.wclWiiRemoteNunchuk)">
            <summary> Fires the <c>OnNunchukChanged</c> event. </summary>
            <param name="Nunchuk"> The current Nunchuk extension state. </param>
            <seealso cref="T:wclBluetooth.wclWiiRemoteNunchuk" />
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClient.DoStatusChanged(System.Double,wclBluetooth.wclWiiRemoteLeds)">
            <summary> Fires the <c>OnStatusChanged</c> event. </summary>
            <param name="Batt"> The WeDo Remote battery level. </param>
            <param name="Leds"> The We Do Remote LEDs state. </param>
            <seealso cref="T:wclBluetooth.wclWiiRemoteLeds" />
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClient.#ctor">
            <summary> Creates new Wii Remote client component. </summary>
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClient.Connect(wclBluetooth.wclBluetoothRadio)">
            <summary> Starts connecting to a Wii Remote device. </summary>
            <param name="Radio"> The <see cref="T:wclBluetooth.wclBluetoothRadio" /> object
              that handles the connection. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClient.Disconnect">
            <summary> Disconnects from the Wii Remote. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClient.GetStatus">
            <summary> Requests the Wii Remote status. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <remarks> This is asynchronous method. When operation completes the
              <c>OnStatusChanged</c> event fires. </remarks>
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClient.SetLeds(wclBluetooth.wclWiiRemoteLeds)">
            <summary> Changes the Wii Remote LEDs state. </summary>
            <param name="Leds"> The new LEDs state. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclBluetooth.wclWiiRemoteLeds" />
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClient.SetLeds(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Changes the Wii Remote LEDs state. </summary>
            <param name="Led1"> The new LED 1 state. </param>
            <param name="Led2"> The new LED 2 state. </param>
            <param name="Led3"> The new LED 3 state. </param>
            <param name="Led4"> The new LED 4 state. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClient.SetRumble(System.Boolean)">
            <summary> Turns the Rumble On and Off. </summary>
            <param name="TurnOn"> Set to <c>True</c> to turn the Rumble On. Set
              to <c>False</c> to turn the Rumble Off. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClient.EnableAccel">
            <summary> Enables accelerometer. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClient.DisableAccel">
            <summary> Disables accelerometer. </summary>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
        </member>
        <member name="M:wclBluetooth.wclWiiRemoteClient.SetIrSensitivity(wclBluetooth.wclWiiRemoteIrSensitivity)">
            <summary> Sets IR IR sensor sensitivity (and turns it ON or
              OFF). </summary>
            <param name="Sensitivity"> The IR sensor sensitivity. </param>
            <returns> If the function succeed the return value is
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" />. Otherwise the method returns one of
              the WCL error codes. </returns>
            <seealso cref="T:wclBluetooth.wclWiiRemoteIrSensitivity" />
        </member>
        <member name="P:wclBluetooth.wclWiiRemoteClient.AccelEnabled">
            <summary> Gets the current accelerometer status. </summary>
            <value> <c>True</c> if the accelerometer is enabled. <c>False</c>
              otherwise. </value>
        </member>
        <member name="P:wclBluetooth.wclWiiRemoteClient.Extension">
            <summary> Gets the current connected extension type. </summary>
            <value> The currently connected extension. </value>
            <seealso cref="T:wclBluetooth.wclWiiRemoteExtension" />
        </member>
        <member name="P:wclBluetooth.wclWiiRemoteClient.IrMode">
            <summary> Gets the current IR sensor mode. </summary>
            <value> The IR sensor mode. </value>
            <seealso cref="T:wclBluetooth.wclWiiRemoteIrMode" />
        </member>
        <member name="P:wclBluetooth.wclWiiRemoteClient.IrSensitivity">
            <summary> Gets the current IR sensor sensitivity. </summary>
            <value> The IR sensor sensitivity. </value>
            <seealso cref="T:wclBluetooth.wclWiiRemoteIrSensitivity" />
        </member>
        <member name="P:wclBluetooth.wclWiiRemoteClient.Leds">
            <summary> Gets the current LEDs state. </summary>
            <value> The LEDs state. </value>
            <seealso cref="T:wclBluetooth.wclWiiRemoteLeds" />
        </member>
        <member name="P:wclBluetooth.wclWiiRemoteClient.Radio">
            <summary> Gets the radio object used for connection. </summary>
            <value> The <see cref="T:wclBluetooth.wclBluetoothRadio" /> object. </value>
            <seealso cref="T:wclBluetooth.wclBluetoothRadio" />
        </member>
        <member name="P:wclBluetooth.wclWiiRemoteClient.Rumble">
            <summary> Gets the current Rumble status. </summary>
            <value> <c>True</c> if the Rumble is turned ON. </value>
        </member>
        <member name="P:wclBluetooth.wclWiiRemoteClient.State">
            <summary> Gets the current client state. </summary>
            <value> The client state. </value>
            <seealso cref="T:wclCommunication.wclClientState" />
        </member>
        <member name="P:wclBluetooth.wclWiiRemoteClient.Address">
            <summary> Gets and sets a target WiiRemote device's MAC
              address. </summary>
            <value> The Bluetooth MAC address. </value>
            <remarks> If an application changes the property when connection
              is active the <see cref="T:wclBluetooth.wclEBluetoothClient" /> exception
              raises. </remarks>
            <exception cref="T:wclBluetooth.wclEBluetoothClient" />
        </member>
        <member name="P:wclBluetooth.wclWiiRemoteClient.Timeout">
            <summary> Gets and sets the connect timeout value. </summary>
            <value> The connect timeout value in milliseconds. </value>
            <remarks> If an application changes the property when client is
              connected the <see cref="T:wclCommunication.wclEClientActive" /> exception
              raises. If new value of the <c>Timeout</c> is <c>0</c> the
              <see cref="T:wclCommon.wclEInvalidArgument" /> exception raises. </remarks>
            <exception cref="T:wclCommunication.wclEClientActive" />
            <exception cref="T:wclCommon.wclEInvalidArgument" />
        </member>
        <member name="E:wclBluetooth.wclWiiRemoteClient.OnAccelChanged">
            <summary> The event fires when the accelerometer state has been
              changed. </summary>
            <seealso cref="T:wclBluetooth.wclWiiRemoteAccelChangedEvent" />
        </member>
        <member name="E:wclBluetooth.wclWiiRemoteClient.OnBalanceBoardChanged">
            <summary> The event fires when the stat eof the Balance Board extension
              has been changed. </summary>
            <seealso cref="T:wclBluetooth.wclWiiRemoteBalanceBoardChangedEvent" />
        </member>
        <member name="E:wclBluetooth.wclWiiRemoteClient.OnButtonsChanged">
            <summary> The event fires when the buttons state of the Wii Remote
              controller has been changed. </summary>
            <seealso cref="T:wclBluetooth.wclWiiRemoteButtonsChangedEvent" />
        </member>
        <member name="E:wclBluetooth.wclWiiRemoteClient.OnClassicControllerChanged">
            <summary> The event fires when a Classic Controller extension state has
              been changed. </summary>
            <seealso cref="T:wclBluetooth.wclWiiRemoteClassicControllerChangedEvent" />
        </member>
        <member name="E:wclBluetooth.wclWiiRemoteClient.OnConnect">
            <summary> The event fires when a connection to a remote device
              has been completed (with or without success). </summary>
            <remarks> If the <c>Error</c> parameter of the event is not
              <see cref="F:wclCommon.wclErrors.WCL_E_SUCCESS" /> an application may call <c>Connect</c>
              method again from inside the event handler. </remarks>
            <seealso cref="T:wclCommunication.wclClientConnectionConnectEvent" />
        </member>
        <member name="E:wclBluetooth.wclWiiRemoteClient.OnDisconnect">
            <summary> The event fires when the remote connected device has been
              disconnected. </summary>
            <seealso cref="T:wclCommunication.wclClientConnectionDisconnectEvent" />
        </member>
        <member name="E:wclBluetooth.wclWiiRemoteClient.OnDrumsChanged">
            <summary> The event fires when the Drums extension state has been
              changed. </summary>
            <seealso cref="T:wclBluetooth.wclWiiRemoteDrumsChangedEvent" />
        </member>
        <member name="E:wclBluetooth.wclWiiRemoteClient.OnExtensionAttached">
            <summary> The event fires when the extension is attached. </summary>
        </member>
        <member name="E:wclBluetooth.wclWiiRemoteClient.OnExtensionDetached">
            <summary> The event fires when the extension has been
              detached. </summary>
        </member>
        <member name="E:wclBluetooth.wclWiiRemoteClient.OnGuitarChanged">
            <summary> The event fires when the Guitar extension state has been
              changed. </summary>
            <seealso cref="T:wclBluetooth.wclWiiRemoteGuitarChangedEvent" />
        </member>
        <member name="E:wclBluetooth.wclWiiRemoteClient.OnIrChanged">
            <summary> The event fires when the IR sensor data has been
              changed. </summary>
            <seealso cref="T:wclBluetooth.wclWiiRemoteIrChangedEvent" />
        </member>
        <member name="E:wclBluetooth.wclWiiRemoteClient.OnNunchukChanged">
            <summary> The event fires when the state of the Nunchuk extension has
              been changed. </summary>
            <seealso cref="T:wclBluetooth.wclWiiRemoteNunchukChangedEvent" />
        </member>
        <member name="E:wclBluetooth.wclWiiRemoteClient.OnStatusChanged">
            <summary> The event fires when the WeDo Remote status
              changed. </summary>
            <seealso cref="T:wclBluetooth.wclWiiRemoteStatusChangedEvent" />
        </member>
        <member name="T:wclBluetooth.wclCODs">
            <summary> This static class contains constants that describes Bluetooth Class Of Devices (CODs). </summary>
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_FORMAT_BIT_OFFSET">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_MINOR_BIT_OFFSET">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_MAJOR_BIT_OFFSET">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_SERVICE_BIT_OFFSET">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_FORMAT_MASK">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_MINOR_MASK">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_MAJOR_MASK">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_SERVICE_MASK">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_VERSION">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_SERVICE_LIMITED">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_SERVICE_POSITIONING">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_SERVICE_NETWORKING">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_SERVICE_RENDERING">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_SERVICE_CAPTURING">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_SERVICE_OBJECT_XFER">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_SERVICE_AUDIO">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_SERVICE_TELEPHONY">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_SERVICE_INFORMATION">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_SERVICE_VALID_MASK">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_SERVICE_MAX_COUNT">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_MAJOR_MISCELLANEOUS">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_MAJOR_COMPUTER">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_MAJOR_PHONE">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_MAJOR_LAN_ACCESS">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_MAJOR_AUDIO">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_MAJOR_PERIPHERAL">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_MAJOR_IMAGING">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_MAJOR_WEARABLE">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_MAJOR_TOY">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_MAJOR_HEALTH">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_MAJOR_UNCLASSIFIED">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_COMPUTER_MINOR_UNCLASSIFIED">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_COMPUTER_MINOR_DESKTOP">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_COMPUTER_MINOR_SERVER">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_COMPUTER_MINOR_LAPTOP">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_COMPUTER_MINOR_HANDHELD">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_COMPUTER_MINOR_PALM">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_COMPUTER_MINOR_WEARABLE">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_PHONE_MINOR_UNCLASSIFIED">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_PHONE_MINOR_CELLULAR">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_PHONE_MINOR_CORDLESS">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_PHONE_MINOR_SMART">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_PHONE_MINOR_WIRED_MODEM">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_AUDIO_MINOR_UNCLASSIFIED">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_AUDIO_MINOR_HEADSET">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_AUDIO_MINOR_HANDS_FREE">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_AUDIO_MINOR_HEADSET_HANDS_FREE">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_AUDIO_MINOR_MICROPHONE">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_AUDIO_MINOR_LOUDSPEAKER">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_AUDIO_MINOR_HEADPHONES">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_AUDIO_MINOR_PORTABLE_AUDIO">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_AUDIO_MINOR_CAR_AUDIO">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_AUDIO_MINOR_SET_TOP_BOX">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_AUDIO_MINOR_HIFI_AUDIO">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_AUDIO_MINOR_VCR">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_AUDIO_MINOR_VIDEO_CAMERA">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_AUDIO_MINOR_CAMCORDER">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_AUDIO_MINOR_VIDEO_MONITOR">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_AUDIO_MINOR_VIDEO_DISPLAY_LOUDSPEAKER">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_AUDIO_MINOR_VIDEO_DISPLAY_CONFERENCING">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_AUDIO_MINOR_GAMING_TOY">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_PERIPHERAL_MINOR_KEYBOARD_MASK">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_PERIPHERAL_MINOR_POINTER_MASK">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_PERIPHERAL_MINOR_NO_CATEGORY">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_PERIPHERAL_MINOR_JOYSTICK">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_PERIPHERAL_MINOR_GAMEPAD">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_PERIPHERAL_MINOR_REMOTE_CONTROL">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_PERIPHERAL_MINOR_SENSING">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_IMAGING_MINOR_DISPLAY_MASK">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_IMAGING_MINOR_CAMERA_MASK">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_IMAGING_MINOR_SCANNER_MASK">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_IMAGING_MINOR_PRINTER_MASK">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_WEARABLE_MINOR_WRIST_WATCH">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_WEARABLE_MINOR_PAGER">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_WEARABLE_MINOR_JACKET">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_WEARABLE_MINOR_HELMET">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_WEARABLE_MINOR_GLASSES">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_TOY_MINOR_ROBOT">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_TOY_MINOR_VEHICLE">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_TOY_MINOR_DOLL_ACTION_FIGURE">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_TOY_MINOR_CONTROLLER">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_TOY_MINOR_GAME">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_HEALTH_MINOR_BLOOD_PRESSURE_MONITOR">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_HEALTH_MINOR_THERMOMETER">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_HEALTH_MINOR_WEIGHING_SCALE">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_HEALTH_MINOR_GLUCOSE_METER">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_HEALTH_MINOR_PULSE_OXIMETER">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_HEALTH_MINOR_HEART_PULSE_MONITOR">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_HEALTH_MINOR_HEALTH_DATA_DISPLAY">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_HEALTH_MINOR_STEP_COUNTER">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_LAN_ACCESS_BIT_OFFSET">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_LAN_MINOR_MASK">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_LAN_ACCESS_MASK">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_LAN_MINOR_UNCLASSIFIED">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_LAN_ACCESS_0_USED">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_LAN_ACCESS_17_USED">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_LAN_ACCESS_33_USED">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_LAN_ACCESS_50_USED">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_LAN_ACCESS_67_USED">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_LAN_ACCESS_83_USED">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_LAN_ACCESS_99_USED">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclCODs.COD_LAN_ACCESS_FULL">
            <exclude />
        </member>
        <member name="T:wclBluetooth.wclUUIDs">
            <summary> This static class contains defines for Bluetooth Service's UUIDs. </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.Bluetooth_Base_UUID">
            <summary> Bluetooth_Base_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.SDP_PROTOCOL_UUID">
            <summary> SDP_PROTOCOL_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.UDP_PROTOCOL_UUID">
            <summary> UDP_PROTOCOL_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.RFCOMM_PROTOCOL_UUID">
            <summary> RFCOMM_PROTOCOL_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.TCP_PROTOCOL_UUID">
            <summary> TCP_PROTOCOL_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.TCSBIN_PROTOCOL_UUID">
            <summary> TCSBIN_PROTOCOL_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.TCSAT_PROTOCOL_UUID">
            <summary> TCSAT_PROTOCOL_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.OBEX_PROTOCOL_UUID">
            <summary> OBEX_PROTOCOL_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.IP_PROTOCOL_UUID">
            <summary> IP_PROTOCOL_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.FTP_PROTOCOL_UUID">
            <summary> FTP_PROTOCOL_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.HTTP_PROTOCOL_UUID">
            <summary> HTTP_PROTOCOL_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.WSP_PROTOCOL_UUID">
            <summary> WSP_PROTOCOL_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.BNEP_PROTOCOL_UUID">
            <summary> BNEP_PROTOCOL_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.UPNP_PROTOCOL_UUID">
            <summary> UPNP_PROTOCOL_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.HID_PROTOCOL_UUID">
            <summary> HID_PROTOCOL_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.HCCC_PROTOCOL_UUID">
            <summary> HCCC_PROTOCOL_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.HCDC_PROTOCOL_UUID">
            <summary> HCDC_PROTOCOL_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.HN_PROTOCOL_UUID">
            <summary> HN_PROTOCOL_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.AVCTP_PROTOCOL_UUID">
            <summary> AVCTP_PROTOCOL_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.AVDTP_PROTOCOL_UUID">
            <summary> AVDTP_PROTOCOL_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.CMPT_PROTOCOL_UUID">
            <summary> CMPT_PROTOCOL_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.UDI_C_PLANE_PROTOCOL_UUID">
            <summary> UDI_C_PLANE_PROTOCOL_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.L2CAP_PROTOCOL_UUID">
            <summary> L2CAP_PROTOCOL_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.SDP_PROTOCOL_UUID16">
            <summary> SDP_PROTOCOL_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.UDP_PROTOCOL_UUID16">
            <summary> UDP_PROTOCOL_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.RFCOMM_PROTOCOL_UUID16">
            <summary> RFCOMM_PROTOCOL_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.TCP_PROTOCOL_UUID16">
            <summary> TCP_PROTOCOL_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.TCSBIN_PROTOCOL_UUID16">
            <summary> TCSBIN_PROTOCOL_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.TCSAT_PROTOCOL_UUID16">
            <summary> TCSAT_PROTOCOL_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.OBEX_PROTOCOL_UUID16">
            <summary> OBEX_PROTOCOL_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.IP_PROTOCOL_UUID16">
            <summary> IP_PROTOCOL_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.FTP_PROTOCOL_UUID16">
            <summary> FTP_PROTOCOL_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.HTTP_PROTOCOL_UUID16">
            <summary> HTTP_PROTOCOL_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.WSP_PROTOCOL_UUID16">
            <summary> WSP_PROTOCOL_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.BNEP_PROTOCOL_UUID16">
            <summary> BNEP_PROTOCOL_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.UPNP_PROTOCOL_UUID16">
            <summary> UPNP_PROTOCOL_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.HID_PROTOCOL_UUID16">
            <summary> HID_PROTOCOL_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.HCCC_PROTOCOL_UUID16">
            <summary> HCCC_PROTOCOL_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.HCDC_PROTOCOL_UUID16">
            <summary> HCDC_PROTOCOL_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.HN_PROTOCOL_UUID16">
            <summary> HN_PROTOCOL_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.AVCTP_PROTOCOL_UUID16">
            <summary> AVCTP_PROTOCOL_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.AVDTP_PROTOCOL_UUID16">
            <summary> AVDTP_PROTOCOL_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.CMPT_PROTOCOL_UUID16">
            <summary> CMPT_PROTOCOL_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.UDI_C_PLANE_PROTOCOL_UUID16">
            <summary> UDI_C_PLANE_PROTOCOL_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.L2CAP_PROTOCOL_UUID16">
            <summary> L2CAP_PROTOCOL_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.ServiceDiscoveryServerServiceClassID_UUID">
            <summary> ServiceDiscoveryServerServiceClassID_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.BrowseGroupDescriptorServiceClassID_UUID">
            <summary> BrowseGroupDescriptorServiceClassID_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.PublicBrowseGroupServiceClass_UUID">
            <summary> PublicBrowseGroupServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.SerialPortServiceClass_UUID">
            <summary> SerialPortServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LANAccessUsingPPPServiceClass_UUID">
            <summary> LANAccessUsingPPPServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.DialupNetworkingServiceClass_UUID">
            <summary> DialupNetworkingServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.IrMCSyncServiceClass_UUID">
            <summary> IrMCSyncServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.OBEXObjectPushServiceClass_UUID">
            <summary> OBEXObjectPushServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.OBEXFileTransferServiceClass_UUID">
            <summary> OBEXFileTransferServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.IrMCSyncCommandServiceClass_UUID">
            <summary> IrMCSyncCommandServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.HeadsetServiceClass_UUID">
            <summary> HeadsetServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.CordlessTelephonyServiceClass_UUID">
            <summary> CordlessTelephonyServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.AudioSourceServiceClass_UUID">
            <summary> AudioSourceServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.AudioSinkServiceClass_UUID">
            <summary> AudioSinkServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.AVRemoteControlTargetServiceClass_UUID">
            <summary> AVRemoteControlTargetServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.AdvancedAudioDistributionServiceClass_UUID">
            <summary> AdvancedAudioDistributionServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.AVRemoteControlServiceClass_UUID">
            <summary> AVRemoteControlServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.VideoConferencingServiceClass_UUID">
            <summary> VideoConferencingServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.IntercomServiceClass_UUID">
            <summary> IntercomServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.FaxServiceClass_UUID">
            <summary> FaxServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.HeadsetAudioGatewayServiceClass_UUID">
            <summary> HeadsetAudioGatewayServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.WAPServiceClass_UUID">
            <summary> WAPServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.WAPClientServiceClass_UUID">
            <summary> WAPClientServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.PANUServiceClass_UUID">
            <summary> PANUServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.NAPServiceClass_UUID">
            <summary> NAPServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.GNServiceClass_UUID">
            <summary> GNServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.DirectPrintingServiceClass_UUID">
            <summary> DirectPrintingServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.ReferencePrintingServiceClass_UUID">
            <summary> ReferencePrintingServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.ImagingServiceClass_UUID">
            <summary> ImagingServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.ImagingResponderServiceClass_UUID">
            <summary> ImagingResponderServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.ImagingAutomaticArchiveServiceClass_UUID">
            <summary> ImagingAutomaticArchiveServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.ImagingReferenceObjectsServiceClass_UUID">
            <summary> ImagingReferenceObjectsServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.HandsfreeServiceClass_UUID">
            <summary> HandsfreeServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.HandsfreeAudioGatewayServiceClass_UUID">
            <summary> HandsfreeAudioGatewayServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.DirectPrintingReferenceObjectsServiceClass_UUID">
            <summary> DirectPrintingReferenceObjectsServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.ReflectedUIServiceClass_UUID">
            <summary> ReflectedUIServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.BasicPrintingServiceClass_UUID">
            <summary> BasicPrintingServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.PrintingStatusServiceClass_UUID">
            <summary> PrintingStatusServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.HumanInterfaceDeviceServiceClass_UUID">
            <summary> HumanInterfaceDeviceServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.HardcopyCableReplacementServiceClass_UUID">
            <summary> HardcopyCableReplacementServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.HCRPrintServiceClass_UUID">
            <summary> HCRPrintServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.HCRScanServiceClass_UUID">
            <summary> HCRScanServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.CommonISDNAccessServiceClass_UUID">
            <summary> CommonISDNAccessServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.VideoConferencingGWServiceClass_UUID">
            <summary> VideoConferencingGWServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.UDIMTServiceClass_UUID">
            <summary> UDIMTServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.UDITAServiceClass_UUID">
            <summary> UDITAServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.AudioVideoServiceClass_UUID">
            <summary> AudioVideoServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.SimAccessServiceClass_UUID">
            <summary> SimAccessServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.PhonebookClientEquipmentServiceClass_UUID">
            <summary> PhonebookClientEquipmentServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.PhonebookServerEquipmentServiceClass_UUID">
            <summary> PhonebookServerEquipmentServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.PhonebookServiceClass_UUID">
            <summary> PhonebookServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.MessageAccessServerServiceClass_UUID">
            <summary> MessageAccessServerServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.MessageNotificationServerServiceClass_UUID">
            <summary> MessageNotificationServerServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.MessageAccessProfileServiceClass_UUID">
            <summary> MessageAccessProfileServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.PnPInformationServiceClass_UUID">
            <summary> PnPInformationServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.GenericNetworkingServiceClass_UUID">
            <summary> GenericNetworkingServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.GenericFileTransferServiceClass_UUID">
            <summary> GenericFileTransferServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.GenericAudioServiceClass_UUID">
            <summary> GenericAudioServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.GenericTelephonyServiceClass_UUID">
            <summary> GenericTelephonyServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.UPnpServiceClass_UUID">
            <summary> UPnpServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.UPnpIpServiceClass_UUID">
            <summary> UPnpIpServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.ESdpUpnpIpPanServiceClass_UUID">
            <summary> ESdpUpnpIpPanServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.ESdpUpnpIpLapServiceClass_UUID">
            <summary> ESdpUpnpIpLapServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.ESdpUpnpL2capServiceClass_UUID">
            <summary> ESdpUpnpL2capServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.VideoSourceServiceClass_UUID">
            <summary> VideoSourceServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.VideoSinkServiceClass_UUID">
            <summary> VideoSinkServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.VideoDistributionServiceClass_UUID">
            <summary> VideoDistributionServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.SyncMLServerServiceClass_UUID">
            <summary> AVRemoteControlTargetServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.SyncMLClientServiceClass_UUID">
            <summary> AVRemoteControlTargetServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.NokiaOBEXPCSuiteServiceClass_UUID">
            <summary> NokiaOBEXPCSuiteServiceClass_UUID </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.ServiceDiscoveryServerServiceClassID_UUID16">
            <summary> ServiceDiscoveryServerServiceClassID_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.BrowseGroupDescriptorServiceClassID_UUID16">
            <summary> BrowseGroupDescriptorServiceClassID_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.PublicBrowseGroupServiceClass_UUID16">
            <summary> PublicBrowseGroupServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.SerialPortServiceClass_UUID16">
            <summary> SerialPortServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LANAccessUsingPPPServiceClass_UUID16">
            <summary> LANAccessUsingPPPServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.DialupNetworkingServiceClass_UUID16">
            <summary> DialupNetworkingServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.IrMCSyncServiceClass_UUID16">
            <summary> IrMCSyncServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.OBEXObjectPushServiceClass_UUID16">
            <summary> OBEXObjectPushServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.OBEXFileTransferServiceClass_UUID16">
            <summary> OBEXFileTransferServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.IrMCSyncCommandServiceClass_UUID16">
            <summary> IrMCSyncCommandServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.HeadsetServiceClass_UUID16">
            <summary> HeadsetServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.CordlessTelephonyServiceClass_UUID16">
            <summary> CordlessTelephonyServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.AudioSourceServiceClass_UUID16">
            <summary> AudioSourceServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.AudioSinkServiceClass_UUID16">
            <summary> AudioSinkServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.AVRemoteControlTargetServiceClass_UUID16">
            <summary> AVRemoteControlTargetServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.AdvancedAudioDistributionServiceClass_UUID16">
            <summary> AdvancedAudioDistributionServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.AVRemoteControlServiceClass_UUID16">
            <summary> AVRemoteControlServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.VideoConferencingServiceClass_UUID16">
            <summary> VideoConferencingServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.IntercomServiceClass_UUID16">
            <summary> IntercomServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.FaxServiceClass_UUID16">
            <summary> FaxServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.HeadsetAudioGatewayServiceClass_UUID16">
            <summary> HeadsetAudioGatewayServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.WAPServiceClass_UUID16">
            <summary> WAPServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.WAPClientServiceClass_UUID16">
            <summary> WAPClientServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.PANUServiceClass_UUID16">
            <summary> PANUServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.NAPServiceClass_UUID16">
            <summary> NAPServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.GNServiceClass_UUID16">
            <summary> GNServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.DirectPrintingServiceClass_UUID16">
            <summary> DirectPrintingServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.ReferencePrintingServiceClass_UUID16">
            <summary> ReferencePrintingServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.ImagingServiceClass_UUID16">
            <summary> ImagingServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.ImagingResponderServiceClass_UUID16">
            <summary> ImagingResponderServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.ImagingAutomaticArchiveServiceClass_UUID16">
            <summary> ImagingAutomaticArchiveServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.ImagingReferenceObjectsServiceClass_UUID16">
            <summary> ImagingReferenceObjectsServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.HandsfreeServiceClass_UUID16">
            <summary> HandsfreeServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.HandsfreeAudioGatewayServiceClass_UUID16">
            <summary> HandsfreeAudioGatewayServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.DirectPrintingReferenceObjectsServiceClass_UUID16">
            <summary> DirectPrintingReferenceObjectsServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.ReflectedUIServiceClass_UUID16">
            <summary> ReflectedUIServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.BasicPrintingServiceClass_UUID16">
            <summary> BasicPrintingServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.PrintingStatusServiceClass_UUID16">
            <summary> PrintingStatusServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.HumanInterfaceDeviceServiceClass_UUID16">
            <summary> HumanInterfaceDeviceServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.HardcopyCableReplacementServiceClass_UUID16">
            <summary> HardcopyCableReplacementServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.HCRPrintServiceClass_UUID16">
            <summary> HCRPrintServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.HCRScanServiceClass_UUID16">
            <summary> HCRScanServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.CommonISDNAccessServiceClass_UUID16">
            <summary> CommonISDNAccessServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.VideoConferencingGWServiceClass_UUID16">
            <summary> VideoConferencingGWServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.UDIMTServiceClass_UUID16">
            <summary> UDIMTServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.UDITAServiceClass_UUID16">
            <summary> UDITAServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.AudioVideoServiceClass_UUID16">
            <summary> AudioVideoServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.SimAccessServiceClass_UUID16">
            <summary> SimAccessServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.PhonebookClientEquipmentServiceClass_UUID16">
            <summary> PhonebookClientEquipmentServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.PhonebookServerEquipmentServiceClass_UUID16">
            <summary> PhonebookServerEquipmentServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.PhonebookServiceClass_UUID16">
            <summary> PhonebookServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.MessageAccessServerServiceClass_UUID16">
            <summary> MessageAccessServerServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.MessageNotificationServerServiceClass_UUID16">
            <summary> MessageNotificationServerServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.MessageAccessProfileServiceClass_UUID16">
            <summary> MessageAccessProfileServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.PnPInformationServiceClass_UUID16">
            <summary> PnPInformationServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.GenericNetworkingServiceClass_UUID16">
            <summary> GenericNetworkingServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.GenericFileTransferServiceClass_UUID16">
            <summary> GenericFileTransferServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.GenericAudioServiceClass_UUID16">
            <summary> GenericAudioServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.GenericTelephonyServiceClass_UUID16">
            <summary> GenericTelephonyServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.UPnpServiceClass_UUID16">
            <summary> UPnpServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.UPnpIpServiceClass_UUID16">
            <summary> UPnpIpServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.ESdpUpnpIpPanServiceClass_UUID16">
            <summary> ESdpUpnpIpPanServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.ESdpUpnpIpLapServiceClass_UUID16">
            <summary> ESdpUpnpIpLapServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.ESdpUpnpL2capServiceClass_UUID16">
            <summary> ESdpUpnpL2capServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.VideoSourceServiceClass_UUID16">
            <summary> VideoSourceServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.VideoSinkServiceClass_UUID16">
            <summary> VideoSinkServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.VideoDistributionServiceClass_UUID16">
            <summary> VideoDistributionServiceClass_UUID16 </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.PSM_SDP">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.PSM_RFCOMM">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.PSM_TCS_BIN">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.PSM_TCS_BIN_CORDLESS">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.PSM_BNEP">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.PSM_HID_CONTROL">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.PSM_HID_INTERRUPT">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.PSM_UPNP">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.PSM_AVCTP">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.PSM_AVDTP">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.PSM_AVCTP_BROWSE">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.PSM_UDI_C_PLANE">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.PSM_ATT">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.PSM_3DSP">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.PSM_LE_IPSP">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_ATT_BLUETOOTH_BASE_GUID">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_SERVICE_GAP">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_SERVICE_GATT">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GATT_ATTRIBUTE_TYPE_PRIMARY_SERVICE">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GATT_ATTRIBUTE_TYPE_SECONDARY_SERVICE">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GATT_ATTRIBUTE_TYPE_INCLUDE">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GATT_ATTRIBUTE_TYPE_CHARACTERISTIC">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GATT_CHARACTERISTIC_DESCRIPTOR_EXTENDED_PROPERTIES">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GATT_CHARACTERISTIC_DESCRIPTOR_USER_DESCRIPTION">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GATT_CHARACTERISTIC_DESCRIPTOR_CLIENT_CONFIGURATION">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GATT_CHARACTERISTIC_DESCRIPTOR_SERVER_CONFIGURATION">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GATT_CHARACTERISTIC_DESCRIPTOR_FORMAT">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GATT_CHARACTERISTIC_DESCRIPTOR_AGGREGATE_FORMAT">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GATT_CHARACTERISTIC_TYPE_DEVICE_NAME">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GATT_CHARACTERISTIC_TYPE_APPEARANCE">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GATT_CHARACTERISTIC_TYPE_PERIPHERAL_PRIVACY_FLAG">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GATT_CHARACTERISTIC_TYPE_RECONNECTION_ADDRESS">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GATT_CHARACTERISTIC_TYPE_PERIPHERAL_PREFERED_CONNECTION_PARAMETER">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GATT_CHARACTERISTIC_TYPE_SERVICE_CHANGED">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_CATEGORY_OFFSET">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_CATEGORY_MASK">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_SUB_CATEGORY_MASK">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_CATEGORY_UNCATEGORIZED">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_CATEGORY_PHONE">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_CATEGORY_COMPUTER">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_CATEGORY_WATCH">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_CATEGORY_CLOCK">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_CATEGORY_DISPLAY">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_CATEGORY_REMOTE_CONTROL">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_CATEGORY_EYE_GLASSES">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_CATEGORY_TAG">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_CATEGORY_KEYRING">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_CATEGORY_MEDIA_PLAYER">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_CATEGORY_BARCODE_SCANNER">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_CATEGORY_THERMOMETER">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_CATEGORY_HEART_RATE">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_CATEGORY_BLOOD_PRESSURE">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_CATEGORY_HID">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_CATEGORY_GLUCOSE_METER">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_CATEGORY_RUNNING_WALKING_SENSOR">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_CATEGORY_CYCLING">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_CATEGORY_PLUSE_OXIMETER">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_CATEGORY_WEIGHT_SCALE">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_CATEGORY_OUTDOOR_SPORTS_ACTIVITY">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_SUBCATEGORY_GENERIC">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_WATCH_SUBCATEGORY_SPORTS_WATCH">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_THERMOMETER_SUBCATEGORY_EAR">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_HEART_RATE_SUBCATEGORY_HEART_RATE_BELT">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_BLOOD_PRESSURE_SUBCATEGORY_ARM">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_BLOOD_PRESSURE_SUBCATEGORY_WRIST">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_HID_SUBCATEGORY_KEYBOARD">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_HID_SUBCATEGORY_MOUSE">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_HID_SUBCATEGORY_JOYSTICK">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_HID_SUBCATEGORY_GAMEPAD">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_HID_SUBCATEGORY_DIGITIZER_TABLET">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_HID_SUBCATEGORY_CARD_READER">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_HID_SUBCATEGORY_DIGITAL_PEN">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_HID_SUBCATEGORY_BARCODE_SCANNER">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_RUNNING_WALKING_SENSOR_SUBCATEGORY_IN_SHOE">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_RUNNING_WALKING_SENSOR_SUBCATEGORY_ON_SHOE">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_RUNNING_WALKING_SENSOR_SUBCATEGORY_ON_HIP">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_CYCLING_SUBCATEGORY_CYCLING_COMPUTER">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_CYCLING_SUBCATEGORY_SPEED_SENSOR">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_CYCLING_SUBCATEGORY_CADENCE_SENSOR">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_CYCLING_SUBCATEGORY_POWER_SENSOR">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_CYCLING_SUBCATEGORY_SPEED_AND_CADENCE_SENSOR">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_PULSE_OXIMETER_SUBCATEGORY_FINGERTIP">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_PULSE_OXIMETER_SUBCATEGORY_WRIST_WORN">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_OUTDOOR_SPORTS_ACTIVITY_SUBCATEGORY_LOCATION_DISPLAY_DEVICE">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_OUTDOOR_SPORTS_ACTIVITY_SUBCATEGORY_LOCATION_NAVIGATION_DISPLAY_DEVICE">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_OUTDOOR_SPORTS_ACTIVITY_SUBCATEGORY_LOCATION_POD">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_APPEARANCE_OUTDOOR_SPORTS_ACTIVITY_SUBCATEGORY_LOCATION_NAVIGATION_POD">
            <exclude />
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_AD_TYPE_NONE">
            <summary> None or invalid. </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_AD_TYPE_FLAGS">
            <summary> Flags. </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_AD_TYPE_SERVICES_16_MORE">
            <summary> Incomplete List of 16-bit Service Class UUIDs. </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_AD_TYPE_SERVICES_16_ALL">
            <summary> Complete List of 16-bit Service Class UUIDs. </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_AD_TYPE_SERVICES_32_MORE">
            <summary> Incomplete List of 32-bit Service Class UUIDs. </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_AD_TYPE_SERVICES_32_ALL">
            <summary> Complete List of 32-bit Service Class UUIDs. </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_AD_TYPE_SERVICES_128_MORE">
            <summary> Incomplete List of 128-bit Service Class UUIDs. </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_AD_TYPE_SERVICES_128_ALL">
            <summary> Complete List of 128-bit Service Class UUIDs. </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_AD_TYPE_LOCAL_NAME_SHORT">
            <summary> Shortened Local Name. </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_AD_TYPE_LOCAL_NAME_COMPLETE">
            <summary> Complete Local Name. </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_AD_TYPE_TXPOWER">
            <summary> Tx Power Level. </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_AD_TYPE_COD">
            <summary> Class of Device. </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_AD_TYPE_PAIRING_HASH_C">
            <summary> Simple Pairing Hash C. </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_AD_TYPE_PAIRING_RAND_R">
            <summary> Simple Pairing Randomizer R. </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_AD_TYPE_DEVICE_ID">
            <summary> Device ID. </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_AD_TYPE_SM_OOB_FLAGS">
            <summary> Security Manager Out of Band Flags. </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_AD_TYPE_CON_INTERVALS">
            <summary> Slave Connection Interval Range. </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_AD_TYPE_SERVICE_SOL_UUIDS_16">
            <summary> List of 16-bit Service Solicitation UUIDs. </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_AD_TYPE_SERVICE_SOL_UUIDS_128">
            <summary> List of 128-bit Service Solicitation UUIDs. </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_AD_TYPE_SERVICE_DATA_16">
            <summary> Service Data 16-bit UUID. </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_AD_TYPE_PUBLIC_TARGET_ADDRESS">
            <summary> Public Target Address. </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_AD_TYPE_RANDOM_TARGET_ADDRESS">
            <summary> Random Target Address. </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_AD_TYPE_APPEARANCE">
            <summary> Appearance. </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_AD_TYPE_ADV_INTERVAL">
            <summary> Advertising Interval. </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_AD_TYPE_ADDRESS">
            <summary> LE Bluetooth Device Address. </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_AD_TYPE_ROLE">
            <summary> LE Role. </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_AD_TYPE_PAIRING_HASH_C_256">
            <summary> Simple Pairing Hash C-256. </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_AD_TYPE_PAIRING_RAND_R_256">
            <summary> Simple Pairing Randomizer R-256. </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_AD_TYPE_SERVICE_SOL_UUIDS_32">
            <summary> List of 32-bit Service Solicitation UUIDs. </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_AD_TYPE_SERVICE_DATA_32">
            <summary> Service Data - 32-bit UUID. </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_AD_TYPE_SERVICE_DATA_128">
            <summary> Service Data - 128-bit UUID. </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_AD_TYPE_SECURE_CONFIRM">
            <summary> LE Secure Connections Confirmation Value. </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_AD_TYPE_SECURE_RAND">
            <summary> LE Secure Connections Random Value. </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_AD_TYPE_URI">
            <summary> URI. </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_AD_TYPE_INDOOR_POS">
            <summary> Indoor Positioning. </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_AD_TYPE_TRANS_DISC_DATA">
            <summary> Transport Discovery Data. </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_AD_TYPE_FEATURES">
            <summary> LE Supported Features. </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_AD_TYPE_CH_MAP">
            <summary> Channel Map Update Indication. </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_AD_TYPE_PB_ADV">
            <summary> PB-ADV. </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_AD_TYPE_MESH_MSG">
            <summary> Mesh Message. </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_AD_TYPE_MESH_BEACON">
            <summary> Mesh Beacon. </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_AD_TYPE_BIG_INGO">
            <summary> BIGInfo. </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_AD_TYPE_BROADCAST_CODE">
            <summary> Broadcast Code. </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_AD_TYPE_3D_INFO">
            <summary> 3D Information Data. </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.LE_GAP_AD_TYPE_MANUFACTURER">
            <summary> Manufacturer Specific Data. </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.EDDYSTONE_BEACON_UUID_16">
            <summary> Eddystone Beacon service UUID. </summary>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.EDDYSTONE_UID_FRAME_ID">
            <summary> Eddystone UID beacon frame ID. </summary>
            <remarks> This constant is defined for internal use only. </remarks>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.EDDYSTONE_URL_FRAME_ID">
            <summary> Eddystone URL beacon frame ID. </summary>
            <remarks> This constant is defined for internal use only. </remarks>
        </member>
        <member name="F:wclBluetooth.wclUUIDs.EDDYSTONE_TLM_FRAME_ID">
            <summary> Eddystone TLM beacon frame ID. </summary>
            <remarks> This constant is defined for internal use only. </remarks>
        </member>
    </members>
</doc>
